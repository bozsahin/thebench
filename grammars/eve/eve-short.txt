%%%
%This file is autogenerated by the processor at: 14:20:15 of Thursday, 2.03.2023 (GMT+3)
%%%

MORE | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . more x <1, 1.0>
MORE | det :: predp/predp : \ x . more x <2, 1.0>
JUICE | un :: np[type=uncount,agr=3] : juice <3, 1.0>
? | pun :: s[type=q]\*np : \ x . q x <4, 1.0>
WHERE | q :: s[type=q]/(s[type=q]/np) : \ x . q place x <5, 1.0>
IS | tv> :: (s[type=q]/np)/np[agr=3,count=sg] : \ x . \ y . simp prt y x <6, 1.0>
YOUR | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . your x <7, 1.0>
CUP | np :: np[type=count,agr=3,count=sg] : cup <8, 1.0>
I | pro :: np[agr=1,count=sg] : i <9, 1.0>
TOOK | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst take x y <10, 1.0>
IT | pro :: np[agr=3,count=sg] : it <11, 1.0>
AM | tv> :: (s[type=?x]\np[agr=1,count=sg])/np : \ x . \ y . simp prt eq x y <12, 1.0>
AM | tv> :: (s[type=?x]\np[agr=1,count=sg])/predp : \ x . \ y . simp prt x y <13, 1.0>
NOT | x :: @x/@x : \ x . not x <14, 1.0>
SURE | adj :: predp : \ x . sure x <15, 1.0>
ARE | aux :: (s[type=q]/(s\np))/np : \ x . \ y . q prt y x <16, 1.0>
YOU | pro :: np[agr=2] : you <17, 1.0>
SAYING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont say x y <18, 1.0>
FRASER | pn :: np[type=proper,agr=3] : fraser <19, 1.0>
WHAT | q :: s[type=q]/(s[type=q]/np) : \ x . q what x <20, 1.0>
WHAT | q :: s[type=q]/s[type=q] : \ x . q what x <21, 1.0>
THAT | np :: np[agr=3,count=sg] : that <22, 1.0>
A | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . a x <23, 1.0>
FLY | np :: np[type=count,agr=3,count=sg] : fly <24, 1.0>
GET | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt get x y <25, 1.0>
ONE | np :: np[agr=3] : one <26, 1.0>
GO | iv> :: s[type=imp] : simp prt go you <27, 1.0>
AND | x :: (@x\*@x)/*@x : \ p . \ q . \ x . and (p x) (q x) <28, 1.0>
GET | tv> :: s[type=imp]/np : \ x . simp prt get x you <29, 1.0>
TELEPHONE | np :: np[type=count,agr=3,count=sg] : telephone <30, 1.0>
HE | pro :: np[agr=3,count=sg] : he <31, 1.0>
GAVE | dv2> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . simp pst give x y z <32, 1.0>
WHO | q :: s[type=q]/(s[type=q]/np) : \ x . q who x <33, 1.0>
CALLING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont call x y <34, 1.0>
WHO | qw :: np[type=qw] : q person <35, 1.0>
IS | aux :: (s[type=q]/(s\np))/np[agr=3,count=sg] : \ x . \ y . q prt y x <36, 1.0>
THE | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . the x <37, 1.0>
MAN | np :: np[type=count,agr=3,count=sg] : man <38, 1.0>
DOING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont do x y <39, 1.0>
WANT | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt want x y <40, 1.0>
COOKIE | np :: np[type=count,agr=3,count=sg] : cookie <41, 1.0>
? | pun :: s[type=q]\*s[type=?x] : \ x . q x <42, 1.0>
CAN | mod :: (s[type=q]/(s\np))/np : \ x . \ y . q can y x <43, 1.0>
DO | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt do x y <44, 1.0>
DO | iv> :: s[type=?x]\np : \ x . do x <45, 1.0>
THERE | sp :: np[type=acc] : there <46, 1.0>
IS | tv> :: (s[type=?x]\np[agr=3,count=sg])/np : \ x . \ y . simp prt eq x y <47, 1.0>
BABY | np :: np[type=count,agr=3,count=sg] : baby <48, 1.0>
MOMMY | pn :: np[type=proper,agr=3] : mommy <49, 1.0>
CAN | mod :: (s\np)/(s\np) : \ x . \ y . can x y <50, 1.0>
READ | iv> :: s[type=?x]\np : \ x . simp prt read x <51, 1.0>
BUSY | adj :: predp : \ x . busy x <52, 1.0>
READ | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt read x y <53, 1.0>
BOOK | np :: np[type=count,agr=3,count=sg] : book <54, 1.0>
STOOL | np :: np[type=count,agr=3,count=sg] : stool <55, 1.0>
DID | aux :: (s[type=q]/(s\np))/np : \ x . \ y . q simp pst y x <56, 1.0>
EAT | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt eat x y <57, 1.0>
ATE | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst eat x y <58, 1.0>
MILK | un :: np[type=uncount,agr=3] : milk <59, 1.0>
DO | aux :: (s\np)/(s\np) : \ x . \ y . simp prt do x y <60, 1.0>
HAVE | aux :: (s\np)/(s\np) : \ x . \ y . prt prft x y <61, 1.0>
JUST | adv :: @x/@x : \ x . just x <62, 1.0>
HAD | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst have x y <63, 1.0>
SOME | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . some x <64, 1.0>
JUICE | un :: np[type=uncount,agr=3] : juice <65, 1.0>
DRINK | tv> :: s[type=imp]/np : \ x . simp prt drink x you <66, 1.0>
WATER | un :: np[type=uncount,agr=3] : water <67, 1.0>
COFFEE | un :: np[type=uncount,agr=3] : coffee <68, 1.0>
IS | aux :: (s\np)/(s\np) : \ x . \ y . prt x y <69, 1.0>
DRINKING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont drink x y <70, 1.0>
DRINKING | tving> :: s[type=ing]/np : \ x . cont eat x you <71, 1.0>
HIS | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . his x <72, 1.0>
GO | iv> :: s[type=?x]\np : \ x . simp prt go x <73, 1.0>
GO | iv> :: s[type=?x]\np : \ x . go x <74, 1.0>
LATER | tp :: s/s : \ x . time x later <75, 1.0>
LATER | tp :: s\s : \ x . time x later <76, 1.0>
WE | pro :: np[agr=1,count=pl] : we <77, 1.0>
WILL | aux :: (s\np)/(s\np) : \ x . \ y . simp ftr x y <78, 1.0>
WILL | aux :: (s[type=q]/(s\np))/np : \ x . \ y . q simp ftr y x <79, 1.0>
HAVE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt have x y <80, 1.0>
HAT | np :: np[type=count,agr=3,count=sg] : hat <81, 1.0>
AND | conj :: s/s : \ x . and x <82, 1.0>
WITH | prex :: (s\s)/np : \ x . \ y . inst y (with x) <83, 1.0>
GIVE | dv1> :: (s[type=imp]/np)/np : \ x . \ y . simp prt give x y you <84, 1.0>
DOLLY | np :: np[type=count,agr=3,count=sg] : dolly <85, 1.0>
HER | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . her x <86, 1.0>
BOTTLE | np :: np[type=count,agr=3,count=sg] : bottle <87, 1.0>
DOES | aux :: (s\np)/(s\np) : \ x . \ y . simp prt does x y <88, 1.0>
SOLDIERS | pln :: np[type=count,agr=3,count=pl] : pl soldier <89, 1.0>
BRING | tv> :: s[type=imp]/np : \ x . simp prt bring x you <90, 1.0>
HERE | sp :: s\s : \ x . loc x here <91, 1.0>
AND | x :: (@x\@x)/@x : \ x . \ y . and x y <92, 1.0>
JACK | pn :: np[type=proper,agr=3] : jack <93, 1.0>
JILL | pn :: np[type=proper,agr=3] : jill <94, 1.0>
EVE | pn :: np[type=proper,agr=3] : eve <95, 1.0>
HAS | tv> :: (s[type=?x]\np[agr=3,count=sg])/np : \ x . \ y . simp prt have x y <96, 1.0>
ARE | aux :: (s\np)/(s\np) : \ x . \ y . prt x y <97, 1.0>
GONNA | aux :: (s\np)/(s\np) : \ x . \ y . gng x y <98, 1.0>
FIND | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt find x y <99, 1.0>
THERE | sp :: s/s : \ x . loc x there <100, 1.0>
MAN | np :: np[type=count,agr=3,count=sg] : man <101, 1.0>
THAT | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . that x <102, 1.0>
ARE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt eq x y <103, 1.0>
WRITE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt write x y <104, 1.0>
LETTER | np :: np[type=count,agr=3,count=sg] : letter <105, 1.0>
PENCIL | np :: np[type=count,agr=3,count=sg] : pencil <106, 1.0>
IN | pre :: (s\s)/np : \ x . \ y . loc y (in x) <107, 1.0>
CORNER | np :: np[type=count,agr=3,count=sg] : corner <108, 1.0>
GOING-TO | aux :: (s\np)/(s\np) : \ x . \ y . gng x y <109, 1.0>
SHOE | np :: np[type=count,agr=3,count=sg] : shoe <110, 1.0>
RACKETYBOOM | pn :: np[type=proper,agr=3] : racketyboom <111, 1.0>
READ | tv-about> :: ((s[type=?x]\np)/np)/'about ' : \ x . \ y . \ z . simp prt (read _ x) y z <112, 1.0>
CHOOCHOO | np :: np[type=count,agr=3,count=sg] : choochoo <113, 1.0>
TO | pre :: (s\s)/np : \ x . \ y . loc y (to x) <114, 1.0>
COME | iv> :: s[type=imp] : simp prt come you <115, 1.0>
? | pun :: s[type=q]\*s[type=imp] : \ x . q x <116, 1.0>
FOR | prex :: (s\s)/np : \ x . \ y . aim y (for x) <117, 1.0>
FOR | prex :: (s/s)/np : \ x . \ y . aim y (for x) <118, 1.0>
LUNCH | np :: np[type=count,agr=3,count=sg] : lunch <119, 1.0>
TOP | np :: np[agr=3] : top <120, 1.0>
DUCKS | pln :: np[type=count,agr=3,count=pl] : pl duck <121, 1.0>
SAY | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt say x y <122, 1.0>
AND | x :: s[type=?x]/np : \ x . and x <123, 1.0>
WHAT | qw :: np[type=qw] : q thing <124, 1.0>
RADIO | np :: np[type=count,agr=3,count=sg] : radio <125, 1.0>
WANT | tv> :: ((s[type=?x]\np)/(s\np))/np : \ x . \ y . \ z . simp prt want (y x z) x z <126, 1.0>
WANT | tv> :: ((s[type=?x]\np)/(s\np))/np : \ x . \ y . \ z . simp prt want (y x) x z <127, 1.0>
WANT | tv> :: (s[type=?x]/(s\np))/np : \ x . \ y . simp prt want (y x) x you <128, 1.0>
ME | pro :: np : i <129, 1.0>
TO | x :: (s\np)/(s\np) : \ p . \ x . p x <130, 1.0>
SIT | iv> :: s[type=?x]\np : \ x . simp prt sit x <131, 1.0>
SIT | iv> :: s[type=?x]\np : \ x . sit x <132, 1.0>
ON | pre :: (s\s)/np : \ x . \ y . loc y (on x) <133, 1.0>
WHO | q :: s[type=q]/(s\np) : \ x . q subject who x <134, 1.0>
SITTING | iving> :: s[type=ing]\np : \ x . cont sit x <135, 1.0>
NEIL | pn :: np[type=proper,agr=3] : neil <136, 1.0>
GOOD | adj :: np/np : \ x . good x <137, 1.0>
GIRL | np :: np[type=count,agr=3,count=sg] : girl <138, 1.0>
WAS | tv2> :: (s[type=?x]\np[count=sg])/np : \ x . \ y . simp pst eq x y <139, 1.0>
SEAT | np :: np[type=count,agr=3,count=sg] : seat <140, 1.0>
ARE | tv> :: (s[type=q]/np)/np : \ x . \ y . simp prt y x <141, 1.0>
ALRIGHT | adj :: predp : \ x . alright x <142, 1.0>
SAMBO | pn :: np[type=proper,agr=3] : sambo <143, 1.0>
BECAUSE | conj :: s/s : \ x . because x <144, 1.0>
BECAUSE | conj :: s/np : \ x . because x <145, 1.0>
AM | aux :: (s\np[agr=1,count=sg])/(s\np) : \ x . \ y . prt x y <146, 1.0>
MAKING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont make x y <147, 1.0>
LUNCH | np :: np[type=count,agr=3,count=sg] : lunch <148, 1.0>
HIT | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt hit x y <149, 1.0>
HEAD | np :: np[type=count,agr=3,count=sg] : head <150, 1.0>
DO | aux :: (s[type=q]/(s\np))/np : \ x . \ y . q simp prt do y x <151, 1.0>
PAPER | np :: np[type=count,agr=3,count=sg] : paper <152, 1.0>
MY | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . my x <153, 1.0>
MY | x :: np : my thing <154, 1.0>
DIAPER | np :: np[type=count,agr=3,count=sg] : diaper <155, 1.0>
GOING | iving> :: s[type=ing]\np : \ x . cont go x <156, 1.0>
UPSTAIRS | sp :: s\s : \ x . loc x upstairs <157, 1.0>
READ | iv> :: s[type=imp] : simp prt read you <158, 1.0>
CHAIR | np :: np[type=count,agr=3,count=sg] : chair <159, 1.0>
CHEESE | un :: np[type=uncount,agr=3] : cheese <160, 1.0>
GOOD | np :: np[type=count,agr=3,count=sg] : good <161, 1.0>
TAPERECORDER | np :: np[type=count,agr=3,count=sg] : taperecorder <162, 1.0>
SOUP | un :: np[type=uncount,agr=3] : soup <163, 1.0>
PUDDING | un :: np[type=uncount,agr=3] : pudding <164, 1.0>
CRACKER | np :: np[type=count,agr=3,count=sg] : cracker <165, 1.0>
DOWN | sp :: np[type=acc] : down <166, 1.0>
APPLE | np :: np[type=count,agr=3,count=sg] : apple <167, 1.0>
DOES | aux :: (s[type=q]/(s\np))/np[agr=3,count=sg] : \ x . \ y . q simp prt does y x <168, 1.0>
FAR | sp :: s\s : \ x . loc x far <169, 1.0>
CELERY | un :: np[type=uncount,agr=3] : celery <170, 1.0>
EATS | tvs> :: (s[type=?x]\np[agr=3,count=sg])/np : \ x . \ y . simp prt eat x y <171, 1.0>
SHE | pro :: np[agr=3,count=sg] : she <172, 1.0>
NAME | np :: np[type=count,agr=3,count=sg] : name <173, 1.0>
THIS | np :: np[agr=3] : this <174, 1.0>
DOLLY | pn :: np[type=proper,agr=3] : dolly <175, 1.0>
(QUOTE S) | x :: (np\np)/np : \ x . \ y . x (of y) <176, 1.0>
SPOOL | np :: np[type=count,agr=3,count=sg] : spool <177, 1.0>
BELONGS | tvs-to> :: ((s[type=?x]\np[agr=3,count=sg])/np)/'to ' : \ x . \ y . \ z . simp prt (belong _ x) y z <178, 1.0>
NAPKIN | np :: np[type=count,agr=3,count=sg] : napkin <179, 1.0>
BRING | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt bring x y <180, 1.0>
BRING | tv> :: (s[type=?x]\np)/np : \ x . \ y . bring x y <181, 1.0>
KITCHEN | np :: np[type=place,agr=3,count=sg] : kitchen <182, 1.0>
MOUTH | np :: np[type=count,agr=3,count=sg] : mouth <183, 1.0>
TASTE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt taste x y <184, 1.0>
WOULD | aux :: (s[type=q]/(s\np))/np : \ x . \ y . would y x <185, 1.0>
CHANGE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt change x y <186, 1.0>
RECORD | np :: np[type=count,agr=3,count=sg] : record <187, 1.0>
FIREPLACE | p :: np[type=place,agr=3,count=sg] : fireplace <188, 1.0>
CALL | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt call x y <189, 1.0>
GRANMA | pn :: np[type=proper,agr=3] : granma <190, 1.0>
CALLED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst call x y <191, 1.0>
LOOK | iv> :: s[type=?x]\np : \ x . simp prt look x <192, 1.0>
LOOK | iv> :: s[type=?x]\np : \ x . look x <193, 1.0>
THEM | pn :: np[type=proper,agr=3] : they <194, 1.0>
TOO | adv :: @x\@x : \ x . x too <195, 1.0>
CROMER | pn :: np[type=proper,agr=3] : cromer <196, 1.0>
COFFEE | un :: np[type=uncount,agr=3] : coffee <197, 1.0>
COMING | iving> :: s[type=ing]\np : \ x . cont come x <198, 1.0>
NICE | adj :: np/np : \ x . nice x <199, 1.0>
BECKY | pn :: np[type=proper,agr=3] : becky <200, 1.0>
WRITING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont write x y <201, 1.0>
FALL | iv> :: s[type=?x]\np : \ x . simp prt fall x <202, 1.0>
BE | tv> :: (s[type=?x]\np)/predp : \ x . \ y . be x y <203, 1.0>
BETTER | adj :: predp : \ x . better x <204, 1.0>
HAVING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont have x y <205, 1.0>
COUGH | np :: np[type=count,agr=3,count=sg] : cough <206, 1.0>
BANJO | np :: np[type=count,agr=3,count=sg] : banjo <207, 1.0>
FLOOR | np :: np[type=count,agr=3,count=sg] : floor <208, 1.0>
OUT | pre :: (s\s)/np : \ x . \ y . loc y (out x) <209, 1.0>
HERE | sp :: np[type=acc] : here <210, 1.0>
KEEP | tv-out> :: (s[type=imp]/'out ')/np : \ x . \ y . simp prt (keep _ y) x you <211, 1.0>
YOUR | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . your x <212, 1.0>
FINGER | np :: np[type=count,agr=3,count=sg] : finger <213, 1.0>
MAMA | pn :: np[type=proper,agr=3] : mama <214, 1.0>
LOOK | iv> :: s[type=imp] : simp prt look you <215, 1.0>
YOURS | np :: np[agr=3] : yours <216, 1.0>
GONNA | aux :: s[type=q]/(s\np) : \ x . q gng x <217, 1.0>
SIT | iv-down :: (s[type=?x]\np)/'down ' : \ x . \ y . simp prt (sit _ x) y <218, 1.0>
MAY | mod :: (s\np)/(s\np) : \ x . \ y . may x y <219, 1.0>
TURN | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt turn x y <220, 1.0>
TURN | tv> :: (s[type=?x]\np)/np : \ x . \ y . turn x y <221, 1.0>
TURN | iv> :: s[type=?x]\np : \ x . turn x <222, 1.0>
PLAY | iv> :: s[type=?x]\np : \ x . play x <223, 1.0>
PLAYING | iving> :: s[type=ing]\np : \ x . cont play x <224, 1.0>
HARD | adv :: (s\np)\(s\np) : \ x . \ y . x y hard <225, 1.0>
PARDON | tv> :: s[type=imp]/np : \ x . simp prt pardon x you <226, 1.0>
SEE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt see x y <227, 1.0>
LETTER | np :: np[type=count,agr=3,count=sg] : letter <228, 1.0>
OVER | pre :: (s\s)/np : \ x . \ y . loc y (over x) <229, 1.0>
KATHY | pn :: np[type=proper,agr=3] : kathy <230, 1.0>
SUGAR | un :: np[type=uncount,agr=3] : sugar <231, 1.0>
GOES | ivs :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt go x <232, 1.0>
KING | np :: np[type=count,agr=3,count=sg] : king <233, 1.0>
BEAR | np :: np[type=count,agr=3,count=sg] : bear <234, 1.0>
CAT | np :: np[type=count,agr=3,count=sg] : cat <235, 1.0>
FOX | np :: np[type=count,agr=3,count=sg] : fox <236, 1.0>
DOG | np :: np[type=count,agr=3,count=sg] : dog <237, 1.0>
HUMPTYDUMPTY | pn :: np[type=proper,agr=3] : humptydumpty <238, 1.0>
DUMPTY | pn :: np[type=proper,agr=3] : dumpty <239, 1.0>
KITTY | np :: np[type=count,agr=3,count=sg] : kitty <240, 1.0>
RIGHT | adj :: predp : \ x . right x <241, 1.0>
FELL | tv-off> :: ((s[type=?x]\np)/np)/'off ' : \ x . \ y . \ z . simp pst (fall _ x) y z <242, 1.0>
WELL | np :: np[type=count,agr=3,count=sg] : well <243, 1.0>
HORSIE | np :: np[agr=3] : horsie <244, 1.0>
HURT | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt hurt x y <245, 1.0>
HURT | tv> :: (s[type=?x]\np)/np : \ x . \ y . hurt x y <246, 1.0>
FISH | np :: np[type=count,agr=3,count=sg] : fish <247, 1.0>
FISH | pln :: np[type=count,agr=3,count=pl] : pl fish <248, 1.0>
THEY | pro :: np[agr=3,count=pl] : they <249, 1.0>
SWIMMING | iving> :: s[type=ing]\np : \ x . cont swim x <250, 1.0>
BRIEFCASE | np :: np[type=count,agr=3,count=sg] : briefcase <251, 1.0>
PLAY | iv> :: s[type=?x]\np : \ x . play x <252, 1.0>
DANCE | iv> :: s[type=?x]\np : \ x . simp prt dance x <253, 1.0>
BIRD | np :: np[type=count,agr=3,count=sg] : bird <254, 1.0>
HEAR | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt hear x y <255, 1.0>
LIGHT | un :: np[type=uncount,agr=3] : light <256, 1.0>
HORSE | np :: np[type=count,agr=3,count=sg] : horse <257, 1.0>
WAIT | iv> :: s[type=imp] : simp prt wait you <258, 1.0>
OFF | pre :: np : off <259, 1.0>
WHICH | qwadj :: np[type=qw]/np : \ x . q x <260, 1.0>
FIND | tv> :: s[type=imp]/np : \ x . simp prt find x you <261, 1.0>
REST | un :: np[type=uncount,agr=3] : rest <262, 1.0>
CRYING | tving> :: s[type=ing]\np : \ x . cont cry x <263, 1.0>
TABLE | np :: np[type=count,agr=3,count=sg] : table <264, 1.0>
OUTSIDE | sp :: s\s : \ x . loc x outside <265, 1.0>
OUTSIDE | sp :: np[type=acc] : outside <266, 1.0>
WAS | aux :: (s\np)/(s\np) : \ x . \ y . pst x y <267, 1.0>
UNHAPPY | adj :: predp : \ x . unhappy x <268, 1.0>
FIX | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt fix x y <269, 1.0>
SANDY | pn :: np[type=proper,agr=3] : sandy <270, 1.0>
BIBBIE | np :: np[type=count,agr=3,count=sg] : bibbie <271, 1.0>
TAPIOCA | un :: np[type=uncount,agr=3] : tapioca <272, 1.0>
FORGOT | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst forget x y <273, 1.0>
SPOON | np :: np[type=count,agr=3,count=sg] : spoon <274, 1.0>
BREAKFAST | un :: np[type=uncount,agr=3] : breakfast <275, 1.0>
BED | np :: np[type=count,agr=3,count=sg] : bed <276, 1.0>
PAPA | pn :: np[type=proper,agr=3] : papa <277, 1.0>
TOMATO-SOUP | un :: np[type=uncount,agr=3] : tomato-soup <278, 1.0>
TOMATO | np :: np[type=count,agr=3,count=sg] : tomato <279, 1.0>
GONE | x :: s[type=?x]\np : \ x . prft go x <280, 1.0>
COOK | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt cook x y <281, 1.0>
COOK | iv> :: s[type=imp] : simp prt cook you <282, 1.0>
WIENER | np :: np[type=count,agr=3,count=sg] : wiener <283, 1.0>
DROPPED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst drop x y <284, 1.0>
SKUNK | np :: np[type=count,agr=3,count=sg] : skunk <285, 1.0>
PENCILS | pln :: np[type=count,agr=3,count=pl] : pl pencil <286, 1.0>
GORDON | pn :: np[type=proper,agr=3] : gordon <287, 1.0>
SEND | tv> :: s[type=imp]/np : \ x . simp prt send x you <288, 1.0>
BOX | np :: np[type=count,agr=3,count=sg] : box <289, 1.0>
SHEILA | pn :: np[type=proper,agr=3] : sheila <290, 1.0>
USING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont use x y <291, 1.0>
ERASER | np :: np[type=count,agr=3,count=sg] : eraser <292, 1.0>
CUT | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt cut x y <293, 1.0>
FINISHED | tv2 :: (s[type=?x]\np)/np : \ x . \ y . simp pst finish x y <294, 1.0>
CLEANING | un :: np[type=uncount,agr=3] : cleaning <295, 1.0>
CUPBOARD | np :: np[type=count,agr=3,count=sg] : cupboard <297, 1.0>
READY | adj :: predp : \ x . ready x <298, 1.0>
NEED | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt need x y <299, 1.0>
BUT | conj :: s/s : \ x . but x <300, 1.0>
AN | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . an x <301, 1.0>
DID | aux :: (s\np)/(s\np) : \ x . \ y . simp pst x y <302, 1.0>
UNDERSTAND | tv> :: (s[type=?x]\np)/np : \ x . \ y . understand x y <303, 1.0>
PUSH | un :: np[type=uncount,agr=3] : push <304, 1.0>
WENT | tv2> :: s[type=?x]\np : \ x . simp pst go x <305, 1.0>
TO | x :: ((s\np)\(s\np))/(s\np) : \ p . \ q . \ x . aim (p x) q <306, 1.0>
CATHY | pn :: np[type=proper,agr=3] : cathy <307, 1.0>
ELSE | x :: np[type=?x]\np[type=?x] : \ x . x else <308, 1.0>
CANDLES | pln :: np[type=count,agr=3,count=pl] : pl candle <309, 1.0>
WAS | tv2> :: (s[type=q]/np)/np[count=sg] : \ x . \ y . simp pst y x <310, 1.0>
SURE | sadv :: @x/@x : \ x . x sure <311, 1.0>
WRITING | tving-on> :: ((s[type=ing]\np)/np)/'on ' : \ x . \ y . \ z . cont (write _ x) y z <312, 1.0>
CRAYONS | pln :: np[type=count,agr=3,count=pl] : pl crayon <313, 1.0>
GIVE | dv> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . simp prt give x y z <314, 1.0>
FIXING | tving> :: s[type=ing]/np : \ x . cont fix x you <315, 1.0>
LOTS-OF | adj :: np/np : \ x . lots-of x <316, 1.0>
CANNOT | mod :: (s\np)/(s\np) : \ x . \ y . cannot x y <317, 1.0>
USE | tv> :: (s[type=?x]\np)/np : \ x . \ y . use x y <318, 1.0>
PEGS | pln :: np[type=count,agr=3,count=pl] : pl peg <319, 1.0>
CHEESE-SANDWICH | np :: np[type=count,agr=3,count=sg] : cheese-sandwich <320, 1.0>
HOT | adj :: predp : \ x . hot x <321, 1.0>
IS | tv> :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt x <322, 1.0>
NOT | x :: @x\@x : \ x . x not <323, 1.0>
HAVE | aux :: (s[type=q]/(s\np))/np : \ x . \ y . q prt y x <324, 1.0>
BEEN | aux :: (s\np)/(s\np) : \ x . \ y . prft be x y <325, 1.0>
DRAWING | iving> :: s[type=ing]\np : \ x . cont draw x <326, 1.0>
GRAPE-JUICE | un :: np[type=uncount,agr=3] : grape-juice <327, 1.0>
BETTER | sadv :: @x/@x : \ x . x better <328, 1.0>
FIX | tv> :: s[type=imp]/np : \ x . simp prt fix x you <329, 1.0>
WELCOME | adj :: predp : \ x . welcome x <330, 1.0>
ANOTHER | adj :: np/np : \ x . another x <331, 1.0>
NOW | tp :: s\s : \ x . time x now <332, 1.0>
THEN | tp :: s\s : \ x . time x then <333, 1.0>
NOW | tp :: np : now <334, 1.0>
ALLGONE | adj :: predp : \ x . allgone x <335, 1.0>
BICYCLE | np :: np[type=count,agr=3,count=sg] : bicycle <336, 1.0>
THERE | sp :: s\s : \ x . loc x there <337, 1.0>
JIM | pn :: np[type=proper,agr=3] : jim <338, 1.0>
DOES | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt does x y <339, 1.0>
FUNNY | adj :: np/np : \ x . funny x <340, 1.0>
THINGS | pln :: np[type=count,agr=3,count=pl] : pl thing <341, 1.0>
AGAIN | sadv :: @x\@x : \ x . x again <342, 1.0>
CHIRPS | ivs :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt chirp x <343, 1.0>
GOES | x :: (s[type=?x]\np[agr=3,count=sg])/(s\np) : \ x . \ y . simp prt say x y <344, 1.0>
WHISTLE | x :: s\np : \ x . whistle x <345, 1.0>
CHIRP | iv> :: s[type=?x]\np : \ x . simp prt chirp x <346, 1.0>
HIM | pro :: np : he <347, 1.0>
SOMETHING | np :: np[agr=3] : something <348, 1.0>
DUCK | np :: np[type=count,agr=3,count=sg] : duck <349, 1.0>
WHAT-ELSE | q :: s[type=q]/(s/np) : \ x . q what else x <350, 1.0>
LUNCHTIME | tp :: np : lunchtime <351, 1.0>
BREAD | un :: np[type=uncount,agr=3] : bread <352, 1.0>
PICK | tv-up> :: (s[type=imp]/'up ')/np : \ x . \ y . simp prt (pick _ y) x you <353, 1.0>
PICK | tv-up> :: (s[type=imp]/np)/'up ' : \ x . \ y . simp prt (pick _ x) y you <354, 1.0>
CLIMB | iv-in> :: s[type=imp]/'in ' : \ x . simp prt (climb _ x) you <355, 1.0>
MOVE | iv> :: s[type=?x]\np : \ x . simp prt move x <356, 1.0>
RIGHT | x :: @x/@x : \ x . right x <357, 1.0>
JUMPING | iving> :: s[type=ing]\np : \ x . cont jump x <358, 1.0>
PIECE | np :: np[type=count,agr=3,count=sg] : piece <359, 1.0>
SLEEPY | adj :: predp : \ x . sleepy x <360, 1.0>
BUTTER | un :: np[type=uncount,agr=3] : butter <361, 1.0>
NOISE | un :: np[type=uncount,agr=3] : noise <362, 1.0>
CHIRPS | pln :: np[type=count,agr=3,count=pl] : pl chirp <363, 1.0>
JUMP | iv> :: s[type=imp] : simp prt jump you <364, 1.0>
CHIRP | np :: np[type=count,agr=3,count=sg] : chirp <365, 1.0>
SNOWMAN | np :: np[type=count,agr=3,count=sg] : snowman <366, 1.0>
WEARING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont wear x y <367, 1.0>
GLASSES | pln :: np[type=count,agr=3,count=pl] : pl glass <368, 1.0>
HAS | aux :: (s\np)/(s\np) : \ x . \ y . prt prft x y <369, 1.0>
GONE | iv3-away> :: (s[type=?x]\np)/'away ' : \ x . \ y . prft (go _ x) y <370, 1.0>
SEE | tv> :: s[type=imp]/np : \ x . simp prt see x you <371, 1.0>
BOUILLON | un :: np[type=uncount,agr=3] : bouillon <372, 1.0>
SIT | iv-down :: s[type=imp]/'down ' : \ x . simp prt (sit _ x) you <373, 1.0>
SLEEPING | tving> :: s[type=ing]\np : \ x . cont sleep x <374, 1.0>
LAYING | tving> :: s[type=ing]\np : \ x . cont lay x <375, 1.0>
CLEAN | adj :: np/np : \ x . clean x <376, 1.0>
NEW | adj :: np/np : \ x . new x <377, 1.0>
BLANKET | np :: np[type=count,agr=3,count=sg] : blanket <378, 1.0>
GREEN | adj :: predp : \ x . green x <379, 1.0>
LYING | iving> :: s[type=ing] : cont lie you <380, 1.0>
COUCH | np :: np[type=count,agr=3,count=sg] : couch <381, 1.0>
HOLD | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt hold x y <382, 1.0>
TIE | tv> :: s[type=imp]/np : \ x . simp prt tie x you <383, 1.0>
TIE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt tie x y <384, 1.0>
DOOC | np :: np[agr=3] : dooc <385, 1.0>
SHOES | pln :: np[type=count,agr=3,count=pl] : pl shoe <386, 1.0>
TIE | tv-up> :: ((s[type=?x]\np)/'up ')/np : \ x . \ y . \ z . simp prt (tie _ y) x z <387, 1.0>
DL-EL-FL | np :: np[agr=3] : dl-el-fl <388, 1.0>
DID | tv2> :: s[type=?x]\np : \ x . simp pst do x <389, 1.0>
FL | np :: np[agr=3] : fl <390, 1.0>
SANDWICH | np :: np[type=count,agr=3,count=sg] : sandwich <391, 1.0>
ALMOST | x :: @x/@x : \ x . almost x <392, 1.0>
DONE | adj :: predp : done <393, 1.0>
MUST | mod :: (s\np)/(s\np) : \ x . \ y . must x y <394, 1.0>
BLOW | tv-on> :: ((s[type=?x]\np)/np)/'on ' : \ x . \ y . \ z . simp prt (blow _ x) y z <395, 1.0>
SHALL | mod :: (s[type=q]/(s\np))/np : \ x . \ y . q shall y x <396, 1.0>
PEANUTBUTTER | un :: np[type=uncount,agr=3] : peanutbutter <397, 1.0>
SQUIRRELS | pln :: np[type=count,agr=3,count=pl] : pl squirrel <398, 1.0>
PADDLE | np :: np[type=count,agr=3,count=sg] : paddle <399, 1.0>
BITE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt bite x y <400, 1.0>
BIT | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst bite x y <401, 1.0>
HOLE | np :: np[type=count,agr=3,count=sg] : hole <402, 1.0>
SORRY | adj :: predp : \ x . sorry x <403, 1.0>
MELTED | iv2> :: s[type=?x]\np : \ x . simp pst melt x <404, 1.0>
CAME | iv2> :: s[type=?x]\np : \ x . simp pst come x <405, 1.0>
COMES | ivs> :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt come x <406, 1.0>
EVERYDAY | tp :: s\s : \ x . time x everyday <407, 1.0>
EAT | tv> :: s[type=imp]/np : \ x . simp prt eat x you <408, 1.0>
SPIT | tv-out> :: ((s[type=?x]\np)/'out ')/np : \ x . \ y . \ z . spit _ y x z <409, 1.0>
SPIT | tv-up> :: ((s[type=?x]\np)/np)/'up ' : \ x . \ y . \ z . spit _ y x z <410, 1.0>
ON | adv :: (s\np)\(s\np) : \ x . \ y . on x y <411, 1.0>
MOM | pn :: np[type=proper,agr=3] : mom <412, 1.0>
DO | aux :: s[type=imp]/(s\np) : \ x . simp prt do x you <413, 1.0>
TOUCH | tv> :: (s[type=?x]\np)/np : \ x . \ y . touch x y <414, 1.0>
CLEAN | tv> :: s[type=imp]/np : \ x . simp prt clean x you <415, 1.0>
NAPKINS | pln :: np[type=count,agr=3,count=pl] : pl napkin <416, 1.0>
FELL | iv-down> :: (s[type=?x]\np)/'down ' : \ x . \ y . simp pst (fall _ x) y <417, 1.0>
YESTERDAY | tp :: s\s : \ x . time x yesterday <418, 1.0>
SIT | iv-up> :: (s[type=?x]\np)/'up ' : \ x . \ y . simp prt (sit _ x) y <419, 1.0>
MANAGED | iv2> :: s[type=?x]\np : \ x . simp pst manage x <420, 1.0>
VERY | adv :: @x/@x : \ x . x very <421, 1.0>
WELL | sadv :: @x\@x : \ x . x well <422, 1.0>
WELL | sadv :: @x/@x : \ x . x well <423, 1.0>
TEETH | pln :: np[type=count,agr=3,count=pl] : pl tooth <424, 1.0>
BIG | adj :: np/np : \ x . big x <425, 1.0>
WEDNESDAY | tp :: np : wednesday <426, 1.0>
ARE | tv> :: s[type=q]/np : \ x . simp prt x <427, 1.0>
GET | tv-out> :: ((s[type=?x]\np)/'out ')/np : \ x . \ y . \ z . simp prt (get _ y) x z <428, 1.0>
GOING | iving-away> :: (s[type=ing]\np)/'away ' : \ x . \ y . cont (go _ x) y <429, 1.0>
THEN | tp :: s/s : \ x . time x then <430, 1.0>
NAP | np :: np[type=count,agr=3,count=sg] : nap <431, 1.0>
PLAYING | tving-with> :: ((s[type=ing]\np)/np)/'with ' : \ x . \ y . \ z . cont (play _ x) y z <432, 1.0>
BEAD | np :: np[type=count,agr=3,count=sg] : bead <433, 1.0>
BEADS | pln :: np[type=count,agr=3,count=pl] : pl bead <434, 1.0>
EASIER | adj :: predp : \ x . easier x <435, 1.0>
COOKBOOK | np :: np[type=count,agr=3,count=sg] : cookbook <436, 1.0>
GOT | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst get x y <437, 1.0>
GRANNY | pn :: np[type=proper,agr=3] : granny <438, 1.0>
CALL | tv> :: s[type=imp]/np : \ x . simp prt call x you <439, 1.0>
PEEK | iv> :: s[type=imp] : simp prt peek you <440, 1.0>
TELL | tv> :: (s[type=imp]/(s\np))/np : \ x . \ y . simp prt tell x y you <441, 1.0>
COME | iv-in :: (s[type=?x]\np)/'in ' : \ x . \ y . come _ x y <442, 1.0>
STANDING | iving-out> :: (s[type=ing]\np)/'out ' : \ x . \ y . cont (stand _ x) y <443, 1.0>
COLD | np :: np[type=count,agr=3,count=sg] : cold <444, 1.0>
RICK | pn :: np[type=proper,agr=3] : rick <445, 1.0>
GAS-MAN | np :: np[type=count,agr=3,count=sg] : gas-man <446, 1.0>
WANT | tv> :: s[type=?x]/np : \ x . simp prt want x you <447, 1.0>
DOLLS | pln :: np[type=count,agr=3,count=pl] : pl doll <448, 1.0>
OPEN | tv> :: (s[type=?x]\np)/np : \ x . \ y . open x y <449, 1.0>
BAG | np :: np[type=count,agr=3,count=sg] : bag <450, 1.0>
BLOW | iv> :: s[type=imp] : simp prt blow you <451, 1.0>
BRINGING | tving> :: s[type=ing]/np : \ x . cont bring x you <452, 1.0>
BOTH | x :: @x\@x : \ x . x both <453, 1.0>
BABY-DOLL | np :: np[type=count,agr=3,count=sg] : baby-doll <454, 1.0>
HAVE | tv> :: s[type=?x]/np : \ x . simp prt have x you <455, 1.0>
CLEAR | tv-out :: (s[type=imp]/'out ')/np : \ x . \ y . simp prt (clear _ y) x you <456, 1.0>
BOY | np :: np[type=count,agr=3,count=sg] : boy <457, 1.0>
STAY | iv> :: s[type=?x]\np : \ x . simp prt stay x <458, 1.0>
HELP | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt help x y <459, 1.0>
LOOK | tv-at :: (s[type=imp]/np)/'at ' : \ x . \ y . simp prt (look _ x) y you <460, 1.0>
UP | pre :: (s\s)/np : \ x . \ y . loc y (up x) <461, 1.0>
PEN | np :: np[type=count,agr=3,count=sg] : pen <462, 1.0>
SHOULD | mod :: (s[type=q]/(s\np))/np : \ x . \ y . q should y x <463, 1.0>
RING | np :: np[type=count,agr=3,count=sg] : ring <464, 1.0>
WATCH | np :: np[type=count,agr=3,count=sg] : watch <465, 1.0>
IDEA | np :: np[type=count,agr=3,count=sg] : idea <466, 1.0>
EARLY | adj :: predp : \ x . early x <467, 1.0>
STAMPS | pln :: np[type=count,agr=3,count=pl] : pl stamp <468, 1.0>
GIVING | tving> :: (s[type=ing]/np)/np : \ x . \ y . cont give x y you <469, 1.0>
SARAH | pn :: np[type=proper,agr=3] : sarah <470, 1.0>
PARTY | np :: np[type=count,agr=3,count=sg] : party <471, 1.0>
CAKE-PLATE | np :: np[type=count,agr=3,count=sg] : cake-plate <472, 1.0>
READ | tv> :: s[type=imp]/np : \ x . simp prt read x you <473, 1.0>
HIPPITYHOP | pn :: np[type=proper,agr=3] : hippityhop <474, 1.0>
TRAIN | np :: np[type=count,agr=3,count=sg] : train <475, 1.0>
TOGETHER | sadv :: @x\@x : \ x . x together <476, 1.0>
KNOW | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt know x y <477, 1.0>
WHICH | xqwadj :: np[type=qw,agr=?x,count=?y]/np[agr=?x,count=?y] : \ x . q x <478, 1.0>
ONES | pln :: np[type=count,agr=3,count=pl] : pl one <479, 1.0>
ENVELOPE | np :: np[type=count,agr=3,count=sg] : envelope <480, 1.0>
WALK | np :: np[type=count,agr=3,count=sg] : walk <481, 1.0>
SMILING | iving> :: s[type=ing]\np : \ x . cont smile x <482, 1.0>
DOILY | np :: np[type=count,agr=3,count=sg] : doily <483, 1.0>
WET | iv2 :: s[type=?x]\np : \ x . simp pst wet x <484, 1.0>
MAY | mod :: (s[type=q]/(s\np))/np : \ x . \ y . q may y x <485, 1.0>
SENT | dv2 :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . simp pst send x y z <486, 1.0>
CARD | np :: np[type=count,agr=3,count=sg] : card <487, 1.0>
NANNY | pn :: np[type=proper,agr=3] : nanny <488, 1.0>
THESE | np :: np[agr=3] : these <489, 1.0>
LIONS | pln :: np[type=count,agr=3,count=pl] : pl lion <490, 1.0>
SPOT | np :: np[type=count,agr=3,count=sg] : spot <491, 1.0>
FELL | iv2> :: s[type=?x]\np : \ x . simp pst fall x <492, 1.0>
TUNNEL | np :: np[type=count,agr=3,count=sg] : tunnel <493, 1.0>
LITTLE | adj :: np/np : \ x . little x <494, 1.0>
FRIEND | np :: np[type=count,agr=3,count=sg] : friend <495, 1.0>
FRIENDS | pln :: np[type=count,agr=3,count=pl] : pl friend <496, 1.0>
BUBBLES | pln :: np[type=count,agr=3,count=pl] : pl bubble <497, 1.0>
YET | tp :: s\s : \ x . time x yet <498, 1.0>
GOING | iving-into> :: ((s[type=ing]\np)/np)/'into ' : \ x . \ y . \ z . cont (go _ x) y z <499, 1.0>
BANK | np :: np[type=count,agr=3,count=sg] : bank <500, 1.0>
NOW | tp :: s/s : \ x . time x now <501, 1.0>
CHOCOLATE | un :: np[type=uncount,agr=3] : chocolate <502, 1.0>
CERTAINLY | adv :: @x/@x : \ x . certainly x <503, 1.0>
EAT | tv-up> :: ((s[type=?x]\np)/'up ')/np : \ x . \ y . \ z . simp prt (eat _ y) x z <504, 1.0>
FIRST | conj :: s\s : \ x . first x <505, 1.0>
CRACKING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont crack x y <506, 1.0>
PEAR | np :: np[type=count,agr=3,count=sg] : pear <507, 1.0>
MINE | np :: np[agr=3] : mine <508, 1.0>
BIRTHDAY-SANDWICH | np :: np[type=count,agr=3,count=sg] : birthday-sandwich <509, 1.0>
BIRTHDAY-CAKE | np :: np[type=count,agr=3,count=sg] : birthday-cake <510, 1.0>
ICING | np :: np[type=count,agr=3,count=sg] : icing <511, 1.0>
LICK | tv-off> :: (s[type=imp]/'off ')/np : \ x . \ y . simp prt (lick _ y) x you <512, 1.0>
HOLD | tv> :: s[type=imp]/np : \ x . simp prt hold x you <513, 1.0>
HANDS | pln :: np[type=count,agr=3,count=pl] : pl hand <514, 1.0>
STILL | tp :: s\s : \ x . time x still <515, 1.0>
CLOSET | np :: np[type=count,agr=3,count=sg] : closet <516, 1.0>
POUR | tv-in :: (s[type=imp]/'in ')/np : \ x . \ y . simp prt (pour _ y) x you <517, 1.0>
CREAM | un :: np[type=uncount,agr=3] : cream <518, 1.0>
LEAVE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt leave x y <519, 1.0>
LEAVE | tv> :: (s[type=?x]\np)/np : \ x . \ y . leave x y <520, 1.0>
LOVELY | adj :: np/np : \ x . lovely x <521, 1.0>
WHOSE | xqwadj :: np[type=qw,agr=?x,count=?y]/np[agr=?x,count=?y] : \ x . x of (q person) <522, 1.0>
SWELL | adj :: np/np : \ x . swell x <523, 1.0>
SNAP | tv> :: (s[type=?x]\np)/np : \ x . \ y . snap x y <524, 1.0>
LOSE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt lose x y <525, 1.0>
SNAP | tv> :: s[type=imp]/np : \ x . simp prt snap x you <526, 1.0>
DO | tv> :: s[type=?x]/np : \ x . simp prt do x you <527, 1.0>
SEES | ivs> :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt see x <528, 1.0>
EAR | np :: np[type=count,agr=3,count=sg] : ear <529, 1.0>
AL | np :: np[type=count,agr=3,count=sg] : al <530, 1.0>
PULL | tv-down> :: (s[type=imp]/'down ')/np : \ x . \ y . simp prt (pull _ y) x you <531, 1.0>
PULL | tv-out> :: ((s[type=?x]\np)/'out ')/np : \ x . \ y . \ z . simp prt (pull _ y) x z <532, 1.0>
PULL | tv-out> :: (s[type=?x]/'out ')/np : \ x . \ y . simp prt (pull _ y) x you <533, 1.0>
PULLED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst pull x y <534, 1.0>
HAIR | un :: np[type=uncount,agr=3] : hair <535, 1.0>
DRUM | np :: np[type=count,agr=3,count=sg] : drum <536, 1.0>
STICK | np :: np[type=count,agr=3,count=sg] : stick <537, 1.0>
KISS | tv> :: s[type=imp]/np : \ x . simp prt kiss x you <538, 1.0>
QUITE | x :: @x/@x : \ x . quite x <539, 1.0>
SIDEWAYS | sp :: s\s : \ x . loc x sideways <540, 1.0>
NO | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . no x <541, 1.0>
FUN | np :: np[type=count,agr=3,count=sg] : fun <542, 1.0>
THREW | tv-away> :: ((s[type=?x]\np)/'away ')/np : \ x . \ y . \ z . simp pst (throw _ y) x z <543, 1.0>
TRASH | un :: np[type=uncount,agr=3] : trash <544, 1.0>
PEEPEE | iv> :: s[type=imp] : peepee you <545, 1.0>
BELONG | tv-on> :: ((s[type=?x]\np)/np)/'on ' : \ x . \ y . \ z . simp prt (belong _ x) y z <546, 1.0>
BOARD | np :: np[type=count,agr=3,count=sg] : board <547, 1.0>
MAKE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt make x y <548, 1.0>
WORDS | pln :: np[type=count,agr=3,count=pl] : pl word <549, 1.0>
WERE | aux :: (s\np)/(s\np) : \ x . \ y . pst x y <550, 1.0>
WATCHING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont watch x y <551, 1.0>
MEN | pln :: np[type=count,agr=3,count=pl] : pl man <552, 1.0>
BUILDING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont build x y <553, 1.0>
BUILDING | np :: np[type=count,agr=3,count=sg] : building <554, 1.0>
GOING | tving-into> :: ((s[type=ing]\np)/np)/'into ' : \ x . \ y . \ z . cont (go _ x) y z <555, 1.0>
BOSTON | pn :: np[type=proper,agr=3] : boston <556, 1.0>
SATURDAY | tp :: np : saturday <557, 1.0>
ANY | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . any x <558, 1.0>
CHEW | tv-up> :: (s[type=imp]/'up ')/np : \ x . \ y . simp prt (chew _ y) x you <559, 1.0>
GOING | tving-round> :: (s[type=ing]\np)/'into ' : \ x . \ y . cont (go _ x) y <560, 1.0>
OKAY | adj :: predp : \ x . okay x <561, 1.0>
SQUEAKY | adj :: np/np : \ x . squeaky x <562, 1.0>
BOAT | np :: np[type=count,agr=3,count=sg] : boat <563, 1.0>
LIVES | ivs :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt live x <564, 1.0>
THOSE | np :: np[agr=3] : those <565, 1.0>
MITTENS | pln :: np[type=count,agr=3,count=pl] : pl mitten <566, 1.0>
FROSTY | pn :: np[type=proper,agr=3] : frosty <567, 1.0>
MELT | iv> :: s[type=?x]\np : \ x . simp prt melt x <568, 1.0>
FELL | iv-off> :: (s[type=?x]\np)/'off ' : \ x . \ y . simp pst (fall _ x) y <569, 1.0>
BIGGER | adj :: predp : \ x . bigger x <570, 1.0>
FLIPFLOP | adv :: (s\np)\(s\np) : \ x . \ y . x y flipflop <571, 1.0>
EMERSON | pn :: np[type=proper,agr=3] : emerson <572, 1.0>
COMING | iving> :: s[type=ing] : cont come you <573, 1.0>
BLUE | adj :: predp : \ x . blue x <574, 1.0>
BIT | np :: np[type=count,agr=3,count=sg] : bit <575, 1.0>
SNEEZER | pn :: np[type=proper,agr=3] : sneezer <576, 1.0>
READ | dv> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . simp prt read x y z <577, 1.0>
STORIES | pln :: np[type=count,agr=3,count=pl] : pl story <578, 1.0>
HAS | aux :: (s[type=q]/(s\np))/np : \ x . \ y . q prt prft y x <579, 1.0>
DRAW | iv> :: s[type=?x]\np : \ x . simp prt draw x <580, 1.0>
DRAW | tv> :: s[type=imp]/np : \ x . simp prt draw x you <581, 1.0>
ABCS | pln :: np[type=count,agr=3,count=pl] : pl abc <582, 1.0>
FLOWER | np :: np[type=count,agr=3,count=sg] : flower <583, 1.0>
CL | np :: np[agr=3] : cl <584, 1.0>
REALLY | adv :: @x/@x : \ x . really x <585, 1.0>
BL | np :: np[agr=3] : bl <586, 1.0>
SPELL | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt spell x y <587, 1.0>
SPELL | tv> :: s[type=imp]/np : \ x . simp prt spell x you <588, 1.0>
SIDE | np :: np[type=count,agr=3,count=sg] : side <589, 1.0>
DL | np :: np[agr=3] : dl <590, 1.0>
SPELLS | tvs> :: (s[type=?x]\np[agr=3,count=sg])/np : \ x . \ y . simp prt spell x y <591, 1.0>
WORD | np :: np[type=count,agr=3,count=sg] : word <592, 1.0>
SPELLING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont spell x y <593, 1.0>
JOANNE | pn :: np[type=proper,agr=3] : joanne <594, 1.0>
NOODLE-SOUP | un :: np[type=uncount,agr=3] : noodle-soup <595, 1.0>
JELLY | adj :: np/np : \ x . jelly x <596, 1.0>
BEANS | pln :: np[type=count,agr=3,count=pl] : pl bean <597, 1.0>
NOISE | np :: np[type=count,agr=3,count=sg] : noise <598, 1.0>
STARE | tv-at> :: ((s[type=?x]\np)/np)/'at ' : \ x . \ y . \ z . simp prt (stare _ x) y z <599, 1.0>
COAT | np :: np[type=count,agr=3,count=sg] : coat <600, 1.0>
MAKING | tving> :: s[type=ing]/np : \ x . cont make x you <601, 1.0>
ARE | tv> :: (s[type=?x]\np)/predp : \ x . \ y . simp prt x y <602, 1.0>
VITAMIN-TIME | un :: np[type=uncount,agr=3] : vitamin-time <603, 1.0>
VITAMIN | un :: np[type=uncount,agr=3] : vitamin <604, 1.0>
BURNED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst burn x y <605, 1.0>
EVERYBODY | np :: np[agr=3] : everybody <606, 1.0>
EATING | iving> :: s[type=ing]\np : \ x . cont eat x <607, 1.0>
BUT | x :: ((s\np)\(s\np))/np : \ x . \ y . \ z . y (z but x) <608, 1.0>
PEAS | pln :: np[type=count,agr=3,count=pl] : pl pea <609, 1.0>
WORRY | tv-about> :: ((s[type=?x]\np)/np)/'about ' : \ x . \ y . \ z . worry _ x y z <610, 1.0>
OUTOF | pre :: (s\s)/np : \ x . \ y . loc y (outof x) <611, 1.0>
DO | tv> :: s[type=?x]\np : \ x . simp prt do x <612, 1.0>
CARE | tv> :: s[type=?x]\np : \ x . simp prt care x <613, 1.0>
NOBODY | np :: np[agr=3] : nobody <614, 1.0>
EMPTY | adj :: np/np : \ x . empty x <615, 1.0>
TUMMY | np :: np[type=count,agr=3,count=sg] : tummy <616, 1.0>
DROP | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt drop x y <617, 1.0>
DROP | tv> :: (s[type=?x]\np)/np : \ x . \ y . drop x y <618, 1.0>
LETTERS | pln :: np[type=count,agr=3,count=pl] : pl letter <619, 1.0>
PICK | tv-up> :: ((s[type=?x]\np)/'up ')/np : \ x . \ y . simp prt (pick _ y) x z <620, 1.0>
STOP | iv> :: s[type=imp] : simp prt stop you <621, 1.0>
STANDING | iving> :: s[type=ing]\np : \ x . cont stand x <622, 1.0>
GOING | iving-along> :: (s[type=ing]\np)/'along ' : \ x . \ y . cont (go _ x) y <623, 1.0>
KISS | np :: np[type=count,agr=3,count=sg] : kiss <624, 1.0>
LEAVE | tv> :: s[type=imp]/np : \ x . simp prt leave x you <625, 1.0>
THREE-O-CLOCK | tp :: np : three-o-clock <626, 1.0>
TABLET | np :: np[type=count,agr=3,count=sg] : tablet <627, 1.0>
DRAW | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt draw x y <628, 1.0>
LADY | np :: np[type=count,agr=3,count=sg] : lady <629, 1.0>
MUSTACHE | np :: np[type=count,agr=3,count=sg] : mustache <630, 1.0>
IS | tv> :: (s[type=?x]\np[agr=3,count=sg])/predp : \ x . \ y . simp prt x y <631, 1.0>
ABSOLUTELY | x :: @x/@x : \ x . absolutely x <632, 1.0>
JACKET | np :: np[type=count,agr=3,count=sg] : jacket <633, 1.0>
LONG | adj :: np/np : \ x . long x <634, 1.0>
FINE | adj :: predp : \ x . fine x <635, 1.0>
ABC | np :: np[type=count,agr=3,count=sg] : abc <636, 1.0>
IS | tv> :: (s[type=q]/np[agr=3,count=sg])/predp : \ x . \ y . simp prt y x <637, 1.0>
MAYBE | sadv :: @x/@x : \ x . x maybe <638, 1.0>
DID | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst do x y <639, 1.0>
YESTERDAY | tp :: np : yesterday <640, 1.0>
POP | pn :: np[type=proper,agr=3] : pop <641, 1.0>
BELONGS | tvs-on> :: (s[type=?x]\np[agr=3,count=sg])/'on ' : \ x . \ y . belong _ x y <642, 1.0>
NOTHING | np :: np[agr=3] : nothing <643, 1.0>
HAPPENED | tv2-to> :: ((s[type=?x]\np)/np)/'to ' : \ x . \ y . \ z . simp pst (happen _ x) y z <644, 1.0>
BROWN | adj :: np/np : \ x . brown x <645, 1.0>
BROWN | adj :: predp : \ x . brown x <646, 1.0>
RED | adj :: predp : \ x . red x <647, 1.0>
GLASS | np :: np[type=count,agr=3,count=sg] : glass <648, 1.0>
FIRST | conj :: s/s : \ x . first x <649, 1.0>
TIME | un :: np[type=uncount,agr=3] : time <650, 1.0>
TIMOTHY | pn :: np[type=proper,agr=3] : timothy <651, 1.0>
TIMMY | pn :: np[type=proper,agr=3] : timmy <652, 1.0>
JOSH | pn :: np[type=proper,agr=3] : josh <653, 1.0>
DIRTY | adj :: predp : \ x . dirty x <654, 1.0>
THROW | tv-away> :: ((s[type=?x]\np)/'away ')/np : \ x . \ y . \ z . throw _ y x z <655, 1.0>
WERE | aux :: (s[type=q]/(s\np))/np : \ x . \ y . q pst y x <656, 1.0>
PLAYING | tving-with> :: (s[type=ing]/np)/'with ' : \ x . \ y . cont (play _ x) y you <657, 1.0>
IS | tv> :: s[type=q]/np : \ x . simp prt x <658, 1.0>
PIES | pln :: np[type=count,agr=3,count=pl] : pl pie <659, 1.0>
AFTER | tp :: s/s : \ x . time x after <660, 1.0>
TAKE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt take x y <661, 1.0>
PLAYING | iving> :: s[type=ing] : cont play you <662, 1.0>
TAKING | tving-off> :: (s[type=ing]/'off ')/np : \ x . \ y . cont (take _ y) x you <663, 1.0>
? | pun :: s[type=q]\*s[type=ing] : \ x . q x <664, 1.0>
SAW | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst see x y <665, 1.0>
SQUIRREL | np :: np[type=count,agr=3,count=sg] : squirrel <666, 1.0>
LAUGHING | tving> :: s[type=ing]\np : \ x . cont laugh x <667, 1.0>
FUNNY | adj :: predp : \ x . funny x <668, 1.0>
RED | adj :: np/np : \ x . red x <669, 1.0>
INSTEAD-OF | conj :: @x/@x : \ x . instead-of x <670, 1.0>
AWAY | sp :: s\s : \ x . loc x away <671, 1.0>
GOING | tving-for> :: (s[type=ing]/np)/'for ' : \ x . \ y . cont (go _ x) y you <672, 1.0>
PATTING | tving> :: s[type=?x]/np : \ x . cont pat x you <674, 1.0>
CAKE | np :: np[type=count,agr=3,count=sg] : cake <675, 1.0>
HURT | iv> :: s[type=?x]\np : \ x . hurt x <676, 1.0>
HAPPINESS | un :: np[type=uncount,agr=3] : happiness <677, 1.0>
GETTING | tving-out> :: ((s[type=ing]\np)/'out ')/np : \ x . \ y . \ z . cont (get _ y) x z <678, 1.0>
SLIVER | np :: np[type=count,agr=3,count=sg] : sliver <679, 1.0>
FOLDING | tving> :: s[type=ing]/np : \ x . cont fold x you <680, 1.0>
TELL | tv> :: s[type=imp]/np : \ x . simp prt tell x you <681, 1.0>
TEARS | pln :: np[type=count,agr=3,count=pl] : pl tear <682, 1.0>
WIPE | tv> :: (s[type=?x]\np)/np : \ x . \ y . wipe x y <683, 1.0>
ROUND | adj :: np/np : \ x . round x <684, 1.0>
COOK | np :: np[type=count,agr=3,count=sg] : cook <685, 1.0>
TURNING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont turn x y <686, 1.0>
ITSELF | np :: np[agr=3] : itself <687, 1.0>
MADE | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst make x y <688, 1.0>
MISTAKE | np :: np[type=count,agr=3,count=sg] : mistake <689, 1.0>
CLOCK | np :: np[type=count,agr=3,count=sg] : clock <690, 1.0>
LOCK | np :: np[type=count,agr=3,count=sg] : lock <691, 1.0>
KEY | np :: np[type=count,agr=3,count=sg] : key <692, 1.0>
COLOR | iv> :: s[type=?x]\np : \ x . simp prt color x <693, 1.0>
COW | np :: np[type=count,agr=3,count=sg] : cow <694, 1.0>
THING | np :: np[type=count,agr=3,count=sg] : thing <695, 1.0>
TURTLE | np :: np[type=count,agr=3,count=sg] : turtle <696, 1.0>
GRAHAMCRACKER | np :: np[type=count,agr=3,count=sg] : grahamcracker <697, 1.0>
EATEN | tv3> :: (s[type=?x]\np)/np : \ x . \ y . prft eat x y <698, 1.0>
PROPERLY | sadv :: (s\np)\(s\np) : \ x . \ y . x y properly <699, 1.0>
LEAVES | pln :: np[type=count,agr=3,count=pl] : pl leaf <700, 1.0>
CAN | mod :: s[type=?x]/np : \ x . can x <701, 1.0>
GROWING | tving> :: s[type=ing]\np : \ x . cont grow x <702, 1.0>
COLOR | tv-in> :: ((s[type=?x]\np)/'in ')/np : \ x . \ y . \ z . simp prt (stare _ y) x z <703, 1.0>
DOOR | np :: np[type=count,agr=3,count=sg] : door <704, 1.0>
COULD | mod :: (s\np)/(s\np) : \ x . \ y . could x y <705, 1.0>
DOORWAY | np :: np[type=count,agr=3,count=sg] : doorway <706, 1.0>
HOUSE | np :: np[type=count,agr=3,count=sg] : house <707, 1.0>
WINDOW | np :: np[type=count,agr=3,count=sg] : window <708, 1.0>
PROBABLY | sadv :: @x/@x : \ x . x probably <709, 1.0>
TRUE | adj :: predp : \ x . true x <710, 1.0>
SUITCASE | np :: np[type=count,agr=3,count=sg] : suitcase <711, 1.0>
HOUSE-BUILDING | np :: np[type=count,agr=3,count=sg] : house-building <712, 1.0>
SAY | tv> :: s[type=imp]/np : \ x . simp prt say x you <713, 1.0>
TORE | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst tear x y <714, 1.0>
JOHN | pn :: np[type=proper,agr=3] : john <715, 1.0>
MURRAY | pn :: np[type=proper,agr=3] : murray <716, 1.0>
NOEL | pn :: np[type=proper,agr=3] : noel <717, 1.0>
TAKE | tv> :: s[type=imp]/np : \ x . simp prt take x you <718, 1.0>
BITE | np :: np[type=count,agr=3,count=sg] : bite <719, 1.0>
CHIN | np :: np[type=count,agr=3,count=sg] : chin <720, 1.0>
BLOW | iv-out> :: s[type=imp]/'out ' : \ x . simp prt (blow _ x) you <721, 1.0>
BLOW | iv-out> :: (s[type=ing]\np)/'out ' : \ x . \ y . simp prt (blow _ x) y <722, 1.0>
IS | tv> :: (s[type=q]/predp)/np : \ x . \ y . simp prt y x <723, 1.0>
WRONG | adj :: predp : \ x . wrong x <724, 1.0>
EYE | np :: np[type=count,agr=3,count=sg] : eye <725, 1.0>
TRYING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont try x y <726, 1.0>
KNOT | np :: np[type=count,agr=3,count=sg] : knot <727, 1.0>
HARD | sadv :: (s\np)\(s\np) : \ x . \ y . x y hard <728, 1.0>
LICK | tv> :: (s[type=?x]\np)/np : \ x . \ y . lick x y <729, 1.0>
TRYING | tv> :: s[type=ing]/(s\np) : \ x . cont try (x you) you <730, 1.0>
LEAVE | tv-on> :: (s[type=imp]/'on ')/np : \ x . \ y . simp prt (leave _ y) x you <731, 1.0>
LEAVE | tv-on> :: ((s[type=?x]\np)/'on ')/np : \ x . \ y . leave _ y x you <732, 1.0>
RUBBER-BANDS | pln :: np[type=count,agr=3,count=pl] : pl rubber-band <733, 1.0>
TAKING | tv> :: s[type=ing]/np : \ x . cont take x you <734, 1.0>
YEAR | t :: np[type=time,agr=3,count=sg] : year <735, 1.0>
CLIMB | tv-in> :: ((s[type=?x]\np)/np)/'in ' : \ x . \ y . \ z . simp prt (climb _ x) y z <736, 1.0>
TRY | iv> :: s[type=imp] : simp prt try you <737, 1.0>
TRACK | np :: np[type=count,agr=3,count=sg] : track <738, 1.0>
WORK | iv> :: s[type=imp] : simp prt work you <739, 1.0>
FAST | sadv :: (s\np)\(s\np) : \ x . \ y . x y fast <740, 1.0>
FALLING | iv-off> :: (s[type=ing]\np)/'off ' : \ x . \ y . cont (fall _ x) y <741, 1.0>
RAILROAD | np :: np[type=count,agr=3,count=sg] : railroad <742, 1.0>
TRIPPED | iv2 :: s[type=?x]\np : \ x . simp pst trip x <743, 1.0>
SANDBOX | np :: np[type=count,agr=3,count=sg] : sandbox <744, 1.0>
COUNT | tv> :: s[type=imp]/np : \ x . simp prt count x you <745, 1.0>
STAYING | iving> :: s[type=ing]\np : \ x . cont stay x <746, 1.0>
OHIO | np :: np[agr=3] : ohio <747, 1.0>
BROKE | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst break x y <748, 1.0>
BEND | iv> :: s[type=?x]\np : \ x . bend x <749, 1.0>
BREAK | tv> :: (s[type=?x]\np)/np : \ x . \ y . break x y <750, 1.0>
EXACTLY | adv :: @x/@x : \ x . exactly x <751, 1.0>
LOOK | tv-like> :: ((s[type=?x]\np)/np)/'like ' : \ x . \ y . \ z . simp prt (look _ x) y z <752, 1.0>
CUPS | pln :: np[type=count,agr=3,count=pl] : pl cup <753, 1.0>
MOVES | tvs> :: (s[type=?x]\np[agr=3,count=sg])/np : \ x . \ y . simp prt move x y <754, 1.0>
BLUE | adj :: np/np : \ x . blue x <755, 1.0>
STOPS | ivs> :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt stop x <756, 1.0>
TURN | tv-around> :: (s[type=imp]/'around ')/np : \ x . \ y . simp prt (turn _ y) x you <757, 1.0>
WAY | np :: np[type=count,agr=3,count=sg] : way <758, 1.0>
MONDAY | tp :: np : monday <759, 1.0>
PIZZERONIC | np :: np[type=count,agr=3,count=sg] : pizzeronic <760, 1.0>
SHARE | tv> :: (s[type=?x]\np)/np : \ x . \ y . share x y <761, 1.0>
POPS | pn :: np[type=proper,agr=3] : pops <762, 1.0>
PINK | adj :: np/np : \ x . pink x <763, 1.0>
NEEDS | tvs> :: (s[type=?x]\np[agr=3,count=sg])/np : \ x . \ y . simp prt need x y <764, 1.0>
PIZZC | tv> :: s[type=imp]/np : \ x . simp prt pizzc x you <765, 1.0>
YOURSELF | np :: np[agr=3] : yourself <766, 1.0>
BLANKIE | np :: np[type=count,agr=3,count=sg] : blankie <767, 1.0>
BLANKET | np :: np[type=count,agr=3,count=sg] : blanket <768, 1.0>
SHARING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont share x y <769, 1.0>
EMPTY | adj :: predp : \ x . empty x <770, 1.0>
RAISINS | pln :: np[type=count,agr=3,count=pl] : pl raisin <771, 1.0>
POURING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont pour x y <772, 1.0>
CLEAN | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt clean x y <773, 1.0>
CATCH | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt catch x y <774, 1.0>
FINISHED | tv2 :: s[type=?x]\np : \ x . simp pst finish x <775, 1.0>
STILL | adv :: @x/@x : \ x . still x <776, 1.0>
FIZZING | tving> :: s[type=ing]\np : \ x . cont fizz x <777, 1.0>
BALLOON | np :: np[type=count,agr=3,count=sg] : balloon <778, 1.0>
FOLDING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont fold x y <779, 1.0>
KLEENEX | pn :: np[type=proper,agr=3] : kleenex <780, 1.0>
FOLD | tv> :: (s[type=?x]\np)/np : \ x . \ y . fold x y <781, 1.0>
WAS | aux :: (s[type=q]/(s\np))/np : \ x . \ y . q pst y x <782, 1.0>
DIRT | np :: np[type=count,agr=3,count=sg] : dirt <783, 1.0>
MUD-PIES | pln :: np[type=count,agr=3,count=pl] : pl mud-pie <784, 1.0>
THROUGH | pre :: (s\s)/np : \ x . \ y . loc y (through x) <785, 1.0>
GATE | np :: np[type=count,agr=3,count=sg] : gate <786, 1.0>
BE | tv> :: (s[type=?x]\np)/np : \ x . \ y . y be x <787, 1.0>
HELP | np :: np[type=count,agr=3,count=sg] : help <788, 1.0>
YELLOW | adj :: np/np : \ x . yellow x <789, 1.0>
PEDALPUSHERS | np :: np[type=count,agr=3,count=sg] : pedalpushers <790, 1.0>
SPILL | tv> :: (s[type=?x]\np)/np : \ x . \ y . spill x y <791, 1.0>
TOWELS | pln :: np[type=count,agr=3,count=pl] : pl towel <792, 1.0>
BATH-MAT | np :: np[type=count,agr=3,count=sg] : bath-mat <793, 1.0>
COUNTER | np :: np[type=count,agr=3,count=sg] : counter <794, 1.0>
BIG | adj :: predp : \ x . big x <795, 1.0>
DRAWER | np :: np[type=count,agr=3,count=sg] : drawer <796, 1.0>
GO | iv-up> :: (s[type=?x]\np)/'up ' : \ x . \ y . go _ x y <797, 1.0>
MAKE | tv> :: (s[type=?x]\np)/(s\np) : \ x . \ y . simp prt make x y <798, 1.0>
WHISTLE | iv> :: s[type=?x]\np : \ x . whistle x <799, 1.0>
PEEK | iv-in> :: s[type=imp]/'in ' : \ x . simp prt (peek _ x) you <800, 1.0>
PIPE | np :: np[type=count,agr=3,count=sg] : pipe <801, 1.0>
DOWN | pre :: (s\s)/np : \ x . \ y . loc y (down x) <802, 1.0>
NUMBERS | pln :: np[type=count,agr=3,count=pl] : pl number <803, 1.0>
GOING | iving-around> :: (s[type=ing]\np)/'around ' : \ x . \ y . cont (go _ x) y <804, 1.0>
ZERO | np :: np[type=count,agr=3,count=sg] : zero <805, 1.0>
SIX | np :: np[type=count,agr=3,count=sg] : six <806, 1.0>
THAT | x :: (np\np)/(s\np) : \ x . \ y . y (x y) <807, 1.0>
WENT | iv2-by :: (s[type=?x]\np)/'by ' : \ x . \ y . simp pst (go _ x) y <808, 1.0>
DISH | un :: np[type=uncount,agr=3] : dish <809, 1.0>
WANT | tv> :: (s[type=?x]\np)/np : \ x . \ y . want x y <810, 1.0>
AM | aux :: (s[type=q]/(s\np))/np[agr=1,count=sg] : \ x . \ y . q prt y x <811, 1.0>
DO | tv> :: (s[type=?x]\np)/np : \ x . \ y . do x y <812, 1.0>
FRUIT | np :: np[type=count,agr=3,count=sg] : fruit <813, 1.0>
GREEN | adj :: np/np : \ x . green x <814, 1.0>
FOLD | tv-over> :: ((s[type=?x]\np)/'over ')/np : \ x . \ y . \ z . fold _ y x z <815, 1.0>
WEARS | tvs> :: (s[type=?x]\np[agr=3,count=sg])/np : \ x . \ y . simp prt wear x y <816, 1.0>
TOLD | dv2 :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . simp pst tell x y z <817, 1.0>
YES | np :: np[type=count,agr=3,count=sg] : yes <818, 1.0>
COME | iv> :: s[type=?x]\np : \ x . come x <819, 1.0>
SEE | tv> :: (s[type=?x]\np)/np : \ x . \ y . see x y <820, 1.0>
LIKE | tv> :: (s[type=?x]\np)/np : \ x . \ y . like x y <821, 1.0>
WHITE | adj :: predp : \ x . white x <822, 1.0>
BUMPS | pln :: np[type=count,agr=3,count=pl] : pl bump <823, 1.0>
FIXED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst fix x y <824, 1.0>
WEAR | tv> :: (s[type=?x]\np)/np : \ x . \ y . wear x y <825, 1.0>
RUBBING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont rub x y <826, 1.0>
EYES | pln :: np[type=count,agr=3,count=pl] : pl eye <827, 1.0>
SAYING | tving> :: (s[type=ing]\np)/s : \ x . \ y . cont say x y <828, 1.0>
HEAR | tv> :: (s[type=?x]\np)/np : \ x . \ y . hear x y <829, 1.0>
DAY | np :: np[type=count,agr=3,count=sg] : day <830, 1.0>
SAID | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst say x y <831, 1.0>
PICTURES | pln :: np[type=count,agr=3,count=pl] : pl picture <832, 1.0>
HAVE | tv> :: (s[type=?x]\np)/np : \ x . \ y . have x y <833, 1.0>
RICE | un :: np[type=uncount,agr=3] : rice <834, 1.0>
SAY | tv> :: (s[type=?x]\np)/np : \ x . \ y . say x y <835, 1.0>
MORNING | np :: np[type=count,agr=3,count=sg] : morning <836, 1.0>
GO | iv-away> :: (s[type=?x]\np)/'away ' : \ x . \ y . go _ x y <837, 1.0>
RICE-SOUP | un :: np[type=uncount,agr=3] : rice-soup <838, 1.0>
SPILLED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst spill x y <839, 1.0>
BONE | np :: np[type=count,agr=3,count=sg] : bone <840, 1.0>
CHICKEN-BONE | np :: np[type=count,agr=3,count=sg] : chicken-bone <841, 1.0>
TOOK | tv2-out> :: ((s[type=?x]\np)/'out ')/np : \ x . \ y . \ z . simp pst (take _ y) x z <842, 1.0>
CHEW | tv-up> :: ((s[type=?x]\np)/'up ')/np : \ x . \ y . \ z . chew _ y x z <843, 1.0>
EAT | tv> :: (s[type=?x]\np)/np : \ x . \ y . eat x y <844, 1.0>
CRACKERS | pln :: np[type=count,agr=3,count=pl] : pl cracker <845, 1.0>
CHEW | tv-off> :: ((s[type=?x]\np)/'off ')/np : \ x . \ y . \ z . simp prt (chew _ y) x z <846, 1.0>
MEAT | un :: np[type=uncount,agr=3] : meat <847, 1.0>
BITE | tv-off> :: ((s[type=?x]\np)/'off ')/np : \ x . \ y . \ z . simp pst (bite _ y) x z <848, 1.0>
GETTING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont get x y <849, 1.0>
ALL | sadv :: @x\@x : \ x . x all <850, 1.0>
GOING | iving-down> :: (s[type=ing]\np)/'down ' : \ x . \ y . cont (go _ x) y <851, 1.0>
BE | tv> :: s[type=imp]/predp : \ x . simp prt be x you <852, 1.0>
BE | tv> :: s[type=imp]/np : \ x . simp prt be x you <853, 1.0>
CAREFUL | adj :: predp : \ x . careful x <854, 1.0>
ANYTHING | np :: np[agr=3] : anything <855, 1.0>
CARE | tv> :: s[type=?x]\np : \ x . care x <856, 1.0>
FINE | adv :: (s\np)\(s\np) : \ x . \ y . x y fine <857, 1.0>
SING | iv> :: s[type=?x]\np : \ x . sing x <858, 1.0>
IRONED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst iron x y <859, 1.0>
TRADE | tv> :: (s[type=?x]\np)/np : \ x . \ y . trade x y <860, 1.0>
TONIGHT | tp :: s/s : \ x . time x tonight <861, 1.0>
JAMMIES | pln :: np[type=count,agr=3,count=pl] : pl jammie <862, 1.0>
SOMERSAULT | np :: np[type=count,agr=3,count=sg] : somersault <863, 1.0>
TURN | tv> :: s[type=imp]/np : \ x . simp prt turn x you <864, 1.0>
WAS | tv2> :: (s[type=?x]\np[count=sg])/predp : \ x . \ y . simp pst x y <865, 1.0>
GOOD | adj :: predp : \ x . good x <866, 1.0>
CUT | tv> :: (s[type=?x]\np)/np : \ x . \ y . cut x y <867, 1.0>
AFTERWARDS | tp :: s\s : \ x . time x afterwards <868, 1.0>
SOME | np :: np[agr=3] : some <869, 1.0>
NANCY | pn :: np[type=proper,agr=3] : nancy <870, 1.0>
HAIRCUT | np :: np[type=count,agr=3,count=sg] : haircut <871, 1.0>
ONLY | adj :: np/np : \ x . only x <872, 1.0>
CANDLE | np :: np[type=count,agr=3,count=sg] : candle <873, 1.0>
BELONG | tv-in> :: ((s[type=?x]\np)/np)/'in ' : \ x . \ y . \ z . belong _ x y z <874, 1.0>
COUCHES | pln :: np[type=count,agr=3,count=pl] : pl couch <875, 1.0>
MAKE | tv> :: (s[type=?x]\np)/np : \ x . \ y . make x y <876, 1.0>
BITE | tv> :: s[type=imp]/np : \ x . simp prt bite x you <877, 1.0>
SINGING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont sing x y <878, 1.0>
SING | tv> :: s[type=imp]/np : \ x . simp prt sing x you <879, 1.0>
US | pro :: np : we <880, 1.0>
SING | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt sing x y <881, 1.0>
START | iv> :: s[type=?x]\np : \ x . simp prt start x <882, 1.0>
AWFULLY | adv :: @x/@x : \ x . awfully x <883, 1.0>
GLAD | adj :: predp : \ x . glad x <884, 1.0>
INSIDE | sp :: np[type=acc] : inside <885, 1.0>
CLIMB | iv-in> :: (s[type=?x]/np)/'in ' : \ x . \ y . simp prt (climb _ x) y you <886, 1.0>
HIGHCHAIR | np :: np[type=count,agr=3,count=sg] : highchair <887, 1.0>
WIPE | tv-off> :: ((s[type=?x]\np)/'off ')/np : \ x . \ y . \ z . wipe _ y x z <888, 1.0>
WIPE | tv-off> :: (s[type=imp]/'off ')/np : \ x . \ y . wipe _ y x you <889, 1.0>
SCRATCH | np :: np[type=count,agr=3,count=sg] : scratch <890, 1.0>
ELBOW | np :: np[type=count,agr=3,count=sg] : elbow <891, 1.0>
SEEDS | pln :: np[type=count,agr=3,count=pl] : pl seed <892, 1.0>
DID | tv2> :: (s[type=q]/np)/np : \ x . \ y . simp pst do x y <893, 1.0>
VEGETABLE-SOUP | un :: np[type=uncount,agr=3] : vegetable-soup <894, 1.0>
VACCINE | np :: np[type=count,agr=3,count=sg] : vaccine <895, 1.0>
TAFFY | pn :: np[type=proper,agr=3] : taffy <896, 1.0>
TOO | adv :: @x/@x : \ x . too x <897, 1.0>
TONGUE | np :: np[type=count,agr=3,count=sg] : tongue <898, 1.0>
GRUYERE-CHEESE | un :: np[type=uncount,agr=3] : gruyere-cheese <899, 1.0>
PEEL | tv> :: (s[type=?x]\np)/np : \ x . \ y . peel x y <900, 1.0>
SITTING | iving> :: s[type=ing] : cont sit you <901, 1.0>
PEPPER | un :: np[type=uncount,agr=3] : pepper <902, 1.0>
CLAY | un :: np[type=uncount,agr=3] : clay <903, 1.0>
DINOSAUR | np :: np[type=count,agr=3,count=sg] : dinosaur <904, 1.0>
TAKE | tv-up> :: ((s[type=?x]\np)/'up ')/np : \ x . \ y . \ z . take _ y x z <905, 1.0>
EITHER | sadv :: @x\@x : \ x . x either <906, 1.0>
FAN | np :: np[type=count,agr=3,count=sg] : fan <907, 1.0>
FANS | pln :: np[type=count,agr=3,count=pl] : pl fan <908, 1.0>
PARTICULARLY | adv :: (s\np)/(s\np) : \ x . \ y . x y particularly <909, 1.0>
THESE | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . these x <910, 1.0>
PEOPLE | pln :: np[type=count,agr=3,count=pl] : pl person <911, 1.0>
ALL | adj :: np/np : \ x . all x <912, 1.0>
GROWNUPS | pln :: np[type=count,agr=3,count=pl] : pl grownup <913, 1.0>
DAUGHTER | np :: np[type=count,agr=3,count=sg] : daughter <914, 1.0>
DAUGHTERS | pln :: np[type=count,agr=3,count=pl] : pl daughter <915, 1.0>
FAMILY | np :: np[type=count,agr=3,count=sg] : family <916, 1.0>
CALLED | tv3 :: (s[type=?x]\np)/np : \ x . \ y . called x y <917, 1.0>
OLD | adj :: np/np : \ x . old x <918, 1.0>
MEETING | iving> :: s[type=ing]\np : \ x . cont meet x <919, 1.0>
ONCE | sadv :: @x\@x : \ x . x once <920, 1.0>
TAKE | tv> :: (s[type=?x]\np)/np : \ x . \ y . take x y <921, 1.0>
NAP | un :: np[type=uncount,agr=3] : nap <922, 1.0>
TAKING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont take x y <923, 1.0>
TOMORROW | tp :: s\s : \ x . time x tomorrow <924, 1.0>
DRIPPING | iving> :: s[type=ing]\np : \ x . cont drip x <925, 1.0>
SPIGOT | np :: np[type=count,agr=3,count=sg] : spigot <926, 1.0>
FINISH | tv> :: s[type=imp]/np : \ x . simp prt finish x you <927, 1.0>
ONLY | adv :: (s\np)/(s\np) : \ x . \ y . x y only <928, 1.0>
HURRY | iv-up> :: s[type=imp]/'up ' : \ x . simp prt (hurry _ x) you <929, 1.0>
TOMORROW | tp :: s/s : \ x . time x tomorrow <930, 1.0>
COMING | iv-back> :: (s[type=?x]\np)/'back ' : \ x . \ y . cont (come _ x) y <931, 1.0>
ROUND | adj :: np/np : \ x . round x <932, 1.0>
SLEEVES | pln :: np[type=count,agr=3,count=pl] : pl sleeve <933, 1.0>
SHORT | adj :: predp : \ x . short x <934, 1.0>
WOKE | iv2-up> :: (s[type=?x]\np)/'up ' : \ x . \ y . simp pst (wake _ x) y <935, 1.0>
FROM | pre :: (s\s)/np : \ x . \ y . loc y (from x) <936, 1.0>
DIRTY | adj :: np/np : \ x . dirty x <937, 1.0>
FEET | np :: np[type=count,agr=3,count=sg] : feet <938, 1.0>
BANDAID | np :: np[type=count,agr=3,count=sg] : bandaid <939, 1.0>
LEAVE | iv-on> :: (s[type=?x]\np)/'on ' : \ x . \ y . leave _ x y <940, 1.0>
WANT | tv-off> :: ((s[type=?x]\np)/'off ')/np : \ x . \ y . \ z . simp prt (want _ y) x z <941, 1.0>
TAKE | tv-off> :: ((s[type=?x]\np)/'off ')/np : \ x . \ y . \ z . take _ y x z <942, 1.0>
SILLY | adj :: predp : \ x . silly x <943, 1.0>
FRONT | np :: np[type=count,agr=3,count=sg] : front <944, 1.0>
PILLOW | np :: np[type=count,agr=3,count=sg] : pillow <945, 1.0>
PAD | np :: np[type=count,agr=3,count=sg] : pad <946, 1.0>
BRAND-NEW | adj :: np/np : \ x . brand-new x <947, 1.0>
FORGET | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt forget x y <948, 1.0>
THOUGH | conj :: s\s : \ x . though x <949, 1.0>
BOOT | np :: np[type=count,agr=3,count=sg] : boot <951, 1.0>
WRITE | tv> :: (s[type=?x]\np)/np : \ x . \ y . write x y <952, 1.0>
WASH | tv-off :: (s[type=imp]/'off ')/np : \ x . \ y . simp prt (wash _ y) x you <953, 1.0>
MAKE | tv> :: s[type=imp]/np : \ x . simp prt make x you <954, 1.0>
HUNGRY | adj :: predp : \ x . hungry x <955, 1.0>
ARE | tv> :: (s[type=q]/predp)/np : \ x . \ y . simp prt y x <956, 1.0>
LYING | iving> :: s[type=ing]\np : \ x . cont lie x <957, 1.0>
MAAM | np :: np[type=count,agr=3,count=sg] : maam <958, 1.0>
EVECUMMINGS | pn :: np[type=proper,agr=3] : evecummings <959, 1.0>
TALKING | iving> :: s[type=ing]\np : \ x . cont talk x <960, 1.0>
NICE | adj :: predp : \ x . nice x <961, 1.0>
HER | pro :: np : she <962, 1.0>
LAYING | iving-down> :: (s[type=ing]\np)/'down ' : \ x . \ y . cont (lay _ x) y <963, 1.0>
RATTLES | pln :: np[type=count,agr=3,count=pl] : pl rattle <964, 1.0>
GETTING | diving> :: ((s[type=ing]\np)/np)/np : \ x . \ y . \ z . cont get x y z <965, 1.0>
KEEP | tv-off> :: ((s[type=?x]\np)/'off ')/np : \ x . \ y . \ z . keep _ y x z <966, 1.0>
SOMETIMES | tp :: s/s : \ x . time x sometimes <967, 1.0>
LISTENS | ivs> :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt listen x <968, 1.0>
SOMEBODY | np :: np[agr=3] : somebody <969, 1.0>
TELL | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt tell x y <970, 1.0>
CHOCOLATE-COOKIE | np :: np[type=count,agr=3,count=sg] : chocolate-cookie <971, 1.0>
GLORIA | pn :: np[type=proper,agr=3] : gloria <972, 1.0>
AT | pre :: (s\s)/np : \ x . \ y . loc y (at x) <973, 1.0>
PEEK | tv-at> :: (s[type=imp]/np)/'at ' : \ x . \ y . simp prt (peek _ x) y you <974, 1.0>
PEEK | tving-at> :: ((s[type=ing]\np)/np)/'at ' : \ x . \ y . cont (peek _ x) y you <975, 1.0>
PEEK | iv-around> :: s[type=imp]/'around ' : \ x . simp prt (peek _ x) you <976, 1.0>
DRINK | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt drink x y <977, 1.0>
NEED | tv> :: (s[type=?x]\np)/np : \ x . \ y . need x y <978, 1.0>
DRINK | tv> :: s[type=imp]/np : \ x . simp prt drink x you <979, 1.0>
AIRPLANE | np :: np[type=count,agr=3,count=sg] : airplane <980, 1.0>
WORK | iv> :: s[type=?x]\np : \ x . work x <981, 1.0>
PLANE | np :: np[type=count,agr=3,count=sg] : plane <982, 1.0>
CAMERA-SPOOL | np :: np[type=count,agr=3,count=sg] : camera-spool <983, 1.0>
JAR | np :: np[type=count,agr=3,count=sg] : jar <984, 1.0>
KIND | np :: np[type=count,agr=3,count=sg] : kind <985, 1.0>
THEIR | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . their x <986, 1.0>
HATS | pln :: np[type=count,agr=3,count=pl] : pl hat <987, 1.0>
STORY | np :: np[type=count,agr=3,count=sg] : story <988, 1.0>
TELL | dv-about :: ((s[type=imp]/np)/'about ')/np : \ x . \ y . \ z . simp prt (tell _ y) x z you <989, 1.0>
BURRO | np :: np[type=count,agr=3,count=sg] : burro <990, 1.0>
WORKING | iving> :: s[type=ing]\np : \ x . cont work x <991, 1.0>
GONE | iv3-away :: (s[type=?x]\np)/'away ' : \ x . \ y . prft (go _ x) y <992, 1.0>
NEWSPAPER | np :: np[type=count,agr=3,count=sg] : newspaper <993, 1.0>
HUMM | pn :: np[type=proper,agr=3] : humm <994, 1.0>
SONG | np :: np[type=count,agr=3,count=sg] : song <995, 1.0>
SING | tv> :: (s[type=?x]\np)/np : \ x . \ y . sing x y <996, 1.0>
EATING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont eat x y <997, 1.0>
EATING | tving> :: s[type=ing]/np : \ x . cont eat x you <998, 1.0>
PARSLEY | un :: np[type=uncount,agr=3] : parsley <999, 1.0>
LOOKING | tving-at> :: ((s[type=ing]\np)/'at ')/np : \ x . \ y . \ z . cont (look _ y) x z <1000, 1.0>
BACON | un :: np[type=uncount,agr=3] : bacon <1001, 1.0>
FELL | iv-down> :: s[type=?x]/'down ' : \ x . simp pst (fall _ x) you <1002, 1.0>
CHILDREN | pln :: np[type=count,agr=3,count=pl] : pl child <1003, 1.0>
FIND | tv> :: (s[type=?x]\np)/np : \ x . \ y . find x y <1004, 1.0>
TRYING | tv> :: (s[type=ing]\np)/(s\np) : \ x . \ y . cont try (x y) y <1005, 1.0>
ARE | tv> :: s[type=?x]\np : \ x . simp prt x <1006, 1.0>
THOSE | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . those x <1007, 1.0>
TELL | tv> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . tell x y z <1008, 1.0>
BALL | np :: np[type=count,agr=3,count=sg] : ball <1009, 1.0>
INDEED | adj :: predp : \ x . indeed x <1010, 1.0>
BABY-SISTER | np :: np[type=count,agr=3,count=sg] : baby-sister <1011, 1.0>
CRY | iv> :: s[type=?x]\np : \ x . cry x <1012, 1.0>
LAUGH | iv> :: s[type=?x]\np : \ x . laugh x <1013, 1.0>
DINGDONG-DELL | np :: np[type=count,agr=3,count=sg] : dingdong-dell <1014, 1.0>
CART | np :: np[type=count,agr=3,count=sg] : cart <1015, 1.0>
FLYING | iving> :: s[type=ing]\np : \ x . cont fly x <1016, 1.0>
COLIN | pn :: np[type=proper,agr=3] : colin <1017, 1.0>
FINGERS | pln :: np[type=count,agr=3,count=pl] : pl finger <1018, 1.0>
LOLLIPOP | np :: np[type=count,agr=3,count=sg] : lollipop <1019, 1.0>
LISTENING | tving-to> :: ((s[type=ing]\np)/np)/'to ' : \ x . \ y . \ z . cont (listen _ x) y z <1020, 1.0>
READING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont read x y <1021, 1.0>
READING | tving> :: s[type=ing]\np : \ x . cont read x <1022, 1.0>
DOGGIES | pln :: np[type=count,agr=3,count=pl] : pl doggy <1023, 1.0>
BUSES | pln :: np[type=count,agr=3,count=pl] : pl bus <1024, 1.0>
LOT | np :: np[type=count,agr=3,count=sg] : lot <1025, 1.0>
DOWN | sp :: s\s : \ x . loc x down <1026, 1.0>
WAIT | tv-for> :: ((s[type=?x]\np)/np)/'for ' : \ x . \ y . \ z . wait _ x y z <1027, 1.0>
GET | tv> :: (s[type=?x]\np)/np : \ x . \ y . get x y <1028, 1.0>
ALREADY | adv :: (s\np)/(s\np) : \ x . \ y . x y already <1029, 1.0>
ZWIEBACK | np :: np[type=count,agr=3,count=sg] : zwieback <1030, 1.0>
BUMPED | tv2-into> :: ((s[type=?x]\np)/np)/'into ' : \ x . \ y . \ z . simp pst (bump _ x) y z <1031, 1.0>
GOD | pn :: np[type=proper,agr=3] : god <1032, 1.0>
HELGA | pn :: np[type=proper,agr=3] : helga <1033, 1.0>
AFTER | pre :: (s\s)/np : \ x . \ y . y (after x) <1034, 1.0>
LOBSTER-SALAD | un :: np[type=uncount,agr=3] : lobster-salad <1035, 1.0>
TELL | tv> :: (s[type=?x]\np)/np : \ x . \ y . tell x y <1036, 1.0>
WASH | tv> :: (s[type=?x]\np)/np : \ x . \ y . wash x y <1037, 1.0>
WEDDING | np :: np[type=count,agr=3,count=sg] : wedding <1038, 1.0>
INSIDE | pre :: (s\s)/np : \ x . \ y . loc y (inside x) <1039, 1.0>
FORGET | tv> :: (s[type=?x]\np)/np : \ x . \ y . forget x y <1040, 1.0>
NURSERY-RHYME | np :: np[type=count,agr=3,count=sg] : nursery-rhyme <1041, 1.0>
TALKING | tving-to> :: ((s[type=ing]\np)/np)/'to ' : \ x . \ y . \ z . cont (talk _ x) y z <1042, 1.0>
PULLING | tving-down> :: ((s[type=ing]\np)/'down ')/np : \ x . \ y . \ z . cont (pull _ y) x z <1043, 1.0>
FALLING | iving> :: s[type=ing]\np : \ x . cont fall x <1044, 1.0>
FOOT | np :: np[type=count,agr=3,count=sg] : foot <1045, 1.0>
PICTURE | np :: np[type=count,agr=3,count=sg] : picture <1046, 1.0>
STATUE | np :: np[type=count,agr=3,count=sg] : statue <1047, 1.0>
PLAY | iv> :: s[type=imp] : simp prt play you <1049, 1.0>
PUSHING | iving> :: s[type=ing]/np : \ x . cont push x you <1050, 1.0>
PUSHING | tving-around> :: (s[type=ing]/'around ')/np : \ x . \ y . cont (push _ y) x you <1051, 1.0>
PUSH | tv-around> :: (s[type=imp]/'around ')/np : \ x . \ y . simp prt (push _ y) x you <1052, 1.0>
AND | x :: np/np : \ x . and x <1053, 1.0>
EVE-CUMMINGS | pn :: np[type=proper,agr=3] : eve-cummings <1054, 1.0>
RUNNING | iving> :: s[type=ing] : cont run you <1055, 1.0>
ROUND | adv :: (s\np)\(s\np) : \ x . \ y . x y round <1056, 1.0>
RAIN | un :: np[type=uncount,agr=3] : rain <1057, 1.0>
HURTS | ivs> :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt hurt x <1058, 1.0>
COLINGC | pn :: np[type=proper,agr=3] : colingc <1059, 1.0>
FINGERNAIL | np :: np[type=count,agr=3,count=sg] : fingernail <1060, 1.0>
HANGNAIL | np :: np[type=count,agr=3,count=sg] : hangnail <1061, 1.0>
CAUGHT | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst catch x y <1062, 1.0>
PROBABLY | adv :: (s\np)/(s\np) : \ x . \ y . x y probably <1063, 1.0>
READ | tv> :: (s[type=?x]\np)/np : \ x . \ y . read x y <1064, 1.0>
LIKE | tv> :: ((s[type=?x]\np)/(s\np))/np : \ x . \ p . \ y . simp prt like (p x) y <1065, 1.0>
FLOWERS | pln :: np[type=count,agr=3,count=pl] : pl flower <1066, 1.0>
DRAWING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont draw x y <1067, 1.0>
DRAW | tv> :: (s[type=?x]\np)/np : \ x . \ y . draw x y <1068, 1.0>
BOUNCY | adj :: np/np : \ x . bouncy x <1069, 1.0>
WELL | adv :: (s\np)\(s\np) : \ x . \ y . x y well <1070, 1.0>
BUS | np :: np[type=count,agr=3,count=sg] : bus <1071, 1.0>
SAILINGBOAT | np :: np[type=count,agr=3,count=sg] : sailingboat <1072, 1.0>
LOOKS | tv-like> :: ((s[type=?x]\np[agr=3,count=sg])/np)/'like ' : \ x . \ y . \ z . simp prt (look _ x) y z <1073, 1.0>
BE | iv> :: s[type=?x]\np : \ x . be x <1074, 1.0>
BOTH | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . both x <1075, 1.0>
FUNNELS | pln :: np[type=count,agr=3,count=pl] : pl funnel <1076, 1.0>
BUS-STOP | np :: np[type=count,agr=3,count=sg] : bus-stop <1077, 1.0>
PROBABLY | adv :: (s\np)\(s\np) : \ x . \ y . x y probably <1078, 1.0>
BAABAABLACKSHEEP | pn :: np[type=proper,agr=3] : baabaablacksheep <1079, 1.0>
MARKET | un :: np[type=uncount,agr=3] : market <1080, 1.0>
EXETER | pn :: np[type=proper,agr=3] : exeter <1081, 1.0>
GOT | tv3> :: (s[type=?x]\np)/np : \ x . \ y . prft get x y <1082, 1.0>
OR | conj :: s/s : \ x . or x <1083, 1.0>
WASHED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst wash x y <1084, 1.0>
RIGHT | sadv :: (s\np)\(s\np) : \ x . \ y . x y right <1085, 1.0>
MOMENT | np :: np[type=count,agr=3,count=sg] : moment <1086, 1.0>
MAYONNAISE | un :: np[type=uncount,agr=3] : mayonnaise <1087, 1.0>
TREE | np :: np[type=count,agr=3,count=sg] : tree <1088, 1.0>
END | np :: np[type=count,agr=3,count=sg] : end <1089, 1.0>
REFRIGERATOR | np :: np[type=count,agr=3,count=sg] : refrigerator <1090, 1.0>
TASTE | tv> :: s[type=imp]/np : \ x . simp prt taste x you <1091, 1.0>
CLEAN | tv-off> :: (s[type=imp]/'off ')/np : \ x . \ y . simp prt (clean _ y) x you <1092, 1.0>
WONDERFUL | adj :: predp : \ x . wonderful x <1093, 1.0>
FINISHED | adj :: predp : \ x . finished x <1094, 1.0>
COOKIE-PRESS | np :: np[type=count,agr=3,count=sg] : cookie-press <1095, 1.0>
COOKIES | pln :: np[type=count,agr=3,count=pl] : pl cookie <1096, 1.0>
CLIMB | iv-in> :: (s[type=imp]\np)/'in ' : \ x . \ y . simp prt (climb _ x) y you <1097, 1.0>
LIKE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt like x y <1098, 1.0>
TOMATOES | pln :: np[type=count,agr=3,count=pl] : pl tomato <1099, 1.0>
SO | conj :: s/s : \ x . so x <1100, 1.0>
LONG | adj :: predp : \ x . long x <1101, 1.0>
BENT | iv3-over> :: (s[type=?x]\np)/'over ' : \ x . prft (bend _ x) y <1102, 1.0>
FOUND | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst find x y <1103, 1.0>
GIVING | dving> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . cont give x y z <1104, 1.0>
NOODLES | pln :: np[type=count,agr=3,count=pl] : pl noodle <1105, 1.0>
MINUTE | np :: np[type=count,agr=3,count=sg] : minute <1106, 1.0>
WARM | adj :: predp : \ x . warm x <1107, 1.0>
MUG | np :: np[type=count,agr=3,count=sg] : mug <1108, 1.0>
CLOWN | np :: np[type=count,agr=3,count=sg] : clown <1109, 1.0>
WORKS | ivs :: s[type=?x]\np[agr=3,count=sg] : \ x . simp pst work x <1110, 1.0>
NOSE | np :: np[type=count,agr=3,count=sg] : nose <1111, 1.0>
WRITE | tv> :: s[type=imp]/np : \ x . simp prt write x you <1112, 1.0>
NOW | adv :: @x\@x : \ x . x now <1113, 1.0>
FINISH | iv> :: s[type=imp] : simp prt finish you <1114, 1.0>
QUICKLY | adv :: @x\@x : \ x . x quickly <1115, 1.0>
HIT | tv> :: (s[type=?x]\np)/np : \ x . \ y . hit x y <1116, 1.0>
WHICH | q :: (s[type=q]/(s[type=q]/np))/np : \ x . \ y . q which x y <1117, 1.0>
BEST | adv :: @x\@x : \ x . x best <1118, 1.0>
FIXED | tv2> :: s[type=?x]/np : \ x . simp pst fix x you <1119, 1.0>
OWN | adj :: np/np : \ x . own x <1120, 1.0>
GARAGE | np :: np[type=count,agr=3,count=sg] : garage <1121, 1.0>
WENT | iv2-to :: (s[type=imp]/np)/'to ' : \ x . \ y . simp pst (go _ x) y you <1122, 1.0>
WENT | iv2-to :: ((s[type=?x]\np)/np)/'to ' : \ x . \ y . \ z . simp pst (go _ x) y z <1123, 1.0>
SUBWAY | np :: np[type=count,agr=3,count=sg] : subway <1124, 1.0>
SUBWAYS | pln :: np[type=count,agr=3,count=pl] : pl subway <1125, 1.0>
AM | tv> :: (s[type=q]/predp)/np[agr=1,count=sg] : \ x . \ y . q prt y x <1126, 1.0>
LOOKING | iving-around> :: (s[type=ing]\np)/'around ' : \ x . \ y . cont (look _ x) y <1127, 1.0>
TOMATO-SANDWICH | np :: np[type=count,agr=3,count=sg] : tomato-sandwich <1128, 1.0>
PEEPING | iving-out> :: (s[type=ing]\np)/'out ' : \ x . \ y . cont (peep _ x) y <1129, 1.0>
PEEKING | iving-out> :: (s[type=ing]\np)/'out ' : \ x . \ y . cont (peek _ x) y <1130, 1.0>
NOISES | pln :: np[type=count,agr=3,count=pl] : pl noise <1131, 1.0>
HURT | iv> :: s[type=?x]\np : \ x . simp pst hurt x <1132, 1.0>
WHOSE | q :: s[type=q]/(s/np) : \ x . q whose x <1133, 1.0>
PULLING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont pull x y <1134, 1.0>
SAID | x :: (s\np)/s : \ x . \ y . simp pst say x y <1135, 1.0>
SHORT | adj :: np/np : \ x . short x <1136, 1.0>
HAIR | un :: np[type=uncount,agr=3] : hair <1137, 1.0>
PART | np :: np[type=count,agr=3,count=sg] : part <1138, 1.0>
WRITE | dv> :: ((s[type=?x]\np)/np)/np : \ x . \ y . write x y <1139, 1.0>
WRITE | dv> :: (s[type=imp]/np)/np : \ x . \ y . simp prt write x z you <1140, 1.0>
EARS | pln :: np[type=count,agr=3,count=pl] : pl ear <1141, 1.0>
OH | conj :: s/s : \ x . oh x <1142, 1.0>
LOOK | tv-through> :: ((s[type=?x]\np)/np)/'through ' : \ x . \ y . \ z . simp prt (look _ x) y z <1143, 1.0>
(QUOTE D) | aux :: (s[type=q]/(s\np))/np : \ x . \ y . y x <1144, 1.0>
TO | pre :: (s\s)/np : \ x . \ y . y (to x) <1145, 1.0>
RUKO | pn :: np[type=proper,agr=3] : ruko <1146, 1.0>
FINE | adv :: @x\@x : \ x . x fine <1148, 1.0>
AFTER-ALL | conj :: s/s : \ x . after-all x <1149, 1.0>
THROW | tv> :: (s[type=?x]\np)/np : \ x . \ y . throw x y <1151, 1.0>
PEARS | pln :: np[type=count,agr=3,count=pl] : pl pear <1152, 1.0>
PINEAPPLE-DESSERT | np :: np[type=count,agr=3,count=sg] : pineapple-dessert <1153, 1.0>
CEREAL | un :: np[type=uncount,agr=3] : cereal <1154, 1.0>
WHILE | x :: s/s : \ x . time while x <1155, 1.0>
FIZZIE | pn :: np[type=proper,agr=3] : fizzie <1156, 1.0>
ICED | adj :: np/np : \ x . iced x <1157, 1.0>
TEA | un :: np[type=uncount,agr=3] : tea <1158, 1.0>
RABBIT | np :: np[type=count,agr=3,count=sg] : rabbit <1159, 1.0>
COLORADO | np :: np[agr=3] : colorado <1160, 1.0>
COMING | iv-back> :: (s[type=ing]\np)/'back ' : \ x . \ y . cont (come _ x) y <1161, 1.0>
CAMBRIDGE | np :: np[agr=3] : cambridge <1162, 1.0>
NEWBRUNSWICK | pn :: np[type=proper,agr=3] : newbrunswick <1163, 1.0>
ENGLAND | np :: np[agr=3] : england <1164, 1.0>
BENNY | pn :: np[type=proper,agr=3] : benny <1165, 1.0>
BANDAID | np :: np[type=count,agr=3,count=sg] : bandaid <1166, 1.0>
BEACH | np :: np[type=count,agr=3,count=sg] : beach <1167, 1.0>
EGGNOG | np :: np[type=count,agr=3,count=sg] : eggnog <1168, 1.0>
MEDICINE | un :: np[type=uncount,agr=3] : medicine <1169, 1.0>
WAS | tv2> :: (s[type=q]/predp)/np[count=sg] : \ x . \ y . simp pst y x <1170, 1.0>
SICK | adj :: predp : \ x . sick x <1171, 1.0>
MOVING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont move x y <1172, 1.0>
RUG | np :: np[type=count,agr=3,count=sg] : rug <1173, 1.0>
HEAVY | adj :: predp : \ x . heavy x <1174, 1.0>
TODAY | tp :: np : today <1175, 1.0>
PEANUTBUTTER-SANDWICH | np :: np[type=count,agr=3,count=sg] : peanutbutter-sandwich <1176, 1.0>
SHOOT | tv> :: s[type=imp]/np : \ x . simp prt shoot x you <1177, 1.0>
SHOOTING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont shoot x y <1178, 1.0>
THUMB | np :: np[type=count,agr=3,count=sg] : thumb <1179, 1.0>
BANG | tv> :: s[type=imp]/np : \ x . simp prt bang x you <1180, 1.0>
DESSERT | un :: np[type=uncount,agr=3] : dessert <1181, 1.0>
LEMON | np :: np[type=count,agr=3,count=sg] : lemon <1182, 1.0>
RUN | iv> :: s[type=imp] : simp prt run you <1183, 1.0>
DAVID | pn :: np[type=proper,agr=3] : david <1184, 1.0>
WISE | adj :: np/np : \ x . wise x <1185, 1.0>
STAY | iv-up> :: (s[type=?x]\np)/'up ' : \ x . \ y . simp prt (stay _ x) y <1186, 1.0>
ACCIDENT | np :: np[type=count,agr=3,count=sg] : accident <1187, 1.0>
OPEN | tv> :: s[type=imp]/np : \ x . simp prt open x you <1188, 1.0>
CANDY | np :: np[type=count,agr=3,count=sg] : candy <1189, 1.0>
WASTEBASKET | np :: np[type=count,agr=3,count=sg] : wastebasket <1190, 1.0>
LOOK | tv-at :: ((s[type=?x]\np)/np)/'at ' : \ x . \ y . \ z . simp prt (look _ x) y z <1191, 1.0>
LOOK | tv-at :: ((s[type=?x]\np)/np)/'at ' : \ x . \ y . \ z . look _ x y z <1192, 1.0>
SIT | iv-up> :: s[type=imp]/'up ' : \ x . simp prt (sit _ x) you <1193, 1.0>
STRAIGHT | adv :: @x\@x : \ x . x straight <1194, 1.0>
PAINT | iv> :: s[type=?x]\np : \ x . paint x <1195, 1.0>
PAINT | tv> :: (s[type=?x]\np)/np : \ x . \ y . paint x y <1196, 1.0>
NEXT | adj :: np/np : \ x . next x <1197, 1.0>
DO | tv> :: s[type=imp]/np : \ x . simp prt do x you <1198, 1.0>
BELONGS | tvs-in> :: ((s[type=?x]\np[agr=3,count=sg])/np)/'in ' : \ x . \ y . \ z . simp prt (belong _ x) y z <1199, 1.0>
BLOUSE | np :: np[type=count,agr=3,count=sg] : blouse <1200, 1.0>
GOOSE | np :: np[type=count,agr=3,count=sg] : goose <1201, 1.0>
SNAP | un :: np[type=uncount,agr=3] : snap <1202, 1.0>
BUTTONS | pln :: np[type=count,agr=3,count=pl] : pl button <1203, 1.0>
BACK | np :: np[type=count,agr=3,count=sg] : back <1204, 1.0>
FIRE | np :: np[type=count,agr=3,count=sg] : fire <1205, 1.0>
MOVE | tv> :: (s[type=?x]\np)/np : \ x . \ y . move x y <1206, 1.0>
HAND | np :: np[type=count,agr=3,count=sg] : hand <1207, 1.0>
LEFT | adj :: np/np : \ x . left x <1208, 1.0>
FORK | np :: np[type=count,agr=3,count=sg] : fork <1209, 1.0>
PENNY | np :: np[type=count,agr=3,count=sg] : penny <1210, 1.0>
POCKETS | pln :: np[type=count,agr=3,count=pl] : pl pocket <1211, 1.0>
COME | iv> :: s[type=?x]\np : \ x . simp prt come x <1212, 1.0>
TOES | pln :: np[type=count,agr=3,count=pl] : pl toe <1213, 1.0>
BETTER | adv :: (s\np)/(s\np) : \ x . \ y . x y better <1214, 1.0>
TAKE | tv-along> :: ((s[type=?x]\np)/'along ')/np : \ x . \ y . \ z . simp prt (take _ y) x z <1215, 1.0>
DOWNSTAIRS | sp :: np[type=acc] : downstairs <1216, 1.0>
STRAIGHT | adj :: predp : \ x . straight x <1217, 1.0>
UP | adv :: @x/@x : \ x . up x <1218, 1.0>
GET | tv-out> :: ((s[type=?x]\np)/'out ')/np : \ x . \ y . \ z . get _ y x z <1219, 1.0>
GOT | tv2-out> :: ((s[type=?x]\np)/'out ')/np : \ x . \ y . \ z . simp pst (get _ y) x z <1220, 1.0>
ENOUGH | adj :: predp : \ x . enough x <1221, 1.0>
CRY | iv> :: s[type=?x]\np : \ x . simp prt cry x <1222, 1.0>
SILLY | adj :: np/np : \ x . silly x <1223, 1.0>
GREAT | adj :: predp : \ x . great x <1224, 1.0>
BETTER | adv :: (s\np)\(s\np) : \ x . \ y . x y better <1225, 1.0>
DRAW | iv> :: s[type=?x]\np : \ x . simp prt draw x <1226, 1.0>
TRY | iv> :: s[type=?x]\np : \ x . simp prt try x <1228, 1.0>
HOLES | pln :: np[type=count,agr=3,count=pl] : pl hole <1229, 1.0>
FIX | tv> :: (s[type=?x]\np)/np : \ x . \ y . fix x y <1230, 1.0>
REMEMBER | tv> :: s[type=imp]/np : \ x . simp prt remember x you <1231, 1.0>
WALK | iv> :: s[type=?x]\np : \ x . walk x <1232, 1.0>
TALKING | tving-to> :: ((s[type=ing]\np)/np)/'to ' : \ x . \ y . \ z . cont (talk _ x) y z <1233, 1.0>
SUPPER | un :: np[type=uncount,agr=3] : supper <1234, 1.0>
AWAKE | adj :: predp : \ x . awake x <1235, 1.0>
OUR | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . our x <1236, 1.0>
GRANDPA | pn :: np[type=proper,agr=3] : grandpa <1237, 1.0>
PETER | pn :: np[type=proper,agr=3] : peter <1238, 1.0>
WANTS | tvs> :: (s[type=?x]\np[agr=3,count=sg])/np : \ x . \ y . simp prt want x y <1239, 1.0>
EGG | np :: np[type=count,agr=3,count=sg] : egg <1240, 1.0>
SALT | un :: np[type=uncount,agr=3] : salt <1241, 1.0>
BUY | tv> :: (s[type=?x]\np)/np : \ x . \ y . buy x y <1242, 1.0>
SCHROEDER | pn :: np[type=proper,agr=3] : schroeder <1243, 1.0>
AM | tv> :: s[type=?x]\np[agr=1,count=sg] : \ x . simp prt x <1244, 1.0>
WAS | tv2> :: s[type=?x]\np[count=sg] : \ x . simp pst x <1245, 1.0>
DINAH | pn :: np[type=proper,agr=3] : dinah <1246, 1.0>
BASEMENT | np :: np[type=count,agr=3,count=sg] : basement <1247, 1.0>
COOLPOP | np :: np[type=count,agr=3,count=sg] : coolpop <1248, 1.0>
TRYING | iving> :: s[type=ing]\np : \ x . cont try x <1249, 1.0>
MAILMAN | np :: np[type=count,agr=3,count=sg] : mailman <1250, 1.0>
JULIE | pn :: np[type=proper,agr=3] : julie <1251, 1.0>
SENT | tv2 :: (s[type=?x]\np)/np : \ x . \ y . simp pst send x y <1252, 1.0>
EAT | iv> :: s[type=?x]\np : \ x . simp prt eat x <1253, 1.0>
WOULD | aux :: (s\np)/(s\np) : \ x . \ y . would x y <1254, 1.0>
COOKING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont cook x y <1255, 1.0>
ICECUBE | n :: n[type=count,agr=3,count=sg] : icecube <1256, 1.0>
ICECUBES | pln :: np[type=count,agr=3,count=pl] : pl icecube <1257, 1.0>
ICECUBE-TRAYS | pln :: np[type=count,agr=3,count=pl] : pl icecube-tray <1258, 1.0>
TERRIBLY | sadv :: @x/@x : \ x . x terribly <1259, 1.0>
WAIT | iv> :: s[type=?x]\np : \ x . simp prt wait x <1260, 1.0>
GUESS | iv> :: s[type=imp] : simp prt guess you <1261, 1.0>
BUBBLE | np :: np[type=count,agr=3,count=sg] : bubble <1262, 1.0>
CARROTS | pln :: np[type=count,agr=3,count=pl] : pl carrot <1263, 1.0>
SORELY | sadv :: @x/@x : \ x . x sorely <1264, 1.0>
DISAPPOINTED | adj :: predp : \ x . disappointed x <1265, 1.0>
WORKING | tv-at :: ((s[type=?x]\np)/np)/'at ' : \ x . \ y . \ z . cont (work _ x) y z <1266, 1.0>
AWHILE | tp :: s\s : \ x . time x awhile <1267, 1.0>
SHOULD | mod :: (s\np)/(s\np) : \ x . \ y . should x y <1268, 1.0>
SNAP | iv> :: s[type=imp] : simp prt snap you <1269, 1.0>
ASHTRAY | np :: np[type=count,agr=3,count=sg] : ashtray <1270, 1.0>
SO-LONG | sadv :: @x\@x : \ x . x so-long <1271, 1.0>
CLIMB | iv-over> :: s[type=imp]/'over ' : \ x . simp prt (climb _ x) you <1272, 1.0>
SIT | iv> :: s[type=imp] : simp prt sit you <1273, 1.0>
COMPLICATED | adj :: np/np : \ x . complicated x <1274, 1.0>
JACKIE | pn :: np[type=proper,agr=3] : jackie <1275, 1.0>
BAREFOOT | adv :: (s\np)\(s\np) : \ x . \ y . x y barefoot <1276, 1.0>
PLAY | iv> :: s[type=?x]\np : \ x . simp prt play x <1277, 1.0>
CAN | np :: np[type=count,agr=3,count=sg] : can <1278, 1.0>
COME | iv-off :: (s[type=?x]\np)/'off ' : \ x . \ y . come _ x y <1279, 1.0>
THINK | tv-off> :: ((s[type=?x]\np)/np)/'off ' : \ x . \ y . \ z . think _ x y z <1280, 1.0>
HAD | tv2> :: (s[type=?x]\np)/np : \ x . \ y . prft have x y <1281, 1.0>
TELL | dv-about :: (((s[type=?x]\np)/np)/'about ')/np : \ x . \ y . \ z . \ w . simp prt (tell _ y) x z w <1282, 1.0>
OKKAY | adj :: predp : \ x . okkay x <1283, 1.0>
MEAN | tv> :: (s[type=?x]\np)/np : \ x . \ y . mean x y <1284, 1.0>
SHUT | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt shut x y <1285, 1.0>
SHUT | tv> :: (s[type=?x]\np)/np : \ x . \ y . shut x y <1286, 1.0>
MOVE | tv> :: s[type=imp]/np : \ x . simp prt move x you <1287, 1.0>
BRING | dv> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . simp prt bring y x z <1288, 1.0>
BRING | dv> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . bring y x z <1289, 1.0>
PRETTY | adj :: np/np : \ x . pretty x <1290, 1.0>
CANS | pln :: np[type=count,agr=3,count=pl] : pl can <1291, 1.0>
SHUT | tv> :: s[type=imp]/np : \ x . simp prt shut x you <1292, 1.0>
CATCH | tv> :: s[type=imp]/np : \ x . simp prt catch x you <1293, 1.0>
HOLD | tv> :: (s[type=?x]\np)/np : \ x . \ y . hold x y <1294, 1.0>
GARBAGE | np :: np[type=count,agr=3,count=sg] : garbage <1295, 1.0>
DRINK | tv> :: (s[type=?x]\np)/np : \ x . \ y . drink x y <1296, 1.0>
SWIM | iv> :: s[type=imp] : simp prt swim you <1297, 1.0>
LAY | iv-down :: s[type=imp]/'down ' : \ x . simp prt (lay _ x) you <1298, 1.0>
POTTIE | np :: np[type=count,agr=3,count=sg] : pottie <1299, 1.0>
EXCUSE | tv> :: s[type=imp]/np : \ x . simp prt excuse x you <1300, 1.0>
PAGE | np :: np[type=count,agr=3,count=sg] : page <1301, 1.0>
BACKWARDS | sp :: s\s : \ x . loc x backwards <1302, 1.0>
TURN | iv-around> :: s[type=imp]/'around ' : \ x . simp prt (turn _ x) you <1303, 1.0>
PILLOWS | pln :: np[type=count,agr=3,count=pl] : pl pillow <1304, 1.0>
COME | iv-over :: s[type=imp]/'over ' : \ x . simp prt (come _ x) you <1305, 1.0>
MOVE | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt move x y <1306, 1.0>
CUSTARD | np :: np[type=count,agr=3,count=sg] : custard <1307, 1.0>
DRINK | np :: np[type=count,agr=3,count=sg] : drink <1308, 1.0>
EATING | iving> :: s[type=ing] : cont eat you <1309, 1.0>
TOUCH | iv> :: s[type=imp] : simp prt touch you <1310, 1.0>
NOODLE | np :: np[type=count,agr=3,count=sg] : noodle <1311, 1.0>
TIRED | adj :: predp : \ x . tired x <1312, 1.0>
BUMPED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst bump x y <1313, 1.0>
BUMPED | tv2> :: s[type=?x]/np : \ x . simp pst bump x you <1314, 1.0>
CUTTING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont cut x y <1315, 1.0>
PUMPKIN | np :: np[type=count,agr=3,count=sg] : pumpkin <1316, 1.0>
COOK | tv> :: (s[type=?x]\np)/np : \ x . \ y . cook x y <1317, 1.0>
WROTE | dv2> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . simp pst write x y z <1318, 1.0>
HELP | tv> :: (s[type=?x]\np)/np : \ x . \ y . help x y <1319, 1.0>
HAPPENNING | iving> :: s[type=ing]\np : \ x . cont happen x <1320, 1.0>
MACHINE | np :: np[type=count,agr=3,count=sg] : machine <1321, 1.0>
WATCH | tv> :: (s[type=?x]\np)/np : \ x . \ y . watch x y <1322, 1.0>
WASHINGMACHINE | np :: np[type=count,agr=3,count=sg] : washingmachine <1323, 1.0>
WATCH | tv> :: s[type=imp]/np : \ x . simp prt watch x you <1324, 1.0>
TINKERTOY-CAN | np :: np[type=count,agr=3,count=sg] : tinkertoy-can <1325, 1.0>
TINKERTOY | np :: np[type=count,agr=3,count=sg] : tinkertoy <1326, 1.0>
TINKERTOYS | pln :: np[type=count,agr=3,count=pl] : pl tinkertoy <1327, 1.0>
GUN | np :: np[type=count,agr=3,count=sg] : gun <1328, 1.0>
CLEAN | adj :: predp : \ x . clean x <1329, 1.0>
SEE | tv> :: s[type=?x]/np : \ x . simp prt see x you <1330, 1.0>
EAT | iv> :: s[type=?x]\np : \ x . eat x <1331, 1.0>
READ | iv> :: s[type=?x]\np : \ x . read x <1332, 1.0>
EAT | tv> :: s[type=?x]/np : \ x . simp prt eat x you <1333, 1.0>
BUTTERFLY | np :: np[type=count,agr=3,count=sg] : butterfly <1334, 1.0>
TEDDYBEAR | np :: np[type=count,agr=3,count=sg] : teddybear <1335, 1.0>
DEAR | np :: np[type=count,agr=3,count=sg] : dear <1336, 1.0>
STIR | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt stir x y <1337, 1.0>
STIR | tv> :: (s[type=?x]\np)/np : \ x . \ y . stir x y <1338, 1.0>
MUFFIN | np :: np[type=count,agr=3,count=sg] : muffin <1339, 1.0>
SPOONS | pln :: np[type=count,agr=3,count=pl] : pl spoon <1340, 1.0>
CHANGE | tv> :: s[type=?x]/np : \ x . simp prt change x you <1341, 1.0>
LAY | iv> :: s[type=?x]\np : \ x . simp prt lay x <1342, 1.0>
GET | tv-out> :: ((s[type=?x]\np)/np)/'out ' : \ x . \ y . \ z . simp prt (get _ x) y z <1343, 1.0>
WATCH | tv> :: s[type=?x]/np : \ x . simp prt watch x you <1344, 1.0>
WATCH | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt watch x y <1345, 1.0>
HOLD | tv-off> :: ((s[type=?x]\np)/np)/'off ' : \ x . \ y . \ z . hold _ x y z <1346, 1.0>
TAKE | tv-apart> :: (s[type=imp]/'apart ')/np : \ x . \ y . take _ y x you <1347, 1.0>
DANCING | iving> :: s[type=ing]\np : \ x . cont dance x <1348, 1.0>
TURN | iv-around> :: (s[type=?x]\np)/'around ' : \ x . \ y . turn _ x y <1349, 1.0>
AROUND | sp :: np[type=acc] : around <1350, 1.0>
LADYBUMP | pn :: np[type=proper,agr=3] : ladybump <1351, 1.0>
STILL | adv :: (s\np)\(s\np) : \ x . \ y . x y still <1352, 1.0>
SO-MUCH | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . so-much x <1353, 1.0>
WIPE | tv> :: s[type=imp]/np : \ x . simp prt wipe x you <1354, 1.0>
LOOK | tv> :: s[type=?x]/np : \ x . simp prt look x you <1355, 1.0>
WIPE | dv-off> :: (((s[type=?x]\np)/np)/'off ')/np : \ x . \ y . \ z . \ w . wipe _ y x z w <1356, 1.0>
TORE | iv2 :: s[type=?x]\np : \ x . simp pst tear x <1357, 1.0>
UMBRELLA | np :: np[type=count,agr=3,count=sg] : umbrella <1358, 1.0>
GONNA | aux :: s[type=q]/(s\np) : \ x . q gng x <1359, 1.0>
SIT | iv-down :: (s[type=?x]\np)/'down ' : \ x . \ y . sit _ x y <1360, 1.0>
STEP | iv-back :: (s[type=?x]\np)/'back ' : \ x . \ y . step _ x y <1361, 1.0>
OFF | pre :: (s\s)/np : \ x . \ y . loc y (off x) <1362, 1.0>
COME | iv-on :: s[type=imp]/'on ' : \ x . simp prt (come _ x) you <1363, 1.0>
HAD | tv> :: s[type=?x]/np : \ x . simp pst have x you <1364, 1.0>
HAPPY | adj :: predp : \ x . happy x <1365, 1.0>
EMPTYING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont empty x y <1366, 1.0>
GRAPE | np :: np[type=count,agr=3,count=sg] : grape <1367, 1.0>
TRUCK | np :: np[type=count,agr=3,count=sg] : truck <1368, 1.0>
STAY | iv-down :: (s[type=?x]\np)/'down ' : \ x . \ y . simp prt (stay _ x) y <1369, 1.0>
DEAR | x :: @x\@x : \ x . x dear <1370, 1.0>
PEEK | tv-with> :: ((s[type=?x]\np)/np)/'with ' : \ x . \ y . \ z . peek _ x y z <1371, 1.0>
CRAYON | np :: np[type=count,agr=3,count=sg] : crayon <1372, 1.0>
FAT | adj :: np/np : \ x . fat x <1373, 1.0>
MAGIC | un :: np[type=uncount,agr=3] : magic <1374, 1.0>
AWFUL | adj :: predp : \ x . awful x <1375, 1.0>
DREW | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst draw x y <1376, 1.0>
WRITE | tv> :: s[type=?x]/np : \ x . simp prt write x you <1377, 1.0>
FIZZIE | pn :: np[type=proper,agr=3] : fizzie <1378, 1.0>
MATTER | np :: np[type=count,agr=3,count=sg] : matter <1379, 1.0>
TOY | np :: np[type=count,agr=3,count=sg] : toy <1380, 1.0>
RATTLE | np :: np[type=count,agr=3,count=sg] : rattle <1381, 1.0>
TWIST | tv> :: s[type=imp]/np : \ x . simp prt twist x you <1382, 1.0>
THANK | tv> :: (s[type=?x]\np)/np : \ x . \ y . thank x y <1383, 1.0>
JELLO | un :: np[type=uncount,agr=3] : jello <1384, 1.0>
EYEBROWS | pln :: np[type=count,agr=3,count=pl] : pl eyebrow <1385, 1.0>
FACE | np :: np[type=count,agr=3,count=sg] : face <1386, 1.0>
BEAUTIFUL | adj :: np/np : \ x . beautiful x <1387, 1.0>
LOOKING | tving-out> :: ((s[type=ing]\np)/np)/'out ' : \ x . \ y . \ z . cont (look _ x) y z <1388, 1.0>
DRESSES | pln :: np[type=count,agr=3,count=pl] : pl dress <1389, 1.0>
DRESS | np :: np[type=count,agr=3,count=sg] : dress <1390, 1.0>
POPSICLE | np :: np[type=count,agr=3,count=sg] : popsicle <1391, 1.0>
MOMMA | pn :: np[type=proper,agr=3] : momma <1392, 1.0>
WAVING | tving-to> :: ((s[type=?x]\np)/np)/'to ' : \ x . \ y . \ z . cont (wave _ x) y z <1393, 1.0>
LEG | np :: np[type=count,agr=3,count=sg] : leg <1394, 1.0>
GIVE | dv> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . give x y z <1395, 1.0>
INDIGESTION | un :: np[type=uncount,agr=3] : indigestion <1396, 1.0>
FALLING | tv-off> :: ((s[type=ing]\np)/np)/'off ' : \ x . \ y . \ z . cont (fall _ x) y z <1397, 1.0>
NEAR | adj :: np/np : \ x . near x <1398, 1.0>
SILLY | np :: np[type=count,agr=3,count=sg] : silly <1399, 1.0>
TEETHING | iving> :: s[type=ing]\np : \ x . cont teeth x <1400, 1.0>
JUMP | np :: np[type=count,agr=3,count=sg] : jump <1401, 1.0>
CLOSE | tv> :: (s[type=?x]\np)/np : \ x . \ y . close x y <1402, 1.0>
MANY | det :: np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \ x . many x <1403, 1.0>
KINDS | pln :: np[type=count,agr=3,count=pl] : pl kind <1404, 1.0>
GO | iv-back> :: s[type=imp]/'back ' : \ x . go _ x you <1405, 1.0>
SOON | tp :: s\s : \ x . time x soon <1406, 1.0>
EXERCISE | np :: np[type=count,agr=3,count=sg] : exercise <1407, 1.0>
KISS | tv> :: (s[type=?x]\np)/np : \ x . \ y . kiss x y <1408, 1.0>
COMING | iv-down> :: (s[type=ing]\np)/'down ' : \ x . \ y . cont (come _ x) y <1409, 1.0>
PITCHER | np :: np[type=count,agr=3,count=sg] : pitcher <1410, 1.0>
SLIP | tv-on> :: (s[type=imp]/'on ')/np : \ x . \ y . slip _ y x you <1411, 1.0>
ORANGE | adj :: np/np : \ x . orange x <1412, 1.0>
FINISH | tv> :: (s[type=?x]\np)/np : \ x . \ y . finish x y <1413, 1.0>
SARA | pn :: np[type=proper,agr=3] : sara <1414, 1.0>
TOP | tv> :: (s[type=?x]\np)/np : \ x . \ y . top x y <1415, 1.0>
BABY-NOISE | n :: n[type=count,agr=3,count=sg] : baby-noise <1416, 1.0>
SOCK-SLIPPERS | pln :: np[type=count,agr=3,count=pl] : pl sock-slipper <1417, 1.0>
SIGN | tv> :: s[type=imp]/np : \ x . simp prt sign x you <1418, 1.0>
HEAR | tv> :: s[type=?x]/np : \ x . simp prt hear x you <1419, 1.0>
LIKE | pre :: ((s\np)\(s\np))/np : \ x . \ y . \ z . y z (like x) <1420, 1.0>
TOE | np :: np[type=count,agr=3,count=sg] : toe <1421, 1.0>
TOES | pln :: np[type=count,agr=3,count=pl] : pl toe <1422, 1.0>
STAND | iv> :: s[type=?x]\np : \ x . simp prt stand x <1423, 1.0>
BIGGER | adj :: np/np : \ x . bigger x <1424, 1.0>
ARM | np :: np[type=count,agr=3,count=sg] : arm <1425, 1.0>
OPEN | tv> :: s[type=?x]/np : \ x . simp prt open x you <1426, 1.0>
USED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst use x y <1427, 1.0>
HOLDING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont hold x y <1428, 1.0>
CATCH | tv> :: (s[type=?x]\np)/np : \ x . \ y . catch x y <1429, 1.0>
LASSIE | pn :: np[type=proper,agr=3] : lassie <1430, 1.0>
NEVER | adv :: (s\np)/(s\np) : \ x . \ y . never x y <1431, 1.0>
HEARD | tv3 :: (s[type=?x]\np)/np : \ x . \ y . prft hear x y <1432, 1.0>
READ | tv-to> :: ((s[type=?x]\np)/np)/'to ' : \ x . \ y . \ z . simp prt (read _ x) y z <1433, 1.0>
RANGY | pn :: np[type=proper,agr=3] : rangy <1434, 1.0>
LAP | np :: np[type=count,agr=3,count=sg] : lap <1435, 1.0>
GOPHER | n :: n[type=count,agr=3,count=sg] : gopher <1436, 1.0>
PAGES | pln :: np[type=count,agr=3,count=pl] : pl page <1437, 1.0>
BRING | tv> :: (s[type=imp]/np)/np : \ x . \ y . simp prt bring x y you <1438, 1.0>
NECESSARY | adj :: predp : \ x . necessary x <1439, 1.0>
STOVE | np :: np[type=count,agr=3,count=sg] : stove <1440, 1.0>
FURNITURE | np :: np[type=count,agr=3,count=sg] : furniture <1441, 1.0>
SHELF | np :: np[type=count,agr=3,count=sg] : shelf <1442, 1.0>
CARROT | np :: np[type=count,agr=3,count=sg] : carrot <1443, 1.0>
BOWL | np :: np[type=count,agr=3,count=sg] : bowl <1444, 1.0>
THROWING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont throw x y <1445, 1.0>
BY | pre :: (s\s)/np : \ x . \ y . y (by x) <1446, 1.0>
TOWER | np :: np[type=count,agr=3,count=sg] : tower <1447, 1.0>
BUILD | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt build x y <1448, 1.0>
RUNNING | iving> :: s[type=ing]\np : \ x . cont run x <1449, 1.0>
TODAY | tp :: s\s : \ x . time x today <1450, 1.0>
IMPROVES | tvs> :: (s[type=?x]\np[agr=3,count=sg])/np : \ x . \ y . simp prt improve x y <1451, 1.0>
GREATLY | adv :: (s\np)\(s\np) : \ x . \ y . x y greatly <1452, 1.0>
DROP | tv> :: s[type=imp]/np : \ x . simp prt drop x you <1453, 1.0>
BLOCK | np :: np[type=count,agr=3,count=sg] : block <1454, 1.0>
PIN | tv> :: (s[type=?x]\np)/np : \ x . \ y . pin x y <1455, 1.0>
COMING | iving-outof> :: (s[type=ing]/np)/'outof ' : \ x . \ y . cont (come _ x) y you <1456, 1.0>
UP | sp :: np[type=acc] : up <1457, 1.0>
CLIMB | iv> :: s[type=?x]\np : \ x . climb x <1458, 1.0>
CLIMB | iv-up> :: s[type=imp]/'up ' : \ x . simp prt (climb _ x) you <1459, 1.0>
ANSWER | tv> :: (s[type=?x]\np)/np : \ x . \ y . answer x y <1460, 1.0>
NATALIE | pn :: np[type=proper,agr=3] : natalie <1461, 1.0>
SOCK | np :: np[type=count,agr=3,count=sg] : sock <1462, 1.0>
MOVE | iv> :: s[type=?x]\np : \ x . move x <1463, 1.0>
INTO | pre :: (s\s)/np : \ x . \ y . loc y (into x) <1464, 1.0>
ROOM | np :: np[type=count,agr=3,count=sg] : room <1465, 1.0>
GO | iv-on> :: s[type=imp]/'on ' : \ x . go _ x you <1466, 1.0>
MOVE | iv> :: s[type=imp] : simp prt move you <1467, 1.0>
TAKE | tv-out> :: (s[type=imp]/'out ')/np : \ x . \ y . take _ y x you <1468, 1.0>
TAKE | tv-outof> :: (s[type=imp]/'outof ')/np : \ x . \ y . take _ y x you <1469, 1.0>
BRINGING | dving> :: ((s[type=ing]\np)/np)/np : \ x . \ y . \ z . cont give x y z <1470, 1.0>
CLIMB | tv-in> :: (s[type=?x]\np)/'in ' : \ x . \ y . simp prt (climb _ x) y <1471, 1.0>
FIND | tv> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . find x y z <1472, 1.0>
BANANA | np :: np[type=count,agr=3,count=sg] : banana <1473, 1.0>
NUTS | pln :: np[type=count,agr=3,count=pl] : pl nut <1474, 1.0>
CRACK | tv> :: (s[type=?x]\np)/np : \ x . \ y . crack x y <1475, 1.0>
HAMMER | np :: np[type=count,agr=3,count=sg] : hammer <1476, 1.0>
USE | tv> :: s[type=imp]/np : \ x . simp prt use x you <1477, 1.0>
CRACKED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst crack x y <1478, 1.0>
CRACK | tv> :: s[type=?x]/np : \ x . simp prt crack x you <1479, 1.0>
LYING | iving-down> :: (s[type=ing]\np)/'down ' : \ x . \ y . cont (lie _ x) y <1480, 1.0>
SWEATER | np :: np[type=count,agr=3,count=sg] : sweater <1481, 1.0>
DIFFERENCE | np :: n[type=count,agr=3,count=sg] : difference <1482, 1.0>
SWING | iv> :: s[type=?x]\np : \ x . swing x <1483, 1.0>
GIMME | tv> :: s[type=imp]/np : \ x . simp prt gimme x you <1484, 1.0>
ALL-THE-SAME | adj :: predp : \ x . all-the-same x <1485, 1.0>
GAME | np :: np[type=count,agr=3,count=sg] : game <1486, 1.0>
COFFEE-POT | np :: np[type=count,agr=3,count=sg] : coffee-pot <1487, 1.0>
JUMP | iv> :: s[type=?x]\np : \ x . simp prt jump x <1488, 1.0>
JUMP | iv> :: s[type=?x]\np : \ x . jump x <1489, 1.0>
LOOKING | iving> :: s[type=ing]\np : \ x . cont look x <1490, 1.0>
DANCE | np :: np[type=count,agr=3,count=sg] : dance <1491, 1.0>
BOWEL-MOVEMENT | n :: n[type=count,agr=3,count=sg] : bowel-movement <1492, 1.0>
CHANGE | tv> :: (s[type=?x]\np)/np : \ x . \ y . change x y <1493, 1.0>
HAHA | conj :: s/s : \ x . x <1494, 1.0>
PENNIES | pln :: np[type=count,agr=3,count=pl] : pl penny <1495, 1.0>
SWING | iv> :: s[type=?x] : simp prt swing you <1496, 1.0>
CLIMB | iv-down> :: s[type=imp]/'down ' : \ x . simp prt (climb _ x) you <1497, 1.0>
SLEEP | iv> :: s[type=?x] : simp prt sleep you <1498, 1.0>
SLEEP | iv> :: s[type=?x]\np : \ x . simp prt sleep x <1499, 1.0>
TAKE | tv-away> :: ((s[type=?x]\np)/'away ')/np : \ x . \ y . \ z . take _ y x z <1500, 1.0>
GO | iv-in> :: (s[type=?x]\np)/'in ' : \ x . \ y . simp prt (go _ x) y <1501, 1.0>
COUNT | tv> :: (s[type=?x]\np)/np : \ x . \ y . count x y <1502, 1.0>
OFF | adv :: (s\np)\(s\np) : \ x . \ y . x y off <1503, 1.0>
MUSIC | un :: np[type=uncount,agr=3] : music <1504, 1.0>
LIVINGROOM | np :: np[type=count,agr=3,count=sg] : livingroom <1505, 1.0>
VANILLA | np :: np[type=count,agr=3,count=sg] : vanilla <1506, 1.0>
ROCKINGCHAIR | np :: np[type=count,agr=3,count=sg] : rockingchair <1507, 1.0>
LOST | adj :: predp : \ x . lost x <1508, 1.0>
ORANGE-PEEL | un :: np[type=uncount,agr=3] : orange-peel <1509, 1.0>
PEEL | iv> :: s[type=imp] : simp prt peel you <1510, 1.0>
BOUILLON-CUBES | pln :: np[type=count,agr=3,count=pl] : pl bouillon-cube <1511, 1.0>
CAME | iv2-back> :: (s[type=?x]\np)/'back ' : \ x . \ y . simp pst (come _ x) y <1512, 1.0>
BOTTOM | np :: np[type=count,agr=3,count=sg] : bottom <1513, 1.0>
PUZZLE | np :: np[type=count,agr=3,count=sg] : puzzle <1514, 1.0>
CLIPCLOP | pn :: np[type=proper,agr=3] : clipclop <1515, 1.0>
CLIP | np :: np[type=count,agr=3,count=sg] : clip <1516, 1.0>
COIN | np :: np[type=count,agr=3,count=sg] : coin <1517, 1.0>
BASEBALL-COIN | np :: np[type=count,agr=3,count=sg] : baseball-coin <1518, 1.0>
POCKET | np :: np[type=count,agr=3,count=sg] : pocket <1519, 1.0>
BASEBALL | np :: np[type=count,agr=3,count=sg] : baseball <1520, 1.0>
WHAT | xqwadj :: np[type=qw,agr=?x,count=?y]/np[agr=?x,count=?y] : \ x . q x <1521, 1.0>
SWEETIE | np :: np[type=count,agr=3,count=sg] : sweetie <1522, 1.0>
COME | iv-back> :: (s[type=?x]\np)/'back ' : \ x . \ y . come _ x y <1523, 1.0>
ICING | un :: np[type=uncount,agr=3] : icing <1524, 1.0>
GO | iv-in> :: s[type=imp]/'in ' : \ x . simp prt (go _ x) you <1525, 1.0>
WAIT | iv> :: s[type=?x] : simp prt wait you <1526, 1.0>
DECORATING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont decorate x y <1527, 1.0>
HAM | np :: np[type=count,agr=3,count=sg] : ham <1528, 1.0>
HUMMTHEHAMSTER | pn :: np[type=proper,agr=3] : hummthehamster <1529, 1.0>
GOLDFISH | np :: np[type=count,agr=3,count=sg] : goldfish <1530, 1.0>
HIDING | iving> :: s[type=ing]\np : \ x . cont hide x <1531, 1.0>
BLOCKS | pln :: np[type=count,agr=3,count=pl] : pl block <1532, 1.0>
HAMBURGER | np :: np[type=count,agr=3,count=sg] : hamburger <1533, 1.0>
GO | x :: (s[type=?x]\np)/s : \ x . \ y . simp prt say x y <1534, 1.0>
OLDMACDONALD | pn :: np[type=proper,agr=3] : oldmacdonald <1535, 1.0>
SHEEP | np :: np[type=count,agr=3,count=sg] : sheep <1536, 1.0>
DROPPED | iv2> :: s[type=?x]\np : \ x . simp pst drop x <1537, 1.0>
FROSTYTHESNOWMAN | pn :: np[type=proper,agr=3] : frostythesnowman <1538, 1.0>
SNOWBALLS | pln :: np[type=count,agr=3,count=pl] : pl snowball <1539, 1.0>
SCARF | np :: np[type=count,agr=3,count=sg] : scarf <1540, 1.0>
MITTENS | pln :: np[type=count,agr=3,count=pl] : pl mitten <1541, 1.0>
SKATING | iving> :: s[type=ing] : cont skate you <1542, 1.0>
CAME | iv2-off> :: (s[type=?x]\np)/'off ' : \ x . \ y . simp pst (come _ x) y <1543, 1.0>
POLICEMAN | np :: np[type=count,agr=3,count=sg] : policeman <1544, 1.0>
CHICKS | pln :: np[type=count,agr=3,count=pl] : pl chick <1545, 1.0>
DONKEY | n :: n[type=count,agr=3,count=sg] : donkey <1546, 1.0>
DONKEYS | pln :: np[type=count,agr=3,count=pl] : pl donkey <1547, 1.0>
APPLE | np :: np[type=count,agr=3,count=sg] : apple <1548, 1.0>
APPLES | pln :: np[type=count,agr=3,count=pl] : pl apple <1549, 1.0>
APPLE-TREES | pln :: np[type=count,agr=3,count=pl] : pl apple-tree <1550, 1.0>
ELEPHANT | np :: np[type=count,agr=3,count=sg] : elephant <1551, 1.0>
BUNNY | np :: np[type=count,agr=3,count=sg] : bunny <1552, 1.0>
DOGGIE | np :: np[type=count,agr=3,count=sg] : doggy <1553, 1.0>
ROOSTER | n :: n[type=count,agr=3,count=sg] : rooster <1554, 1.0>
ROOSTERS | pln :: np[type=count,agr=3,count=pl] : pl rooster <1555, 1.0>
COW | np :: np[type=count,agr=3,count=sg] : cow <1556, 1.0>
COWS | pln :: np[type=count,agr=3,count=pl] : pl cow <1557, 1.0>
SWAYS | ivs :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt sway x <1558, 1.0>
DUSTPAN | np :: np[type=count,agr=3,count=sg] : dustpan <1559, 1.0>
JUMP | tv-off> :: (s[type=imp]/np)/'off ' : \ x . simp prt (jump _ x) y you <1560, 1.0>
ICING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont ice x y <1561, 1.0>
GIRAFFE | np :: np[type=count,agr=3,count=sg] : giraffe <1562, 1.0>
CAR | np :: np[type=count,agr=3,count=sg] : car <1563, 1.0>
SAILBOAT | np :: np[type=count,agr=3,count=sg] : sailboat <1564, 1.0>
CATS | pln :: np[type=count,agr=3,count=pl] : pl cat <1565, 1.0>
DOING | tving> :: s[type=ing]/np : \ x . cont do x <1566, 1.0>
SPLASHING | iving> :: s[type=ing]\np : \ x . cont splash x <1567, 1.0>
DIGGING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont dig x y <1568, 1.0>
BUG | np :: np[type=count,agr=3,count=sg] : bug <1569, 1.0>
POPCORN | un :: np[type=uncount,agr=3] : popcorn <1570, 1.0>
SMELL | tv> :: s[type=imp]/np : \ x . simp prt smell x you <1571, 1.0>
SMELLING | tving> :: s[type=ing]/np : \ x . cont smell x <1572, 1.0>
HEAT | un :: np[type=uncount,agr=3] : heat <1573, 1.0>
STYLUS | np :: np[type=count,agr=3,count=sg] : stylus <1574, 1.0>
DRAW | tv> :: s[type=?x]/np : \ x . simp prt draw x you <1575, 1.0>
CARRY | tv> :: s[type=?x]/np : \ x . simp prt carry x you <1576, 1.0>
CARRY | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt carry x y <1577, 1.0>
BOWELS | pln :: np[type=count,agr=3,count=pl] : pl bowel <1578, 1.0>
AWAY | sp :: s\s : \ x . loc x away <1579, 1.0>
FEED | tv> :: (s[type=?x]\np)/np : \ x . \ y . feed x y <1580, 1.0>
FROGGY | pn :: np[type=proper,agr=3] : froggy <1581, 1.0>
HAVING | tving> :: s[type=ing]/np : \ x . cont have x <1582, 1.0>
WHOLE | adj :: np/np : \ x . whole x <1583, 1.0>
WEEK | np :: np[type=count,agr=3,count=sg] : week <1584, 1.0>
COLD | adj :: predp : \ x . cold x <1585, 1.0>
WAKE | iv-up> :: (s[type=?x]\np)/'up ' : \ x . \ y . wake _ x y <1586, 1.0>
OLIVE | np :: np[type=count,agr=3,count=sg] : olive <1587, 1.0>
MISSED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst miss x y <1588, 1.0>
FIRST | adj :: np/np : \ x . first x <1589, 1.0>
STRING | np :: np[type=count,agr=3,count=sg] : string <1590, 1.0>
WAKING | iv-up> :: (s[type=ing]\np)/'up ' : \ x . \ y . cont (wake _ x) y <1591, 1.0>
SOUND | iv-like> :: ((s[type=?x]\np)/np)/'like ' : \ x . \ y . \ z . sound _ x y z <1592, 1.0>
FIRETRUCK | np :: np[type=count,agr=3,count=sg] : firetruck <1593, 1.0>
COMFORTABLE | adj :: predp : \ x . comfortable x <1594, 1.0>
SWIMMING | iving> :: s[type=ing] : cont swim <1595, 1.0>
BATH | np :: np[type=count,agr=3,count=sg] : bath <1596, 1.0>
BATHROBE | np :: np[type=count,agr=3,count=sg] : bathrobe <1597, 1.0>
BATHTUB | np :: np[type=count,agr=3,count=sg] : bathtub <1598, 1.0>
SWIM | iv> :: s[type=?x]\np : \ x . simp prt swim x <1599, 1.0>
KNEE | np :: np[type=count,agr=3,count=sg] : knee <1600, 1.0>
PAPER-BAG | np :: np[type=count,agr=3,count=sg] : paper-bag <1601, 1.0>
PAPER-CLIP | np :: np[type=count,agr=3,count=sg] : paper-clip <1602, 1.0>
GO | iv-to :: ((s[type=?x]\np)/np)/'to ' : \ x . \ y . \ z . simp prt (go _ x) y z <1603, 1.0>
SNEEZES | pln :: np[type=count,agr=3,count=pl] : pl sneeze <1604, 1.0>
SNEEZE | iv> :: s[type=imp] : simp prt sneeze you <1605, 1.0>
SITTING | iving-down> :: (s[type=ing]\np)/'down ' : \ x . \ y . cont (sit _ x) y <1606, 1.0>
RIDE | tv> :: (s[type=?x]\np)/np : \ x . \ y . ride x y <1607, 1.0>
FUN | adj :: predp : \ x . fun x <1608, 1.0>
JUDY | pn :: np[type=proper,agr=3] : judy <1609, 1.0>
SQUASHING | iving> :: s[type=ing]\np : \ x . cont squash x <1610, 1.0>
NOISY | adj :: predp : \ x . noisy x <1611, 1.0>
REEL | np :: np[type=count,agr=3,count=sg] : reel <1612, 1.0>
CAN | np :: np[type=count,agr=3,count=sg] : can <1613, 1.0>
SHOVING | iving> :: s[type=ing]\np : \ x . cont shove x <1614, 1.0>
PANS | pln :: np[type=count,agr=3,count=pl] : pl pan <1615, 1.0>
AROUND | sp :: s\s : \ x . loc x around <1616, 1.0>
MOUTHFUL | np :: np[type=count,agr=3,count=sg] : mouthful <1617, 1.0>
MESS | np :: np[type=count,agr=3,count=sg] : mess <1618, 1.0>
MESSY | adj :: np/np : \ x . messy x <1619, 1.0>
PICKLE | np :: np[type=count,agr=3,count=sg] : pickle <1620, 1.0>
BLOW | iv> :: s[type=?x]\np : \ x . blow x <1621, 1.0>
TOMORROW | tp :: np : tomorrow <1622, 1.0>
MOVING | tving> :: s[type=ing]\np : \ x . cont move x <1623, 1.0>
ROCKABYE-BABY | np :: np[agr=3] : rockabye-baby <1624, 1.0>
ROCKABYE | np :: np[type=count,agr=3,count=sg] : rockabye <1625, 1.0>
PICK | tv-out> :: (s[type=imp]/'out ')/np : \ x . \ y . simp prt (pick _ y) x you <1626, 1.0>
TIGER | np :: np[type=count,agr=3,count=sg] : tiger <1627, 1.0>
ZEBRA | np :: np[type=count,agr=3,count=sg] : zebra <1628, 1.0>
READ | dv> :: ((s[type=?x]\np)/np)/np : \ x . \ y . \ z . read x y z <1629, 1.0>
WIPE | tv> :: s[type=?x]/np : \ x . simp prt wipe x you <1630, 1.0>
TAPE | un :: np[type=uncount,agr=3] : tape <1631, 1.0>
CHANGING | tving> :: s[type=ing]/np : \ x . cont change x you <1632, 1.0>
BURP | iv> :: s[type=?x]\np : \ x . burp x <1633, 1.0>
BURPED | iv2> :: s[type=?x]\np : \ x . simp pst burp x <1634, 1.0>
NIPPLE | np :: np[type=count,agr=3,count=sg] : nipple <1635, 1.0>
EAT | iv> :: s[type=imp] : simp prt eat you <1636, 1.0>
THIRSTY | adj :: predp : \ x . thirsty x <1637, 1.0>
TURN | np :: np[type=count,agr=3,count=sg] : turn <1638, 1.0>
SLIPPED | iv2> :: s[type=?x]\np : \ x . simp pst slip x <1639, 1.0>
SLIPPED | iv2> :: s[type=?x] : simp pst slip you <1640, 1.0>
BUTTON | np :: np[type=count,agr=3,count=sg] : button <1641, 1.0>
SEE | tv> :: s[type=?x]/np : \ x . simp prt see x you <1642, 1.0>
GOT | tv2> :: s[type=?x]/np : \ x . simp pst get x you <1643, 1.0>
DRINKS | tvs> :: (s[type=?x]\np[agr=3,count=sg])/np : \ x . \ y . simp prt drink x y <1644, 1.0>
MIXING | tving> :: s[type=ing]/np : \ x . cont mix x you <1645, 1.0>
FIXING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont fix x y <1646, 1.0>
DANNY | pn :: np[type=proper,agr=3] : danny <1647, 1.0>
RINGING | tving> :: s[type=ing] : cont ring you <1648, 1.0>
MARCIA | pn :: np[type=proper,agr=3] : marcia <1649, 1.0>
GOLDRUSH | pn :: np[type=proper,agr=3] : goldrush <1650, 1.0>
TEQUITA | pn :: np[type=proper,agr=3] : tequita <1651, 1.0>
ALONE | adv :: (s\np)\(s\np) : \ x . \ y . x y alone <1652, 1.0>
TAKE | tv-off :: (s[type=imp]/'off ')/np : \ x . \ y . take _ y x you <1653, 1.0>
LINDA | pn :: np[type=proper,agr=3] : linda <1654, 1.0>
ANIMALS | pln :: np[type=count,agr=3,count=pl] : pl animal <1655, 1.0>
FEED | tv> :: s[type=imp]/np : \ x . simp prt feed x you <1656, 1.0>
RACCOONS | pln :: np[type=count,agr=3,count=pl] : pl raccoon <1657, 1.0>
HAY | un :: np[type=uncount,agr=3] : hay <1658, 1.0>
BARKING | iving> :: s[type=ing]\np : \ x . cont bark x <1659, 1.0>
HUMP | iv> :: s[type=imp] : simp prt hump x you <1660, 1.0>
ICECREAM-CONE | np :: np[type=count,agr=3,count=sg] : icecream-cone <1661, 1.0>
ICECREAM | un :: np[type=uncount,agr=3] : icecream <1662, 1.0>
BESIDES | x :: (np\np)/np : \ x . \ y . y (besides x) <1663, 1.0>
TROUBLE | np :: np[type=count,agr=3,count=sg] : trouble <1664, 1.0>
LOOSE | adj :: predp : \ x . loose x <1665, 1.0>
CHICAGO | np :: np[type=count,agr=3,count=sg] : chicago <1666, 1.0>
RUINING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont ruin x y <1667, 1.0>
STRAIGHTEN | tv> :: s[type=imp]/np : \ x . simp prt straighten x you <1668, 1.0>
SOCKS | pln :: np[type=count,agr=3,count=pl] : pl sock <1669, 1.0>
SNOOPY | pn :: np[type=proper,agr=3] : snoopy <1670, 1.0>
BROOM | np :: np[type=count,agr=3,count=sg] : broom <1671, 1.0>
SHOVEL | tv> :: s[type=imp]/np : \ x . simp prt shovel x you <1672, 1.0>
SNOW | un :: np[type=uncount,agr=3] : snow <1673, 1.0>
BOOTS | pln :: np[type=count,agr=3,count=pl] : pl boot <1674, 1.0>
PANTIES | pln :: np[type=count,agr=3,count=pl] : pl panty <1675, 1.0>
LAY | iv> :: s[type=imp] : simp prt lay you <1676, 1.0>
BEDROOM | p :: n[type=place,agr=3,count=sg] : bedroom <1677, 1.0>
TURN | iv-over> :: (s[type=?x]\np)/'over ' : \ x . \ y . turn _ y x <1678, 1.0>
AL-BL-CL | np :: np[agr=3] : al-bl-cl <1679, 1.0>
EH | conj :: s/s : \ x . x <1680, 1.0>
KNOB | np :: np[type=count,agr=3,count=sg] : knob <1681, 1.0>
CRASH | iv> :: s[type=imp] : simp prt crash you <1682, 1.0>
SMILE | tv-at :: (s[type=imp]/np)/'at ' : \ x . \ y . simp prt (smile _ x) y you <1683, 1.0>
JAMMIES | pln :: np[type=count,agr=3,count=pl] : pl jammie <1684, 1.0>
RADIATOR | n :: n[type=count,agr=3,count=sg] : radiator <1685, 1.0>
ROCKING | tving> :: (s[type=ing]\np)/np : \ x . \ y . cont rock x y <1686, 1.0>
PULL | tv> :: (s[type=?x]\np)/np : \ x . \ y . pull x y <1687, 1.0>
VALENTINE | pn :: np[type=proper,agr=3] : valentine <1688, 1.0>
USED | tv3> :: (s[type=?x]\np)/np : \ x . \ y . prft use x y <1689, 1.0>
SHOVEL | np :: np[type=count,agr=3,count=sg] : shovel <1690, 1.0>
SUGAR-TOP | np :: np[type=count,agr=3,count=sg] : sugar-top <1691, 1.0>
BOX-TOP | np :: np[type=count,agr=3,count=sg] : box-top <1692, 1.0>
TEAPOT | np :: np[type=count,agr=3,count=sg] : teapot <1693, 1.0>
GOAT | np :: np[type=count,agr=3,count=sg] : goat <1694, 1.0>
BEFORE | tp :: s\s : \ x . time x before <1695, 1.0>
TONIGHT | tp :: np : tonight <1696, 1.0>
COVER | np :: np[type=count,agr=3,count=sg] : cover <1697, 1.0>
KANGAROO | np :: np[type=count,agr=3,count=sg] : kangaroo <1698, 1.0>
RIBBON | np :: np[type=count,agr=3,count=sg] : ribbon <1699, 1.0>
WALKING | iving> :: s[type=ing]\np : \ x . cont walk x <1700, 1.0>
BELL | np :: np[type=count,agr=3,count=sg] : bell <1701, 1.0>
WAGON | np :: np[type=count,agr=3,count=sg] : wagon <1702, 1.0>
BLASTING | iving> :: s[type=ing]\np : \ x . cont blast x <1703, 1.0>
FORGOT | tv2> :: s[type=?x]/np : \ x . simp pst forget x you <1704, 1.0>
LOUD | adj :: np/np : \ x . loud x <1705, 1.0>
BOOM | np :: np[type=count,agr=3,count=sg] : boom <1706, 1.0>
KIX | pn :: np[type=proper,agr=3] : kix <1707, 1.0>
CHOCOLATE-ICECREAM | un :: np[type=uncount,agr=3] : chocolate-icecream <1708, 1.0>
NEED | tv> :: s[type=?x]/np : \ x . simp prt need x you <1709, 1.0>
GET | tv-in> :: ((s[type=?x]\np)/'in ')/np : \ x . \ y . \ z . get _ y x z <1710, 1.0>
MESSY | adj :: predp : \ x . messy x <1711, 1.0>
TAIL | np :: np[type=count,agr=3,count=sg] : tail <1712, 1.0>
CURLY | adj :: np/np : \ x . curly x <1713, 1.0>
BIT | np :: np[type=count,agr=3,count=sg] : bit <1714, 1.0>
OPEN | adj :: predp : \ x . open x <1715, 1.0>
GO | iv-ahead> :: s[type=imp]/'ahead ' : \ x . simp prt (go _ x) you <1716, 1.0>
LOOKED | tv2> :: (s[type=?x]\np)/np : \ x . \ y . simp pst look x y <1717, 1.0>
WERE | tv> :: s[type=?x]\np : \ x . simp pst x <1718, 1.0>
SHAKING | tving> :: s[type=ing]/np : \ x . cont shake x <1719, 1.0>
SPONGE | np :: np[type=count,agr=3,count=sg] : sponge <1720, 1.0>
STEP | iv-outof :: (s[type=imp]/'outof ')/np : \ x . \ y . step _ y x you <1721, 1.0>
STEP | iv-out :: s[type=imp]/'out ' : \ x . step _ x you <1722, 1.0>
CRIED | iv2> :: s[type=?x]\np : \ x . simp pst cry x <1723, 1.0>
CHECK | np :: np[type=count,agr=3,count=sg] : check <1724, 1.0>
SAY | tv> :: s[type=imp]/s : \ x . simp prt say x you <1725, 1.0>
EVERYTHING | np :: np[agr=3] : everything <1726, 1.0>
TAKE | tv-back> :: ((s[type=?x]\np)/'back ')/np : \ x . \ y . \ z . simp prt (take _ y) x z <1727, 1.0>
MOVE | tv-out> :: ((s[type=?x]\np)/'out ')/np : \ x . \ y . \ z . move _ y x z <1728, 1.0>
PINCH | tv> :: (s[type=?x]\np)/np : \ x . \ y . pinch x y <1729, 1.0>
MOVED | iv2> :: s[type=?x]\np : \ x . simp pst move x <1730, 1.0>
COOL | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt cool x y <1731, 1.0>
DRY | tv> :: s[type=imp]/np : \ x . simp prt dry x you <1732, 1.0>
BLOW | tv-on> :: (s[type=imp]/np)/'on ' : \ x . \ y . simp prt (blow _ x) y you <1733, 1.0>
BEFORE | pre :: (s\s)/np[type=time] : \ x . \ y . time y (before x) <1734, 1.0>
FOOD | np :: np[type=count,agr=3,count=sg] : food <1735, 1.0>
CHOCOLATE-ICECREAM | un :: np[type=uncount,agr=3] : chocolate-icecream <1736, 1.0>
EATS | tvs> :: s[type=?x]\np[agr=3,count=sg] : \ x . simp prt eat x <1737, 1.0>
UPSTAIRS | sp :: np[type=acc] : upstairs <1738, 1.0>
HAVE | tv> :: s[type=imp]/np : \ x . simp prt have x you <1739, 1.0>
PICK | tv> :: (s[type=?x]\np)/np : \ x . \ y . pick x y <1740, 1.0>
OTHER | adj :: np/np : \ x . other x <1741, 1.0>
HAS | tvs-on> :: (s[type=?x]\np[agr=3,count=sg])/'on ' : \ x . \ y . have _ x y <1742, 1.0>
GOT | tv-on> :: ((s[type=?x]\np)/'on ')/np : \ x . \ y . \ z . simp pst (get _ y) x z <1743, 1.0>
DOES | tv> :: s[type=?x]/np : \ x . does x <1744, 1.0>
MARGARET | pn :: np[type=proper,agr=3] : margaret <1745, 1.0>
BECAUSE | x :: s/s : \ x . because x <1746, 1.0>
WHAT | qw :: s : -what- <1747, 1.0>
STICK | tv-in> :: ((s[type=imp]/np)/'in ')/np : \ x . \ y . \ z . simp prt (stick _ y) x z you <1748, 1.0>
GRAVY | un :: np[type=uncount,agr=3] : gravy <1749, 1.0>
ASK | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt ask x y <1750, 1.0>
RUN | iv-back> :: (s[type=?x]\np)/'back ' : \ x . \ y . simp prt (run _ x) y <1751, 1.0>
OUT | adv :: (s\np)\(s\np) : \ x . \ y . x y out <1752, 1.0>
ALREADY | tp :: s\s : \ x . time x already <1753, 1.0>
WHAT | q :: s[type=q]/(s[type=q]/np) : \ x . q what x <1754, 1.0>
WERE | aux :: (s/np)/(s/np) : \ x . pst x <1755, 1.0>
DOING | tving> :: s[type=ing]/np : \ x . cont do x you <1756, 1.0>
SEE | tv> :: s[type=?x]/s : \ x . simp prt see x you <1757, 1.0>
JUMP | iv> :: s[type=?x]\np : \ x . simp prt jump x <1758, 1.0>
STARTED | tv2> :: (s[type=?x]\np)/(s\np) : \ x . \ y . \ z . simp pst start (x y z) z <1759, 1.0>
ROLL | tv> :: (s[type=?x]\np)/np : \ x . \ y . roll x y <1760, 1.0>
GO | tv> :: (s[type=?x]\np)/(s\np) : \ x . \ y . simp prt go (x y) y <1761, 1.0>
SLEEP | iv> :: s[type=?x]\np : \ x . sleep x <1762, 1.0>
DID | aux :: s[type=q]/np : \ x . q simp pst x <1763, 1.0>
EVER | tp :: s\s : \ x . time x ever <1764, 1.0>
TO | x :: (s/s)/(s\np) : \ x . \ y . x y <1765, 1.0>
DO | tv> :: s[type=?x]\np : \ x . do x <1766, 1.0>
TELL | dv> :: ((s[type=imp]/(s\np))/np)/np : \ x . \ y . \ z . simp prt tell (z x) x y you <1767, 1.0>
PUT | tv> :: (s[type=?x]\np)/np : \ x . \ y . simp prt put x y <1768, 1.0>
PUT | tv> :: (s[type=?x]\np)/np : \ x . \ y . put x y <1769, 1.0>
PUT | tv> :: s[type=imp]/np : \ x . simp prt put x you <1770, 1.0>
PUT | iv-in> :: (s[type=imp]/np)/'in ' : \ x . \ y . simp prt (put _ x) y you <1771, 1.0>
PUTTING | tv-in> :: ((s[type=?x]\np)/'in ')/np : \ x . \ y . \ z . cont (put _ y) x z <1772, 1.0>
PUTTING | tv-on> :: ((s[type=ing]/np)/'on ')/np : \ x . \ y . \ z . cont (put _ y) x z <1773, 1.0>
PUTTING | tv-in> :: (((s[type=ing]\np)/np)/'in ')/np : \ x . \ y . \ z . \ w . cont (put _ y) x z w <1774, 1.0>
PUTTING | tv-on> :: (((s[type=ing]\np)/np)/'on ')/np : \ x . \ y . \ z . \ w . cont (put _ y) x z w <1775, 1.0>
PUT | tv-over> :: ((s[type=?x]\np)/'over ')/np : \ x . \ y . \ z . put _ y x z <1776, 1.0>
PUT | tv-away> :: ((s[type=?x]\np)/'away ')/np : \ x . \ y . \ z . put _ y x z <1777, 1.0>
PUT | tv-away> :: (s[type=imp]/'away ')/np : \ x . \ y . simp prt (put _ y) x you <1778, 1.0>
PUT | tv-away> :: ((s[type=?x]\np)/'away ')/np : \ x . \ y . \ z . simp prt (put _ y) x z <1779, 1.0>
PUT | tv-out> :: ((s[type=?x]\np)/'out ')/np : \ x . \ y . \ z . put _ y x z <1780, 1.0>
PUT | tv-back> :: ((s[type=?x]\np)/'back ')/np : \ x . \ y . \ z . put _ y x z <1781, 1.0>
PUT | tv-back> :: ((s[type=?x]\np)/'back ')/np : \ x . \ y . \ z . simp prt (put _ y) x z <1782, 1.0>
PUT | tv-back> :: (s[type=imp]/'back ')/np : \ x . \ y . simp prt (put _ y) x you <1783, 1.0>
PUT | tv-on> :: ((s[type=imp]/np)/'on ')/np : \ x . \ y . \ z . simp prt (put _ y) x z you <1784, 1.0>
PUT | tv-on> :: (s[type=imp]/'on ')/np : \ x . \ y . simp prt (put _ y) x you <1785, 1.0>
PUT | dv-on> :: (((s[type=?x]\np)/np)/'on ')/np : \ x . \ y . \ z . \ w . put _ y x z w <1786, 1.0>
PUT | dv-on> :: (((s[type=?x]\np)/np)/'on ')/np : \ x . \ y . \ z . \ w . simp prt (put _ y) x z w <1787, 1.0>
PUT | tv-on> :: ((s[type=?x]\np)/'on ')/np : \ x . \ y . \ z . put _ y x z <1788, 1.0>
PUT | tv-on> :: ((s[type=?x]\np)/'on ')/np : \ x . \ y . \ z . simp prt (put _ y) x z <1789, 1.0>
PUT | tv-in> :: ((s[type=?x]\np)/'in ')/np : \ x . \ y . \ z . simp prt (put _ y) x z <1790, 1.0>
PUT | dv-in> :: ((s[type=imp]/np)/'in ')/np : \ x . \ y . \ z . simp prt (put _ y) x z you <1791, 1.0>
PUT | tv-in> :: (s[type=?x]\np)/'in ' : \ x . \ y . simp prt (put _ x) y <1792, 1.0>
PUT | tv-in> :: ((s[type=?x]\np)/'in ')/np : \ x . \ y . \ z . put _ y x z <1793, 1.0>
PUT | dv-in> :: (((s[type=?x]\np)/np)/'in ')/np : \ x . \ y . \ z . \ w . simp prt (put _ y) x z w <1794, 1.0>
PUT | tv-in> :: (s[type=imp]/'in ')/np : \ x . \ y . simp prt (put _ y) x you <1795, 1.0>
BACK | adv :: (s\np)\(s\np) : \ x . \ y . x y back <1796, 1.0>
UP | adv :: (s\np)\(s\np) : \ x . \ y . x y up <1797, 1.0>
