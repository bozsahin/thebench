more det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!more x;
more det := predp/predp : \x.!more x;
juice un := np[type=uncount,agr=3] : !juice;
? pun := s[type=q]\*np : \x.!q x;
where q := s[type=q]/(s[type=q]/np) : \x.!q !place x;
is tv> := s[type=q]/np/np[agr=3,count=sg] :\x\y.!simp !prt y x;
your det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!your x;
cup np := np[type=count,agr=3,count=sg] : !cup;
I pro := np[agr=1,count=sg] : !I;
took tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !take x y;
it pro := np[agr=3,count=sg] : !it;
am tv> := (s[type=?x]\np[agr=1,count=sg])/np : \x\y.!simp !prt !eq x y;
am tv> := (s[type=?x]\np[agr=1,count=sg])/predp : \x\y.!simp !prt x y;
not x := @x/@x : \x.!not x;
sure adj := predp : \x.!sure x;
are aux := s[type=q]/(s\np)/np : \x\y.!q !prt y x;
you pro := np[agr=2] : !you;
saying tving> := (s[type=ing]\np)/np : \x\y.!cont !say x y;
Fraser pn := np[type=proper,agr=3] : !Fraser;
what q := s[type=q]/(s[type=q]/np) : \x.!q !what x;
what q := s[type=q]/s[type=q] : \x.!q !what x;
that np := np[agr=3,count=sg] : !that;
a det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!a x;
fly np := np[type=count,agr=3,count=sg] : !fly;
get tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !get x y;
one np := np[agr=3] : !one;
go iv> := s[type=imp] : !simp !prt !go !you;
and x := (@x\*@x)/*@x : \p\q\x.!and (p x)(q x);
get tv> := s[type=imp]/np : \x.!simp !prt !get x !you;
telephone np := np[type=count,agr=3,count=sg] : !telephone;
he pro := np[agr=3,count=sg] : !he;
gave dv2> := (s[type=?x]\np)/np/np : \x\y\z.!simp !pst !give x y z;
who q := s[type=q]/(s[type=q]/np) : \x.!q !who x;
calling tving> := (s[type=ing]\np)/np : \x\y.!cont !call x y;
who qw := np[type=qw] : !q !person;
is aux := s[type=q]/(s\np)/np[agr=3,count=sg] : \x\y.!q !prt y x;
the det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!the x;
man np := np[type=count,agr=3,count=sg] : !man;
doing tving> := (s[type=ing]\np)/np : \x\y.!cont !do x y;
want tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !want x y;
cookie np := np[type=count,agr=3,count=sg] : !cookie;
? pun := s[type=q]\*s[type=?x] : \x.!q x;
can mod := s[type=q]/(s\np)/np : \x\y.!q !can y x;
do tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !do x y;
do iv> := s[type=?x]\np : \x.!do x;
there sp := np[type=acc] : !there;
is tv> := (s[type=?x]\np[agr=3,count=sg])/np : \x\y.!simp !prt !eq x y;
baby np := np[type=count,agr=3,count=sg] : !baby;
Mommy pn := np[type=proper,agr=3] : !Mommy;
can mod := (s\np)/(s\np) : \x\y.!can x y;
read iv> := s[type=?x]\np : \x.!simp !prt !read x;
busy adj := predp : \x.!busy x;
read tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !read x y;
book np := np[type=count,agr=3,count=sg] : !book;
stool np := np[type=count,agr=3,count=sg] : !stool;
did aux := s[type=q]/(s\np)/np : \x\y.!q !simp !pst y x;
eat tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !eat x y;
ate tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !eat x y;
milk un := np[type=uncount,agr=3] : !milk;
do aux := (s\np)/(s\np) : \x\y.!simp !prt !do x y;
have aux := (s\np)/(s\np) : \x\y.!prt !prft x y;
just adv := @x/@x : \x.!just x;
had tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !have x y;
some det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!some x;
juice un := np[type=uncount,agr=3] : !juice;
drink tv> := s[type=imp]/np : \x.!simp !prt !drink x !you;
water un := np[type=uncount,agr=3] : !water;
coffee un := np[type=uncount,agr=3] : !coffee;
is aux := (s\np)/(s\np) : \x\y.!prt x y;
drinking tving> := (s[type=ing]\np)/np : \x\y.!cont !drink x y;
drinking tving> := s[type=ing]/np : \x.!cont !eat x !you;
his det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!his x;
go iv> := s[type=?x]\np : \x.!simp !prt !go x;
go iv> := s[type=?x]\np : \x.!go x;
later tp := s/s : \x.!time x !later;
later tp := s\s : \x.!time x !later;
we pro := np[agr=1,count=pl] : !we;
will aux := (s\np)/(s\np) : \x\y.!simp !ftr x y;
will aux := s[type=q]/(s\np)/np : \x\y.!q !simp !ftr y x;
have tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !have x y;
hat np := np[type=count,agr=3,count=sg] : !hat;
and conj := s/s : \x.!and x;
with prex := (s\s)/np : \x\y.!inst y (!with x);
give dv1> := s[type=imp]/np/np : \x\y.!simp !prt !give x y !you;
dolly np := np[type=count,agr=3,count=sg] : !dolly;
her det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!her x; 
bottle np := np[type=count,agr=3,count=sg] : !bottle;
does aux := (s\np)/(s\np) : \x\y.!simp !prt !does x y;
soldiers pln := np[type=count,agr=3,count=pl] : !pl !soldier;
bring tv> := s[type=imp]/np : \x.!simp !prt !bring x !you;
here sp := s\s : \x.!loc x !here;
and x := (@x\@x)/@x : \x\y.!and x y;
Jack pn := np[type=proper,agr=3] : !Jack;
Jill pn := np[type=proper,agr=3] : !Jill;
Eve pn := np[type=proper,agr=3] : !Eve;
has tv> := (s[type=?x]\np[agr=3,count=sg])/np : \x\y.!simp !prt !have x y;
are aux := (s\np)/(s\np) : \x\y.!prt x y;
gonna aux := (s\np)/(s\np) : \x\y.!gng x y;
find tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !find x y;
there sp := s/s : \x.!loc x !there;
man np := np[type=count,agr=3,count=sg] : !man;
that det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!that x;
are tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !eq x y;
write tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !write x y;
letter np := np[type=count,agr=3,count=sg] : !letter;
pencil np := np[type=count,agr=3,count=sg] : !pencil;
in pre := (s\s)/np : \x\y.!loc y (!in x);
corner np := np[type=count,agr=3,count=sg] : !corner;
going-to aux := (s\np)/(s\np) : \x\y.!gng x y;
shoe np := np[type=count,agr=3,count=sg] : !shoe;
Racketyboom pn := np[type=proper,agr=3] : !Racketyboom;
read tv-about>:= (s[type=?x]\np)/np/"about" : \x\y\z.!simp !prt (!read _ x) y z;
choochoo np := np[type=count,agr=3,count=sg] : !choochoo;
to pre := (s\s)/np : \x\y.!loc y (!to x);
come iv> := s[type=imp] : !simp !prt !come !you;
? pun := s[type=q]\*s[type=imp] : \x.!q x;
for prex := (s\s)/np : \x\y.!aim y (!for x);
for prex := (s/s)/np : \x\y.!aim y (!for x);
lunch np := np[type=count,agr=3,count=sg] : !lunch;
top np := np[agr=3] : !top;
ducks pln := np[type=count,agr=3,count=pl] : !pl !duck;
say tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !say x y;
and x := s[type=?x]/np : \x.!and x;
what qw := np[type=qw] : !q !thing;
radio np := np[type=count,agr=3,count=sg] : !radio;
want tv> := (s[type=?x]\np)/(s\np)/np : \x\y\z.!simp !prt !want (y x z) x z;
want tv> := (s[type=?x]\np)/(s\np)/np : \x\y\z.!simp !prt !want (y x) x z;
want tv> := s[type=?x]/(s\np)/np : \x\y.!simp !prt !want (y x) x !you;
me pro := np: !I;
to x := (s\np)/(s\np) : \p\x.p x;
sit iv> := s[type=?x]\np : \x.!simp !prt !sit x;
sit iv> := s[type=?x]\np : \x.!sit x;
on pre := (s\s)/np : \x\y.!loc y (!on x);
who q := s[type=q]/(s\np) : \x.!q !subject !who x;
sitting iving> := s[type=ing]\np : \x.!cont !sit x;
Neil pn := np[type=proper,agr=3] : !Neil;
good adj := np/np : \x.!good x;
girl np := np[type=count,agr=3,count=sg] : !girl;
was tv2> := (s[type=?x]\np[count=sg])/np : \x\y.!simp !pst !eq x y;
seat np := np[type=count,agr=3,count=sg] : !seat;
are tv> := (s[type=q]/np)/np : \x\y.!simp !prt y x;
alright adj := predp : \x.!alright x;
Sambo pn := np[type=proper,agr=3] : !Sambo;
because conj := s/s : \x.!because x;
because conj := s/np : \x.!because x;
am aux := (s\np[agr=1,count=sg])/(s\np) : \x\y.!prt x y;
making tving> := (s[type=ing]\np)/np : \x\y.!cont !make x y;
lunch np := np[type=count,agr=3,count=sg] : !lunch;
hit tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !hit x y;
head np := np[type=count,agr=3,count=sg] : !head;
do aux := s[type=q]/(s\np)/np : \x\y.!q !simp !prt !do y x;
paper np := np[type=count,agr=3,count=sg] : !paper;
my det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!my x;
my x := np : !my !thing;
diaper np := np[type=count,agr=3,count=sg] : !diaper;
going iving> := s[type=ing]\np : \x.!cont !go x;
upstairs sp := s\s : \x.!loc x !upstairs;
read iv> := s[type=imp] : !simp !prt !read !you;
chair np := np[type=count,agr=3,count=sg] : !chair;
cheese un := np[type=uncount,agr=3] : !cheese;
good np := np[type=count,agr=3,count=sg] : !good;
taperecorder np := np[type=count,agr=3,count=sg] : !taperecorder;
soup un := np[type=uncount,agr=3] : !soup;
pudding un := np[type=uncount,agr=3] : !pudding;
cracker np := np[type=count,agr=3,count=sg] : !cracker;
down sp := np[type=acc] : !down;
apple np := np[type=count,agr=3,count=sg] : !apple;
does aux := s[type=q]/(s\np)/np[agr=3,count=sg] : \x\y.!q !simp !prt !does y x;
far sp := s\s : \x.!loc x !far;
celery un := np[type=uncount,agr=3] : !celery;
eats tvs> := (s[type=?x]\np[agr=3,count=sg])/np : \x\y.!simp !prt !eat x y;
she pro := np[agr=3,count=sg] : !she;
name np := np[type=count,agr=3,count=sg] : !name;
this np := np[agr=3] : !this;
dolly pn := np[type=proper,agr=3] : !dolly;
's x := (np\np)/np : \x\y.x (!of y);
spool np := np[type=count,agr=3,count=sg] : !spool;
belongs tvs-to> := (s[type=?x]\np[agr=3,count=sg])/np/"to" : \x\y\z.!simp !prt (!belong _ x) y z;
napkin np := np[type=count,agr=3,count=sg] : !napkin;
bring tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !bring x y;
bring tv> := (s[type=?x]\np)/np : \x\y.!bring x y;
kitchen np := np[type=place,agr=3,count=sg] : !kitchen;
mouth np := np[type=count,agr=3,count=sg] : !mouth;
taste tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !taste x y;
would aux := s[type=q]/(s\np)/np : \x\y.!would y x;
change tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !change x y;
record np := np[type=count,agr=3,count=sg] : !record;
fireplace p := np[type=place,agr=3,count=sg] : !fireplace;
call tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !call x y;
Granma pn := np[type=proper,agr=3] : !Granma;
called tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !call x y;
look iv> := s[type=?x]\np : \x.!simp !prt !look x;
look iv> := s[type=?x]\np : \x.!look x;
them pn := np[type=proper,agr=3] : !they;
too adv := @x\@x : \x.x !too;
Cromer pn := np[type=proper,agr=3] : !Cromer;
coffee un := np[type=uncount,agr=3] : !coffee;
coming iving> := s[type=ing]\np : \x.!cont !come x;
nice adj := np/np : \x.!nice x;
Becky pn := np[type=proper,agr=3] : !Becky;
writing tving> := (s[type=ing]\np)/np : \x\y.!cont !write x y;
fall iv> := s[type=?x]\np : \x.!simp !prt !fall x;
be tv> := (s[type=?x]\np)/predp : \x\y.!be x y;
better adj := predp : \x.!better x;
having tving> := (s[type=ing]\np)/np : \x\y.!cont !have x y;
cough np := np[type=count,agr=3,count=sg] : !cough;
banjo np := np[type=count,agr=3,count=sg] : !banjo;
floor np := np[type=count,agr=3,count=sg] : !floor;
out pre := (s\s)/np : \x\y.!loc y (!out x);
here sp := np[type=acc] : !here;
keep tv-out> := s[type=imp]/"out"/np : \x\y.!simp !prt (!keep _ y) x !you;
your det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!your x;
finger np := np[type=count,agr=3,count=sg] : !finger;
Mama pn := np[type=proper,agr=3] : !Mama;
look iv> := s[type=imp] : !simp !prt !look !you;
yours np := np[agr=3] : !yours;
gonna aux := s[type=q]/(s\np) : \x.!q !gng x;
sit iv-down := (s[type=?x]\np)/"down" : \x\y.!simp !prt (!sit _ x) y;
may mod := (s\np)/(s\np) : \x\y.!may x y;
turn tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !turn x y;
turn tv> := (s[type=?x]\np)/np : \x\y.!turn x y;
turn iv> := s[type=?x]\np : \x.!turn x;
play iv> := s[type=?x]\np : \x.!play x;
playing iving> := s[type=ing]\np : \x.!cont !play x;
hard adv := (s\np)\(s\np) : \x\y.x y !hard;
pardon tv> := s[type=imp]/np : \x.!simp !prt !pardon x !you;
see tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !see x y;
letter np := np[type=count,agr=3,count=sg] : !letter;
over pre := (s\s)/np : \x\y.!loc y (!over x);
Kathy pn := np[type=proper,agr=3] : !Kathy;
sugar un := np[type=uncount,agr=3] : !sugar;
goes ivs := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt !go x;
king np := np[type=count,agr=3,count=sg] : !king;
bear np := np[type=count,agr=3,count=sg] : !bear;
cat np := np[type=count,agr=3,count=sg] : !cat;
fox np := np[type=count,agr=3,count=sg] : !fox;
dog np := np[type=count,agr=3,count=sg] : !dog;
HumptyDumpty pn := np[type=proper,agr=3] : !HumptyDumpty;
Dumpty pn := np[type=proper,agr=3] : !Dumpty;
kitty np := np[type=count,agr=3,count=sg] : !kitty;
right adj := predp : \x.!right x;
fell tv-off> := (s[type=?x]\np)/np/"off": \x\y\z.!simp !pst (!fall _ x) y z;
well np := np[type=count,agr=3,count=sg] : !well;
horsie np := np[agr=3] : !horsie;
hurt tv> := (s[type=?x]\np)/np : \x\y.!simp !prt hurt x y;
hurt tv> := (s[type=?x]\np)/np : \x\y.!hurt x y;
fish np := np[type=count,agr=3,count=sg] : !fish;
fish pln := np[type=count,agr=3,count=pl] : !pl !fish;
they pro := np[agr=3,count=pl] : !they;
swimming iving> := s[type=ing]\np : \x.!cont !swim x;
briefcase np := np[type=count,agr=3,count=sg] : !briefcase;
play iv> := s[type=?x]\np : \x.!play x;
dance iv> := s[type=?x]\np : \x.!simp !prt !dance x;
bird np := np[type=count,agr=3,count=sg] : !bird;
hear tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !hear x y;
light un := np[type=uncount,agr=3] : !light;
horse np := np[type=count,agr=3,count=sg] : !horse;
wait iv> := s[type=imp] : !simp !prt !wait !you;
off pre := np: !off;
which qwadj := np[type=qw]/np : \x.!q x;
find tv> := s[type=imp]/np : \x.!simp !prt !find x !you;
rest un := np[type=uncount,agr=3] : !rest;
crying tving> := s[type=ing]\np : \x.!cont !cry x;
table np := np[type=count,agr=3,count=sg] : !table;
outside sp := s\s : \x.!loc x !outside;
outside sp := np[type=acc] : !outside;
was aux := (s\np)/(s\np) : \x\y.!pst x y;
unhappy adj := predp : \x.!unhappy x;
fix tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !fix x y;
Sandy pn := np[type=proper,agr=3] : !Sandy;
bibbie np := np[type=count,agr=3,count=sg] : !bibbie;
tapioca un := np[type=uncount,agr=3] : !tapioca;
forgot tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !forget x y;
spoon np := np[type=count,agr=3,count=sg] : !spoon;
breakfast un := np[type=uncount,agr=3] : !breakfast;
bed np := np[type=count,agr=3,count=sg] : !bed;
Papa pn := np[type=proper,agr=3] : !Papa;
tomato-soup un := np[type=uncount,agr=3] : !tomato-soup;
tomato np := np[type=count,agr=3,count=sg] : !tomato;
gone x := s[type=?x]\np :\x.!prft !go x;
cook tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !cook x y;
cook iv> := s[type=imp] : !simp !prt !cook !you;
wiener np := np[type=count,agr=3,count=sg] : !wiener;
dropped tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !drop x y;
skunk np := np[type=count,agr=3,count=sg] : !skunk;
pencils pln := np[type=count,agr=3,count=pl] : !pl !pencil;
Gordon pn := np[type=proper,agr=3] : !Gordon;
send tv> := s[type=imp]/np : \x.!simp !prt !send x !you;
box np := np[type=count,agr=3,count=sg] : !box;
Sheila pn := np[type=proper,agr=3] : !Sheila;
using tving> := (s[type=ing]\np)/np : \x\y.!cont !use x y;
eraser np := np[type=count,agr=3,count=sg] : !eraser;
cut tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !cut x y;
finished tv2 := (s[type=?x]\np)/np :\x\y.!simp !pst !finish x y;
cleaning un := np[type=uncount,agr=3] : !cleaning;
'd-better mod :=  (s\np)/(s\np) : \x\y.!'d-better x y;
cupboard np := np[type=count,agr=3,count=sg] : !cupboard;
ready adj := predp : \x.!ready x;
need tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !need x y;
but conj := s/s : \x.!but x;
an det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!an x;
did aux := (s\np)/(s\np) : \x\y.!simp !pst x y;
understand tv> := (s[type=?x]\np)/np : \x\y.!understand x y;
push un := np[type=uncount,agr=3] : !push;
went tv2> := s[type=?x]\np : \x.!simp !pst !go x;
to x := ((s\np)\(s\np))/(s\np) : \p\q\x.!aim (p x) q;                      
Cathy pn := np[type=proper,agr=3] : !Cathy;
else x := np[type=?x]\np[type=?x] : \x.x !else;   
candles pln := np[type=count,agr=3,count=pl] : !pl !candle;
was tv2> := s[type=q]/np/np[count=sg] :\x\y.!simp !pst y x;
sure sadv := @x/@x : \x.x !sure;
writing tving-on> := (s[type=ing]\np)/np/"on" : \x\y\z.!cont (!write _ x) y z;
crayons pln := np[type=count,agr=3,count=pl] : !pl !crayon;
give dv> := (s[type=?x]\np)/np/np : \x\y\z.!simp !prt !give x y z;
fixing tving> := s[type=ing]/np : \x.!cont !fix x !you;
lots-of adj := np/np : \x.!lots-of x;
cannot mod := (s\np)/(s\np) : \x\y.!cannot x y;
use tv> := (s[type=?x]\np)/np : \x\y.!use x y;
pegs pln := np[type=count,agr=3,count=pl] : !pl !peg;
cheese-sandwich np := np[type=count,agr=3,count=sg] : !cheese-sandwich;
hot adj := predp : \x.!hot x;
is tv> := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt x;
not x := @x\@x : \x.x !not;
have aux := s[type=q]/(s\np)/np : \x\y.!q !prt y x;
been aux := (s\np)/(s\np) : \x\y.!prft !be x y;
drawing iving> := s[type=ing]\np : \x.!cont !draw x;
grape-juice un := np[type=uncount,agr=3] : !grape-juice;
better sadv := @x/@x : \x.x !better;
fix tv> := s[type=imp]/np : \x.!simp !prt !fix x !you;
welcome adj := predp : \x.!welcome x;
another adj := np/np : \x.!another x;
now tp := s\s : \x.!time x !now;
then tp := s\s : \x.!time x !then;
now tp := np : !now;
allgone adj := predp : \x.!allgone x;
bicycle np := np[type=count,agr=3,count=sg] : !bicycle;
there sp := s\s : \x.!loc x !there;
Jim pn := np[type=proper,agr=3] : !Jim;
does tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !does x y;
funny adj := np/np : \x.!funny x;
things pln := np[type=count,agr=3,count=pl] : !pl !thing;
again sadv := @x\@x : \x.x !again;
chirps ivs := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt !chirp x;
goes x := (s[type=?x]\np[agr=3,count=sg])/(s\np) : \x\y.!simp !prt !say x y;
whistle x := s\np : \x.!whistle x;
chirp iv> := s[type=?x]\np : \x.!simp !prt !chirp x;
him pro := np: !he;
something np := np[agr=3] : !something;
duck np := np[type=count,agr=3,count=sg] : !duck;
what-else q := s[type=q]/(s/np) : \x.!q !what !else x;
lunchtime tp := np : !lunchtime;
bread un := np[type=uncount,agr=3] : !bread;
pick tv-up> := s[type=imp]/"up"/np : \x\y.!simp !prt (!pick _ y) x !you;
pick tv-up> := s[type=imp]/np/"up" : \x\y.!simp !prt (!pick _ x) y !you;
climb iv-in> := s[type=imp]/"in" : \x.!simp !prt (!climb _ x) !you; 
move iv> := s[type=?x]\np : \x.!simp !prt !move x;
right x := @x/@x : \x.!right x;
jumping iving> := s[type=ing]\np : \x.!cont !jump x;
piece np := np[type=count,agr=3,count=sg] : !piece;
sleepy adj := predp : \x.!sleepy x;
butter un := np[type=uncount,agr=3] : !butter;
noise un := np[type=uncount,agr=3] : !noise;
chirps pln := np[type=count,agr=3,count=pl] : !pl !chirp;
jump iv> := s[type=imp] : !simp !prt !jump !you;
chirp np := np[type=count,agr=3,count=sg] : !chirp;
snowman np := np[type=count,agr=3,count=sg] : !snowman;
wearing tving> := (s[type=ing]\np)/np : \x\y.!cont !wear x y;
glasses pln := np[type=count,agr=3,count=pl] : !pl !glass;
has aux := (s\np)/(s\np) : \x\y.!prt !prft x y;
gone iv3-away> := (s[type=?x]\np)/"away" : \x\y.!prft (!go _ x) y;
see tv> := s[type=imp]/np : \x.!simp !prt !see x !you;
bouillon un := np[type=uncount,agr=3] : !bouillon;
sit iv-down := s[type=imp]/"down" : \x.!simp !prt (!sit _ x) !you;
sleeping tving> := s[type=ing]\np : \x.!cont !sleep x;
laying tving> := s[type=ing]\np : \x.!cont !lay x;
clean adj := np/np : \x.!clean x;
new adj := np/np : \x.!new x;
blanket np := np[type=count,agr=3,count=sg] : !blanket;
green adj := predp : \x.!green x;
lying iving> := s[type=ing] : !cont !lie !you;
couch np := np[type=count,agr=3,count=sg] : !couch;
hold tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !hold x y;
tie tv> := s[type=imp]/np : \x.!simp !prt !tie x !you;
tie tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !tie x y;
dooc np := np[agr=3] : !dooc;
shoes pln := np[type=count,agr=3,count=pl] : !pl !shoe;
tie tv-up> := (s[type=?x]\np)/"up"/np : \x\y\z.!simp !prt (!tie _ y) x z;
dl-el-fl np := np[agr=3] : !dl-el-fl;
did tv2> := s[type=?x]\np : \x.!simp !pst !do x;
fl np := np[agr=3] : !fl;
sandwich np := np[type=count,agr=3,count=sg] : !sandwich;
almost x := @x/@x : \x.!almost x;
done adj := predp : !done;
must mod := (s\np)/(s\np) : \x\y.!must x y;
blow tv-on> := (s[type=?x]\np)/np/"on" : \x\y\z.!simp !prt (!blow _ x) y z;
shall mod := s[type=q]/(s\np)/np : \x\y.!q !shall y x;
peanutbutter un := np[type=uncount,agr=3] : !peanutbutter;
squirrels pln := np[type=count,agr=3,count=pl] : !pl !squirrel;
paddle np := np[type=count,agr=3,count=sg] : !paddle;
bite tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !bite x y;
bit tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !bite x y;
hole np := np[type=count,agr=3,count=sg] : !hole;
sorry adj := predp : \x.!sorry x;
melted iv2> := s[type=?x]\np : \x.!simp !pst !melt x;
came iv2> := s[type=?x]\np : \x.!simp !pst !come x;
comes ivs> := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt !come x;
everyday tp := s\s : \x.!time x !everyday;
eat tv> := s[type=imp]/np : \x.!simp !prt !eat x !you;
spit tv-out> := (s[type=?x]\np)/"out"/np : \x\y\z.(!spit _ y) x z;
spit tv-up> := (s[type=?x]\np)/np/"up" : \x\y\z.(!spit _ y) x z;
on adv := (s\np)\(s\np) : \x\y.!on x y;
Mom pn := np[type=proper,agr=3] : !Mom;
do aux := s[type=imp]/(s\np) : \x.!simp !prt !do x !you; 
touch tv> := (s[type=?x]\np)/np : \x\y.!touch x y;
clean tv> := s[type=imp]/np : \x.!simp !prt !clean x !you;
napkins pln := np[type=count,agr=3,count=pl] : !pl !napkin;
fell iv-down> := (s[type=?x]\np)/"down": \x\y.!simp !pst (!fall _ x) y;
yesterday tp := s\s : \x.!time x !yesterday;
sit iv-up> := (s[type=?x]\np)/"up": \x\y.!simp !prt (!sit _ x) y;
managed iv2> := s[type=?x]\np : \x.!simp !pst !manage x;
very adv := @x/@x : \x.x !very;
well sadv := @x\@x : \x.x !well;
well sadv := @x/@x : \x.x !well;
teeth pln := np[type=count,agr=3,count=pl] : !pl !tooth;
big adj := np/np : \x.!big x;
Wednesday tp := np : !Wednesday;
are tv> := s[type=q]/np : \x.!simp !prt x;
get tv-out> := (s[type=?x]\np)/"out"/np : \x\y\z.!simp !prt (!get _ y) x z;
going iving-away> := (s[type=ing]\np)/"away" : \x\y.!cont (!go _ x) y;
then tp := s/s : \x.!time x !then;
nap np := np[type=count,agr=3,count=sg] : !nap;
playing tving-with> := (s[type=ing]\np)/np/"with" : \x\y\z.!cont (!play _ x) y z;
bead np := np[type=count,agr=3,count=sg] : !bead;
beads pln := np[type=count,agr=3,count=pl] : !pl !bead;
easier adj := predp : \x.!easier x;
cookbook np := np[type=count,agr=3,count=sg] : !cookbook;
got tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !get x y;
Granny pn := np[type=proper,agr=3] : !Granny;
call tv> := s[type=imp]/np : \x.!simp !prt !call x !you;
peek iv> := s[type=imp] : !simp !prt !peek !you;
tell tv> := s[type=imp]/(s\np)/np : \x\y.!simp !prt !tell x y !you;
come iv-in := (s[type=?x]\np)/"in" : \x\y.(!come _ x) y;
standing iving-out> := (s[type=ing]\np)/"out" : \x\y.!cont (!stand _ x) y;
cold np := np[type=count,agr=3,count=sg] : !cold;
Rick pn := np[type=proper,agr=3] : !Rick;
gas-man np := np[type=count,agr=3,count=sg] : !gas-man;
want tv> := s[type=?x]/np : \x.!simp !prt !want x !you;
dolls pln := np[type=count,agr=3,count=pl] : !pl !doll;
open tv> := (s[type=?x]\np)/np : \x\y.!open x y;
bag np := np[type=count,agr=3,count=sg] : !bag;
blow iv> := s[type=imp] : !simp !prt !blow !you;
bringing tving> := s[type=ing]/np : \x.!cont !bring x !you;
both x := @x\@x : \x.x !both;
baby-doll np := np[type=count,agr=3,count=sg] : !baby-doll;
have tv> := s[type=?x]/np : \x.!simp !prt !have x !you;
clear tv-out := s[type=imp]/"out"/np : \x\y.!simp !prt (!clear _ y) x !you;
boy np := np[type=count,agr=3,count=sg] : !boy;
stay iv> := s[type=?x]\np : \x.!simp !prt !stay x;
help tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !help x y;
look tv-at := s[type=imp]/np/"at" : \x\y.!simp !prt (!look _ x) y !you;
up pre := (s\s)/np : \x\y.!loc y (!up x);
pen np := np[type=count,agr=3,count=sg] : !pen;
should mod := s[type=q]/(s\np)/np : \x\y.!q !should y x;
ring np := np[type=count,agr=3,count=sg] : !ring;
watch np := np[type=count,agr=3,count=sg] : !watch;
idea np := np[type=count,agr=3,count=sg] : !idea;
early adj := predp : \x.!early x;
stamps pln := np[type=count,agr=3,count=pl] : !pl !stamp;
giving tving> := (s[type=ing]/np)/np : \x\y.!cont !give x y !you;
Sarah pn := np[type=proper,agr=3] : !Sarah;
party np := np[type=count,agr=3,count=sg] : !party;
cake-plate np := np[type=count,agr=3,count=sg] : !cake-plate;
read tv> := s[type=imp]/np : \x.!simp !prt !read x !you;
HippityHop pn := np[type=proper,agr=3] : !HippityHop;
train np := np[type=count,agr=3,count=sg] : !train;
together sadv := @x\@x : \x.x !together;
know tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !know x y;
which xqwadj := np[type=qw,agr=?x,count=?y]/np[agr=?x,count=?y] : \x.!q x;
ones pln := np[type=count,agr=3,count=pl] : !pl !one;
envelope np := np[type=count,agr=3,count=sg] : !envelope;
walk np := np[type=count,agr=3,count=sg] : !walk;
smiling iving> := s[type=ing]\np : \x.!cont !smile x;
doily np := np[type=count,agr=3,count=sg] : !doily;
wet iv2 := s[type=?x]\np : \x.!simp !pst !wet x;
may mod := s[type=q]/(s\np)/np : \x\y.!q !may y x;
sent dv2 := (s[type=?x]\np)/np/np : \x\y\z.!simp !pst !send x y z;
card np := np[type=count,agr=3,count=sg] : !card;
Nanny pn := np[type=proper,agr=3] : !Nanny;
these np := np[agr=3] : !these;
lions pln := np[type=count,agr=3,count=pl] : !pl !lion;
spot np := np[type=count,agr=3,count=sg] : !spot;
fell iv2> := s[type=?x]\np : \x.!simp !pst !fall x;
tunnel np := np[type=count,agr=3,count=sg] : !tunnel;
little adj := np/np : \x.!little x;
friend np := np[type=count,agr=3,count=sg] : !friend;
friends pln := np[type=count,agr=3,count=pl] : !pl !friend;
bubbles pln := np[type=count,agr=3,count=pl] : !pl !bubble;
yet tp := s\s : \x.!time x !yet;
going iving-into> := (s[type=ing]\np)/np/"into" : \x\y\z.!cont (!go _ x) y z;
bank np := np[type=count,agr=3,count=sg] : !bank;
now tp := s/s : \x.!time x !now;
chocolate un := np[type=uncount,agr=3] : !chocolate;
certainly adv := @x/@x : \x.!certainly x;
eat tv-up> := (s[type=?x]\np)/"up"/np : \x\y\z.!simp !prt (!eat _ y) x z;
first conj := s\s : \x.!first x;
cracking tving> := (s[type=ing]\np)/np : \x\y.!cont !crack x y;
pear np := np[type=count,agr=3,count=sg] : !pear;
mine np := np[agr=3] : !mine;
birthday-sandwich np := np[type=count,agr=3,count=sg] : !birthday-sandwich;
birthday-cake np := np[type=count,agr=3,count=sg] : !birthday-cake;
icing np := np[type=count,agr=3,count=sg] : !icing;
lick tv-off> := s[type=imp]/"off"/np : \x\y.!simp !prt (!lick _ y) x !you;
hold tv> := s[type=imp]/np : \x.!simp !prt !hold x !you;
hands pln := np[type=count,agr=3,count=pl] : !pl !hand;
still tp := s\s : \x.!time x !still;
closet np := np[type=count,agr=3,count=sg] : !closet;
pour tv-in := s[type=imp]/"in"/np : \x\y.!simp !prt (!pour _ y) x !you;
cream un := np[type=uncount,agr=3] : !cream;
leave tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !leave x y;
leave tv> := (s[type=?x]\np)/np : \x\y.!leave x y;
lovely adj := np/np : \x.!lovely x;
whose xqwadj := np[type=qw,agr=?x,count=?y]/np[agr=?x,count=?y] : \x.x !of (!q !person);
swell adj := np/np : \x.!swell x;
snap tv> := (s[type=?x]\np)/np : \x\y.!snap x y;
lose tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !lose x y;
snap tv> := s[type=imp]/np : \x.!simp !prt !snap x !you;
do tv> := s[type=?x]/np : \x.!simp !prt do x !you;
sees ivs> := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt !see x;
ear np := np[type=count,agr=3,count=sg] : !ear;
al np := np[type=count,agr=3,count=sg] : !al;
pull tv-down> := s[type=imp]/"down"/np : \x\y.!simp !prt (!pull _ y) x !you;
pull tv-out> := (s[type=?x]\np)/"out"/np : \x\y\z.!simp !prt (!pull _ y) x z;
pull tv-out> := s[type=?x]/"out"/np : \x\y.!simp !prt (!pull _ y) x !you;
pulled tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !pull x y;
hair un := np[type=uncount,agr=3] : !hair;
drum np := np[type=count,agr=3,count=sg] : !drum;
stick np := np[type=count,agr=3,count=sg] : !stick;
kiss tv> := s[type=imp]/np : \x.!simp !prt !kiss x !you;
quite x := @x/@x : \x.!quite x;
sideways sp := s\s : \x.!loc x !sideways;
no det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!no x;
fun np := np[type=count,agr=3,count=sg] : !fun;
threw tv-away> := (s[type=?x]\np)/"away"/np : \x\y\z.!simp !pst (!throw _ y) x z;
trash un := np[type=uncount,agr=3] : !trash;
peepee iv> := s[type=imp] : !peepee !you;
belong tv-on> := (s[type=?x]\np)/np/"on" : \x\y\z.!simp !prt (!belong _ x) y z;
board np := np[type=count,agr=3,count=sg] : !board;
make tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !make x y;
words pln := np[type=count,agr=3,count=pl] : !pl !word;
were aux := (s\np)/(s\np) : \x\y.!pst x y;
watching tving> := (s[type=ing]\np)/np : \x\y.!cont !watch x y;
men pln := np[type=count,agr=3,count=pl] : !pl !man;
building tving> := (s[type=ing]\np)/np : \x\y.!cont !build x y;
building np := np[type=count,agr=3,count=sg] : !building;
going tving-into> := (s[type=ing]\np)/np/"into" : \x\y\z.!cont (!go _ x) y z;
Boston pn := np[type=proper,agr=3] : !Boston;
Saturday tp := np : !Saturday;
any det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!any x;
chew tv-up> := s[type=imp]/"up"/np : \x\y.!simp !prt (!chew _ y) x !you;
going tving-round> := s[type=ing]\np/"into" : \x\y.!cont (!go _ x) y;
okay adj := predp : \x.!okay x;
squeaky adj := np/np : \x.!squeaky x;
boat np := np[type=count,agr=3,count=sg] : !boat;
lives ivs := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt !live x;
those np := np[agr=3] : !those;
mittens pln := np[type=count,agr=3,count=pl] : !pl !mitten;
Frosty pn := np[type=proper,agr=3] : !Frosty;
melt iv> := s[type=?x]\np : \x.!simp !prt !melt x;
fell iv-off> := (s[type=?x]\np)/"off": \x\y.!simp !pst (!fall _ x) y;
bigger adj := predp : \x.!bigger x;
flipflop adv := (s\np)\(s\np) : \x\y.x y !flipflop;
Emerson pn := np[type=proper,agr=3] : !Emerson;
coming iving> := s[type=ing] : !cont !come !you;
blue adj := predp : \x.!blue x;
bit np := np[type=count,agr=3,count=sg] : !bit;
Sneezer pn := np[type=proper,agr=3] : !Sneezer;
read dv> := (s[type=?x]\np)/np/np : \x\y\z.!simp !prt !read x y z;
stories pln := np[type=count,agr=3,count=pl] : !pl !story;
has aux := s[type=q]/(s\np)/np : \x\y.!q !prt !prft y x;
draw iv> := s[type=?x]\np : \x.!simp !prt !draw x;
draw tv> := s[type=imp]/np : \x.!simp !prt !draw x !you;
abcs pln := np[type=count,agr=3,count=pl] : !pl !abc;
flower np := np[type=count,agr=3,count=sg] : !flower;
cl np := np[agr=3] : !cl;
really adv := @x/@x : \x.!really x;
bl np := np[agr=3] : !bl;
spell tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !spell x y;
spell tv> := s[type=imp]/np : \x.!simp !prt !spell x !you;
side np := np[type=count,agr=3,count=sg] : !side;
dl np := np[agr=3] : !dl;
spells tvs> := (s[type=?x]\np[agr=3,count=sg])/np : \x\y.!simp !prt !spell x y;
word np := np[type=count,agr=3,count=sg] : !word;
spelling tving> := (s[type=ing]\np)/np : \x\y.!cont !spell x y;
Joanne pn := np[type=proper,agr=3] : !Joanne;
noodle-soup un := np[type=uncount,agr=3] : !noodle-soup;
jelly adj := np/np : \x.!jelly x;
beans pln := np[type=count,agr=3,count=pl] : !pl !bean;
noise np := np[type=count,agr=3,count=sg] : !noise;
stare tv-at> := (s[type=?x]\np)/np/"at" : \x\y\z.!simp !prt (!stare _ x) y z;
coat np := np[type=count,agr=3,count=sg] : !coat;
making tving> := s[type=ing]/np : \x.!cont !make x !you;
are tv> := (s[type=?x]\np)/predp : \x\y.!simp !prt x y;
vitamin-time un := np[type=uncount,agr=3] : !vitamin-time;
vitamin un := np[type=uncount,agr=3] : !vitamin;
burned tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !burn x y;
everybody np := np[agr=3] : !everybody;
eating iving> := s[type=ing]\np : \x.!cont !eat x;
but x := (s\np)\(s\np)/np : \x\y\z.y (z !but x);
peas pln := np[type=count,agr=3,count=pl] : !pl !pea;
worry tv-about> := (s[type=?x]\np)/np/"about" : \x\y\z.(!worry _ x) y z;
outof pre := (s\s)/np : \x\y.!loc y (!outof x);
do tv> := s[type=?x]\np : \x.!simp !prt !do x;
care tv> := s[type=?x]\np : \x.!simp !prt !care x;
nobody np := np[agr=3] : !nobody;
empty adj := np/np : \x.!empty x;
tummy np := np[type=count,agr=3,count=sg] : !tummy;
drop tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !drop x y;
drop tv> := (s[type=?x]\np)/np : \x\y.!drop x y;
letters pln := np[type=count,agr=3,count=pl] : !pl !letter;
pick tv-up> := (s[type=?x]\np)/"up"/np : \x\y.!simp !prt (!pick _ y) x z;
stop iv> := s[type=imp] : !simp !prt !stop !you;
standing iving> := s[type=ing]\np : \x.!cont !stand x;
going iving-along> := (s[type=ing]\np)/"along" : \x\y.!cont (!go _ x) y;
kiss np := np[type=count,agr=3,count=sg] : !kiss;
leave tv> := s[type=imp]/np : \x.!simp !prt !leave x !you;
three-o-clock tp := np : !three-o-clock;
tablet np := np[type=count,agr=3,count=sg] : !tablet;
draw tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !draw x y;
lady np := np[type=count,agr=3,count=sg] : !lady;
mustache np := np[type=count,agr=3,count=sg] : !mustache;
is tv> := (s[type=?x]\np[agr=3,count=sg])/predp : \x\y.!simp !prt x y;
absolutely x := @x/@x : \x.!absolutely x;
jacket np := np[type=count,agr=3,count=sg] : !jacket;
long adj := np/np : \x.!long x;
fine adj := predp : \x.!fine x;
abc np := np[type=count,agr=3,count=sg] : !abc;
is tv> := (s[type=q]/np[agr=3,count=sg])/predp :\x\y.!simp !prt y x;
maybe sadv := @x/@x : \x.x !maybe;
did tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !do x y;
yesterday tp := np : !yesterday;
Pop pn := np[type=proper,agr=3] : !Pop;
belongs tvs-on> := (s[type=?x]\np[agr=3,count=sg])/"on" : \x\y.(!belong _ x) y;
nothing np := np[agr=3] : !nothing;
happened tv2-to> := (s[type=?x]\np)/np/"to" : \x\y\z.!simp !pst (!happen _ x) y z;
brown adj := np/np : \x.!brown x;
brown adj := predp : \x.!brown x;
red adj := predp : \x.!red x;
glass np := np[type=count,agr=3,count=sg] : !glass;
first conj := s/s : \x.!first x;
time un := np[type=uncount,agr=3] : !time;
Timothy pn := np[type=proper,agr=3] : !Timothy;
Timmy pn := np[type=proper,agr=3] : !Timmy;
Josh pn := np[type=proper,agr=3] : !Josh;
dirty adj := predp : \x.!dirty x;
throw tv-away> := (s[type=?x]\np)/"away"/np : \x\y\z.(!throw _ y) x z;
were aux := s[type=q]/(s\np)/np : \x\y.!q !pst y x;
playing tving-with> := s[type=ing]/np/"with" : \x\y.!cont (!play _ x) y !you;
is tv> := s[type=q]/np :\x.!simp !prt x;
pies pln := np[type=count,agr=3,count=pl] : !pl !pie;
after tp := s/s : \x.!time x !after;
take tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !take x y;
playing iving> := s[type=ing] : !cont !play !you;
taking tving-off> := s[type=ing]/"off"/np : \x\y.!cont (!take _ y) x !you;
? pun := s[type=q]\*s[type=ing] : \x.!q x;
saw tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !see x y;
squirrel np := np[type=count,agr=3,count=sg] : !squirrel;
laughing tving> := s[type=ing]\np : \x.!cont !laugh x;
funny adj := predp : \x.!funny x;
red adj := np/np : \x.!red x;
instead-of conj := @x/@x : \x.!instead-of x;
away sp := s\s : \x.!loc x !away;
going tving-for> := s[type=ing]/np/"for" : \x\y.!cont (!go _ x) y !you;
'd-like mod :=  (s\np)/(s\np) : \x\y.!'d-like x y;
patting tving> := s[type=?x]/np : \x.!cont !pat x !you;
cake np := np[type=count,agr=3,count=sg] : !cake;
hurt iv> := s[type=?x]\np : \x.!hurt x;
happiness un := np[type=uncount,agr=3] : !happiness;
getting tving-out> := (s[type=ing]\np)/"out"/np : \x\y\z.!cont (!get _ y) x z;
sliver np := np[type=count,agr=3,count=sg] : !sliver;
folding tving> := s[type=ing]/np : \x.!cont !fold x !you;
tell tv> := s[type=imp]/np : \x.!simp !prt !tell x !you;
tears pln := np[type=count,agr=3,count=pl] : !pl !tear;
wipe tv> := (s[type=?x]\np)/np : \x\y.!wipe x y;
round adj := np/np : \x.!round x;
cook np := np[type=count,agr=3,count=sg] : !cook;
turning tving> := (s[type=ing]\np)/np : \x\y.!cont !turn x y;
itself np := np[agr=3] : !itself;
made tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !make x y;
mistake np := np[type=count,agr=3,count=sg] : !mistake;
clock np := np[type=count,agr=3,count=sg] : !clock;
lock np := np[type=count,agr=3,count=sg] : !lock;
key np := np[type=count,agr=3,count=sg] : !key;
color iv> := s[type=?x]\np : \x.!simp !prt !color x;
cow np := np[type=count,agr=3,count=sg] : !cow;
thing np := np[type=count,agr=3,count=sg] : !thing;
turtle np := np[type=count,agr=3,count=sg] : !turtle;
grahamcracker np := np[type=count,agr=3,count=sg] : !grahamcracker;
eaten tv3> := (s[type=?x]\np)/np :\x\y.!prft !eat x y;
properly sadv := (s\np)\(s\np) : \x\y.x y !properly;
leaves pln := np[type=count,agr=3,count=pl] : !pl !leaf;
can mod := s[type=?x]/np : \x.!can x;
growing tving> := s[type=ing]\np : \x.!cont !grow x;
color tv-in> := (s[type=?x]\np)/"in"/np : \x\y\z.!simp !prt (!stare _ y) x z;
door np := np[type=count,agr=3,count=sg] : !door;
could mod := (s\np)/(s\np) : \x\y.!could x y;
doorway np := np[type=count,agr=3,count=sg] : !doorway;
house np := np[type=count,agr=3,count=sg] : !house;
window np := np[type=count,agr=3,count=sg] : !window;
probably sadv := @x/@x : \x.x !probably;
true adj := predp : \x.!true x;
suitcase np := np[type=count,agr=3,count=sg] : !suitcase;
house-building np := np[type=count,agr=3,count=sg] : !house-building;
say tv> := s[type=imp]/np : \x.!simp !prt !say x !you;
tore tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !tear x y;
John pn := np[type=proper,agr=3] : !John;
Murray pn := np[type=proper,agr=3] : !Murray;
Noel pn := np[type=proper,agr=3] : !Noel;
take tv> := s[type=imp]/np : \x.!simp !prt !take x !you;
bite np := np[type=count,agr=3,count=sg] : !bite;
chin np := np[type=count,agr=3,count=sg] : !chin;
blow iv-out> := s[type=imp]/"out" : \x.!simp !prt (!blow _ x) !you;
blow iv-out> := (s[type=ing]\np)/"out" : \x\y.!simp !prt (!blow _ x) y;
is tv> := (s[type=q]/predp)/np :\x\y.!simp !prt y x;
wrong adj := predp : \x.!wrong x;
eye np := np[type=count,agr=3,count=sg] : !eye;
trying tving> := (s[type=ing]\np)/np : \x\y.!cont !try x y;
knot np := np[type=count,agr=3,count=sg] : !knot;
hard sadv := (s\np)\(s\np) : \x\y.x y !hard;
lick tv> := (s[type=?x]\np)/np : \x\y.!lick x y;
trying tv> := s[type=ing]/(s\np) : \x.!cont !try (x !you) !you;
leave tv-on> := s[type=imp]/"on"/np : \x\y.!simp !prt (!leave _ y) x !you;
leave tv-on> := (s[type=?x]\np)/"on"/np : \x\y.(!leave _ y) x !you;
rubber-bands pln := np[type=count,agr=3,count=pl] : !pl !rubber-band;
taking tv> := s[type=ing]/np : \x.!cont !take x !you;
year t := np[type=time,agr=3,count=sg] : !year;
climb tv-in> := (s[type=?x]\np)/np/"in" : \x\y\z.!simp !prt (!climb _ x) y z; 
try iv> := s[type=imp] : !simp !prt !try !you;
track np := np[type=count,agr=3,count=sg] : !track;
work iv> := s[type=imp] : !simp !prt !work !you;
fast sadv := (s\np)\(s\np) : \x\y.x y !fast;
falling iv-off> := (s[type=ing]\np)/"off": \x\y.!cont (!fall _ x) y;
railroad np := np[type=count,agr=3,count=sg] : !railroad;
tripped iv2 := s[type=?x]\np : \x.!simp !pst !trip x;
sandbox np := np[type=count,agr=3,count=sg] : !sandbox;
count tv> := s[type=imp]/np : \x.!simp !prt !count x !you;
staying iving> := s[type=ing]\np : \x.!cont !stay x;
Ohio np := np[agr=3] : !Ohio;
broke tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !break x y;
bend iv> := s[type=?x]\np : \x.!bend x;
break tv> := (s[type=?x]\np)/np : \x\y.!break x y;
exactly adv := @x/@x : \x.!exactly x;
look tv-like> := (s[type=?x]\np)/np/"like" : \x\y\z.!simp !prt (!look _ x) y z;
cups pln := np[type=count,agr=3,count=pl] : !pl !cup;
moves tvs> := (s[type=?x]\np[agr=3,count=sg])/np : \x\y.!simp !prt !move x y;
blue adj := np/np : \x.!blue x;
stops ivs> := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt !stop x;
turn tv-around> := s[type=imp]/"around"/np : \x\y.!simp !prt (!turn _ y) x !you;
way np := np[type=count,agr=3,count=sg] : !way;
Monday tp := np : !Monday;
pizzeronic np := np[type=count,agr=3,count=sg] : !pizzeronic;
share tv> := (s[type=?x]\np)/np : \x\y.!share x y;
Pops pn := np[type=proper,agr=3] : !Pops;
pink adj := np/np : \x.!pink x;
needs tvs> := (s[type=?x]\np[agr=3,count=sg])/np : \x\y.!simp !prt !need x y;
pizzc tv> := s[type=imp]/np : \x.!simp !prt !pizzc x !you;
yourself np := np[agr=3] : !yourself;
blankie np := np[type=count,agr=3,count=sg] : !blankie;
blanket np := np[type=count,agr=3,count=sg] : !blanket;
sharing tving> := (s[type=ing]\np)/np : \x\y.!cont !share x y;
empty adj := predp : \x.!empty x;
raisins pln := np[type=count,agr=3,count=pl] : !pl !raisin;
pouring tving> := (s[type=ing]\np)/np : \x\y.!cont !pour x y;
clean tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !clean x y;
catch tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !catch x y;
finished tv2 := s[type=?x]\np :\x.!simp !pst !finish x;
still adv := @x/@x : \x.still x;
fizzing tving> := s[type=ing]\np : \x.!cont !fizz x;
balloon np := np[type=count,agr=3,count=sg] : !balloon;
folding tving> := (s[type=ing]\np)/np : \x\y.!cont !fold x y;
Kleenex pn := np[type=proper,agr=3] : !Kleenex;
fold tv> := (s[type=?x]\np)/np : \x\y.!fold x y;
was aux := s[type=q]/(s\np)/np : \x\y.!q !pst y x;
dirt np := np[type=count,agr=3,count=sg] : !dirt;
mud-pies pln := np[type=count,agr=3,count=pl] : !pl !mud-pie;
through pre := (s\s)/np : \x\y.!loc y (!through x);
gate np := np[type=count,agr=3,count=sg] : !gate;
be tv> := (s[type=?x]\np)/np : \x\y.y !be x;
help np := np[type=count,agr=3,count=sg] : !help;
yellow adj := np/np : \x.!yellow x;
pedalpushers np := np[type=count,agr=3,count=sg] : !pedalpushers;
spill tv> := (s[type=?x]\np)/np : \x\y.!spill x y;
towels pln := np[type=count,agr=3,count=pl] : !pl !towel;
bath-mat np := np[type=count,agr=3,count=sg] : !bath-mat;
counter np := np[type=count,agr=3,count=sg] : !counter;
big adj := predp : \x.!big x;
drawer np := np[type=count,agr=3,count=sg] : !drawer;
go iv-up> := (s[type=?x]\np)/"up" : \x\y.(!go _ x) y;
make tv> := (s[type=?x]\np)/(s\np) : \x\y.!simp !prt !make x y;
whistle iv> := s[type=?x]\np : \x.!whistle x;
peek iv-in> := s[type=imp]/"in" : \x.!simp !prt (!peek _ x) !you;
pipe np := np[type=count,agr=3,count=sg] : !pipe;
down pre := (s\s)/np : \x\y.!loc y (!down x);
numbers pln := np[type=count,agr=3,count=pl] : !pl !number;
going iving-around> := s[type=ing]\np/"around" : \x\y.!cont (!go _ x) y;
zero np := np[type=count,agr=3,count=sg] : !zero;
six np := np[type=count,agr=3,count=sg] : !six;
that x := np\np/(s\np) : \x\y.y (x y);
went iv2-by := (s[type=?x]\np)/"by" : \x\y.!simp !pst (!go _ x) y;
dish un := np[type=uncount,agr=3] : !dish;
want tv> := (s[type=?x]\np)/np : \x\y.!want x y;
am aux := s[type=q]/(s\np)/np[agr=1,count=sg] : \x\y.!q !prt y x;
do tv> := (s[type=?x]\np)/np : \x\y.!do x y;
fruit np := np[type=count,agr=3,count=sg] : !fruit;
green adj := np/np : \x.!green x;
fold tv-over>:= (s[type=?x]\np)/"over"/np : \x\y\z.(!fold _ y) x z;
wears tvs> := (s[type=?x]\np[agr=3,count=sg])/np : \x\y.!simp !prt !wear x y;
told dv2 := (s[type=?x]\np)/np/np : \x\y\z.!simp !pst !tell x y z;
yes np := np[type=count,agr=3,count=sg] : !yes;
come iv> := s[type=?x]\np : \x.!come x;
see tv> := (s[type=?x]\np)/np : \x\y.!see x y;
like tv> := (s[type=?x]\np)/np : \x\y.!like x y;
white adj := predp : \x.!white x;
bumps pln := np[type=count,agr=3,count=pl] : !pl !bump;
fixed tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !fix x y;
wear tv> := (s[type=?x]\np)/np : \x\y.!wear x y;
rubbing tving> := (s[type=ing]\np)/np : \x\y.!cont !rub x y;
eyes pln := np[type=count,agr=3,count=pl] : !pl !eye;
saying tving> := (s[type=ing]\np)/s : \x\y.!cont !say x y;
hear tv> := (s[type=?x]\np)/np : \x\y.!hear x y;
day np := np[type=count,agr=3,count=sg] : !day;
said tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !say x y;
pictures pln := np[type=count,agr=3,count=pl] : !pl !picture;
have tv> := (s[type=?x]\np)/np : \x\y.!have x y;
rice un := np[type=uncount,agr=3] : !rice;
say tv> := (s[type=?x]\np)/np : \x\y.!say x y;
morning np := np[type=count,agr=3,count=sg] : !morning;
go iv-away> := (s[type=?x]\np)/"away" : \x\y.(!go _ x) y;
rice-soup un := np[type=uncount,agr=3] : !rice-soup;
spilled tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !spill x y;
bone np := np[type=count,agr=3,count=sg] : !bone;
chicken-bone np := np[type=count,agr=3,count=sg] : !chicken-bone;
took tv2-out> := (s[type=?x]\np)/"out"/np : \x\y\z.!simp !pst (!take _ y) x z;
chew tv-up> := (s[type=?x]\np)/"up"/np : \x\y\z.(!chew _ y) x z;
eat tv> := (s[type=?x]\np)/np : \x\y.!eat x y;
crackers pln := np[type=count,agr=3,count=pl] : !pl !cracker;
chew tv-off> := (s[type=?x]\np)/"off"/np : \x\y\z.!simp !prt (!chew _ y) x z;
meat un := np[type=uncount,agr=3] : !meat;
bite tv-off> := (s[type=?x]\np)/"off"/np : \x\y\z.!simp !pst (!bite _ y) x z;
getting tving> := (s[type=ing]\np)/np : \x\y.!cont !get x y;
all sadv := @x\@x : \x.x !all;
going iving-down> := (s[type=ing]\np)/"down" : \x\y.!cont (!go _ x) y;
be tv> := s[type=imp]/predp : \x.!simp !prt !be x !you;
be tv> := s[type=imp]/np : \x.!simp !prt !be x !you;
careful adj := predp : \x.!careful x;
anything np := np[agr=3] : !anything;
care tv> := s[type=?x]\np : \x.!care x;
fine adv := (s\np)\(s\np) : \x\y.x y !fine;
sing iv> := s[type=?x]\np : \x.!sing x;
ironed tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !iron x y;
trade tv> := (s[type=?x]\np)/np : \x\y.!trade x y;
tonight tp := s/s : \x.!time x !tonight;
jammies pln := np[type=count,agr=3,count=pl] : !pl !jammie;
somersault np := np[type=count,agr=3,count=sg] : !somersault;
turn tv> := s[type=imp]/np : \x.!simp !prt !turn x !you;
was tv2> := (s[type=?x]\np[count=sg])/predp : \x\y.!simp !pst x y;
good adj := predp : \x.!good x;
cut tv> := (s[type=?x]\np)/np : \x\y.!cut x y;
afterwards tp := s\s : \x.!time x !afterwards;
some np := np[agr=3] : !some;
Nancy pn := np[type=proper,agr=3] : !Nancy;
haircut np := np[type=count,agr=3,count=sg] : !haircut;
only adj := np/np : \x.!only x;
candle np := np[type=count,agr=3,count=sg] : !candle;
belong tv-in> := (s[type=?x]\np)/np/"in" : \x\y\z.(!belong _ x) y z;
couches pln := np[type=count,agr=3,count=pl] : !pl !couch;
make tv> := (s[type=?x]\np)/np : \x\y.!make x y;
bite tv> := s[type=imp]/np : \x.!simp !prt !bite x !you;
singing tving> := (s[type=ing]\np)/np : \x\y.!cont !sing x y;
sing tv> := s[type=imp]/np : \x.!simp !prt !sing x !you;
us pro := np : !we;
sing tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !sing x y;
start iv> := s[type=?x]\np : \x.!simp !prt !start x;
awfully adv := @x/@x : \x.!awfully x;
glad adj := predp : \x.!glad x;
inside sp := np[type=acc] : !inside;
climb iv-in> := s[type=?x]/np/"in" : \x\y.!simp !prt (!climb _ x) y !you; 
highchair np := np[type=count,agr=3,count=sg] : !highchair;
wipe tv-off> := (s[type=?x]\np)/"off"/np : \x\y\z.(!wipe _ y) x z;
wipe tv-off> := s[type=imp]/"off"/np : \x\y.(!wipe _ y) x !you;
scratch np := np[type=count,agr=3,count=sg] : !scratch;
elbow np := np[type=count,agr=3,count=sg] : !elbow;
seeds pln := np[type=count,agr=3,count=pl] : !pl !seed;
did tv2> := (s[type=q]/np)/np : \x\y.!simp !pst !do x y;
vegetable-soup un := np[type=uncount,agr=3] : !vegetable-soup;
vaccine np := np[type=count,agr=3,count=sg] : !vaccine;
Taffy pn := np[type=proper,agr=3] : !Taffy;
too adv := @x/@x : \x.!too x;
tongue np := np[type=count,agr=3,count=sg] : !tongue;
gruyere-cheese un := np[type=uncount,agr=3] : !gruyere-cheese;
peel tv> := (s[type=?x]\np)/np : \x\y.!peel x y;
sitting iving> := s[type=ing] : !cont !sit !you;
pepper un := np[type=uncount,agr=3] : !pepper;
clay un := np[type=uncount,agr=3] : !clay;
dinosaur np := np[type=count,agr=3,count=sg] : !dinosaur;
take tv-up> := (s[type=?x]\np)/"up"/np : \x\y\z.(!take _ y) x z;
either sadv := @x\@x : \x.x !either;
fan np := np[type=count,agr=3,count=sg] : !fan;
fans pln := np[type=count,agr=3,count=pl] : !pl !fan;
particularly adv := (s\np)/(s\np) : \x\y.x y !particularly;
these det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!these x;
people pln := np[type=count,agr=3,count=pl] : !pl !person;
all adj := np/np : \x.!all x;
grownups pln := np[type=count,agr=3,count=pl] : !pl !grownup;
daughter np := np[type=count,agr=3,count=sg] : !daughter;
daughters pln := np[type=count,agr=3,count=pl] : !pl !daughter;
family np := np[type=count,agr=3,count=sg] : !family;
called tv3 := (s[type=?x]\np)/np : \x\y.!called x y;
old adj := np/np : \x.!old x;
meeting iving> := s[type=ing]\np : \x.!cont !meet x;
once sadv := @x\@x : \x.x !once;
take tv> := (s[type=?x]\np)/np : \x\y.!take x y;
nap un := np[type=uncount,agr=3] : !nap;
taking tving> := (s[type=ing]\np)/np : \x\y.!cont !take x y;
tomorrow tp := s\s : \x.!time x !tomorrow;
dripping iving> := s[type=ing]\np : \x.!cont !drip x;
spigot np := np[type=count,agr=3,count=sg] : !spigot;
finish tv> := s[type=imp]/np : \x.!simp !prt !finish x !you;
only adv := (s\np)/(s\np) : \x\y.x y !only;
hurry iv-up> := s[type=imp]/"up" : \x.!simp !prt (!hurry _ x) !you;
tomorrow tp := s/s : \x.!time x !tomorrow;
coming iv-back> := (s[type=?x]\np)/"back" : \x\y.!cont (!come _ x) y;
round adj := np/np : \x.!round x;
sleeves pln := np[type=count,agr=3,count=pl] : !pl !sleeve;
short adj := predp : \x.!short x;
woke iv2-up> := (s[type=?x]\np)/"up" : \x\y.!simp !pst (!wake _ x) y;
from pre := (s\s)/np : \x\y.!loc y (!from x);
dirty adj := np/np : \x.!dirty x;
feet np := np[type=count,agr=3,count=sg] : !feet;
bandaid np := np[type=count,agr=3,count=sg] : !bandaid;
leave iv-on> := (s[type=?x]\np)/"on" : \x\y.(!leave _ x) y;
want tv-off> := (s[type=?x]\np)/"off"/np : \x\y\z.!simp !prt (!want _ y) x z;
take tv-off> := (s[type=?x]\np)/"off"/np : \x\y\z.(!take _ y) x z;
silly adj := predp : \x.!silly x;
front np := np[type=count,agr=3,count=sg] : !front;
pillow np := np[type=count,agr=3,count=sg] : !pillow;
pad np := np[type=count,agr=3,count=sg] : !pad;
brand-new adj := np/np : \x.!brand-new x;
forget tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !forget x y;
though conj := s\s : \x.!though x;
'd aux := (s\np)/(s\np) : \x\y.!'d x y;
boot np := np[type=count,agr=3,count=sg] : !boot;
write tv> := (s[type=?x]\np)/np : \x\y.!write x y;
wash tv-off := s[type=imp]/"off"/np : \x\y.!simp !prt (!wash _ y) x !you;
make tv> := s[type=imp]/np : \x.!simp !prt !make x !you;
hungry adj := predp : \x.!hungry x;
are tv> := (s[type=q]/predp)/np : \x\y.!simp !prt y x;
lying iving> := s[type=ing]\np : \x.!cont !lie x;
maam np := np[type=count,agr=3,count=sg] : !maam;
EveCummings pn := np[type=proper,agr=3] : !EveCummings;
talking iving> := s[type=ing]\np : \x.!cont !talk x;
nice adj := predp : \x.!nice x;
her pro := np: !she;
laying iving-down> := (s[type=ing]\np)/"down" : \x\y.!cont (!lay _ x) y;
rattles pln := np[type=count,agr=3,count=pl] : !pl !rattle;
getting diving> := (s[type=ing]\np)/np/np : \x\y\z.!cont !get x y z;
keep tv-off> := (s[type=?x]\np)/"off"/np : \x\y\z.(!keep _ y) x z;
sometimes tp := s/s : \x.!time x !sometimes;
listens ivs> := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt !listen x;
somebody np := np[agr=3] : !somebody;
tell tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !tell x y;
chocolate-cookie np := np[type=count,agr=3,count=sg] : !chocolate-cookie;
Gloria pn := np[type=proper,agr=3] : !Gloria;
at pre := (s\s)/np : \x\y.!loc y (!at x);
peek tv-at> := s[type=imp]/np/"at" : \x\y.!simp !prt (!peek _ x) y !you;
peek tving-at> := (s[type=ing]\np)/np/"at" : \x\y.!cont (!peek _ x) y !you;
peek iv-around> := s[type=imp]/"around" : \x.!simp !prt (!peek _ x) !you;
drink tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !drink x y;
need tv> := (s[type=?x]\np)/np : \x\y.!need x y;
drink tv> := s[type=imp]/np : \x.!simp !prt !drink x !you;
airplane np := np[type=count,agr=3,count=sg] : !airplane;
work iv> := s[type=?x]\np : \x.!work x;
plane np := np[type=count,agr=3,count=sg] : !plane;
camera-spool np := np[type=count,agr=3,count=sg] : !camera-spool;
jar np := np[type=count,agr=3,count=sg] : !jar;
kind np := np[type=count,agr=3,count=sg] : !kind;
their det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!their x;
hats pln := np[type=count,agr=3,count=pl] : !pl !hat;
story np := np[type=count,agr=3,count=sg] : !story;
tell dv-about := s[type=imp]/np/"about"/np : \x\y\z.!simp !prt (!tell _ y) x z !you;
burro np := np[type=count,agr=3,count=sg] : !burro;
working iving> := s[type=ing]\np : \x.!cont !work x;
gone iv3-away := (s[type=?x]\np)/"away" : \x\y.!prft (!go _ x) y;
newspaper np := np[type=count,agr=3,count=sg] : !newspaper;
Humm pn := np[type=proper,agr=3] : !Humm;
song np := np[type=count,agr=3,count=sg] : !song;
sing tv> := (s[type=?x]\np)/np : \x\y.!sing x y;
eating tving> := (s[type=ing]\np)/np : \x\y.!cont !eat x y;
eating tving> := s[type=ing]/np : \x.!cont !eat x !you;
parsley un := np[type=uncount,agr=3] : !parsley;
looking tving-at> := (s[type=ing]\np)/"at"/np : \x\y\z.!cont (!look _ y) x z;
bacon un := np[type=uncount,agr=3] : !bacon;
fell iv-down> := s[type=?x]/"down": \x.!simp !pst (!fall _ x) !you;
children pln := np[type=count,agr=3,count=pl] : !pl !child;
find tv> := (s[type=?x]\np)/np : \x\y.!find x y;
trying tv> := (s[type=ing]\np)/(s\np) : \x\y.!cont !try (x y) y;
are tv> := s[type=?x]\np : \x.!simp !prt x;
those det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!those x;
tell tv> := (s[type=?x]\np)/np/np : \x\y\z.!tell x y z;
ball np := np[type=count,agr=3,count=sg] : !ball;
indeed adj := predp : \x.!indeed x;
baby-sister np := np[type=count,agr=3,count=sg] : !baby-sister;
cry iv> := s[type=?x]\np : \x.!cry x;
laugh iv> := s[type=?x]\np : \x.!laugh x;
dingdong-dell np := np[type=count,agr=3,count=sg] : !dingdong-dell;
cart np := np[type=count,agr=3,count=sg] : !cart;
flying iving> := s[type=ing]\np : \x.!cont !fly x;
Colin pn := np[type=proper,agr=3] : !Colin;
fingers pln := np[type=count,agr=3,count=pl] : !pl !finger;
lollipop np := np[type=count,agr=3,count=sg] : !lollipop;
listening tving-to> := (s[type=ing]\np)/np/"to" : \x\y\z.!cont (!listen _ x) y z;
reading tving> := (s[type=ing]\np)/np : \x\y.!cont !read x y;
reading tving> := s[type=ing]\np : \x.!cont !read x;
doggies pln := np[type=count,agr=3,count=pl] : !pl !doggy;
buses pln := np[type=count,agr=3,count=pl] : !pl !bus;
lot np := np[type=count,agr=3,count=sg] : !lot;
down sp := s\s : \x.!loc x !down;
wait tv-for> := (s[type=?x]\np)/np/"for" : \x\y\z.(!wait _ x) y z;
get tv> := (s[type=?x]\np)/np : \x\y.!get x y;
already adv := (s\np)/(s\np) : \x\y.x y !already;
zwieback np := np[type=count,agr=3,count=sg] : !zwieback;
bumped tv2-into> := (s[type=?x]\np)/np/"into" : \x\y\z.!simp !pst (!bump _ x) y z;
God pn := np[type=proper,agr=3] : !God;
Helga pn := np[type=proper,agr=3] : !Helga;
after pre := (s\s)/np : \x\y.y (!after x);
lobster-salad un := np[type=uncount,agr=3] : !lobster-salad;
tell tv> := (s[type=?x]\np)/np : \x\y.!tell x y;
wash tv> := (s[type=?x]\np)/np : \x\y.!wash x y;
wedding np := np[type=count,agr=3,count=sg] : !wedding;
inside pre := (s\s)/np : \x\y.!loc y (!inside x);
forget tv> := (s[type=?x]\np)/np : \x\y.!forget x y;
nursery-rhyme np := np[type=count,agr=3,count=sg] : !nursery-rhyme;
talking tving-to> := (s[type=ing]\np)/np/"to" : \x\y\z.!cont (!talk _ x) y z;
pulling tving-down> := (s[type=ing]\np)/"down"/np : \x\y\z.!cont (!pull _ y) x z;
falling iving> := s[type=ing]\np : \x.!cont !fall x;
foot np := np[type=count,agr=3,count=sg] : !foot;
picture np := np[type=count,agr=3,count=sg] : !picture;
statue np := np[type=count,agr=3,count=sg] : !statue;
come iv-back~in> := (s[type=?x]\np)/"back~in" : \x\y.!simp !prt (!come _ x) y;
play iv> := s[type=imp] : !simp !prt !play !you;
pushing iving> := s[type=ing]/np : \x.!cont !push x !you;
pushing tving-around> := s[type=ing]/"around"/np : \x\y.!cont (!push _ y) x !you;
push tv-around> := s[type=imp]/"around"/np : \x\y.!simp !prt (!push _ y) x !you;
and x := np/np : \x.!and x;
Eve-Cummings pn := np[type=proper,agr=3] : !Eve-Cummings;
running iving> := s[type=ing] : !cont !run !you;
round adv := (s\np)\(s\np) : \x\y.x y !round;
rain un := np[type=uncount,agr=3] : !rain;
hurts ivs> := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt !hurt x;
Colingc pn := np[type=proper,agr=3] : !Colingc;
fingernail np := np[type=count,agr=3,count=sg] : !fingernail;
hangnail np := np[type=count,agr=3,count=sg] : !hangnail;
caught tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !catch x y;
probably adv := (s\np)/(s\np) : \x\y.x y !probably;
read tv> := (s[type=?x]\np)/np : \x\y.!read x y;
like tv> := (s[type=?x]\np)/(s\np)/np : \x\p\y.!simp !prt !like (p x) y;
flowers pln := np[type=count,agr=3,count=pl] : !pl !flower;
drawing tving> := (s[type=ing]\np)/np : \x\y.!cont !draw x y;
draw tv> := (s[type=?x]\np)/np : \x\y.!draw x y;
bouncy adj := np/np : \x.!bouncy x;
well adv := (s\np)\(s\np) : \x\y.x y !well;
bus np := np[type=count,agr=3,count=sg] : !bus;
sailingboat np := np[type=count,agr=3,count=sg] : !sailingboat;
looks tv-like> := (s[type=?x]\np[agr=3,count=sg])/np/"like" : \x\y\z.!simp !prt (!look _ x) y z;
be iv> := s[type=?x]\np : \x.!be x;
both det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!both x;
funnels pln := np[type=count,agr=3,count=pl] : !pl !funnel;
bus-stop np := np[type=count,agr=3,count=sg] : !bus-stop;
probably adv := (s\np)\(s\np) : \x\y.x y !probably;
Baabaablacksheep pn := np[type=proper,agr=3] : !Baabaablacksheep;
market un := np[type=uncount,agr=3] : !market;
Exeter pn := np[type=proper,agr=3] : !Exeter;
got tv3> := (s[type=?x]\np)/np : \x\y.!prft !get x y;
or conj := s/s : \x.!or x;
washed tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !wash x y;
right sadv := (s\np)\(s\np) : \x\y.x y !right;
moment np := np[type=count,agr=3,count=sg] : !moment;
mayonnaise un := np[type=uncount,agr=3] : !mayonnaise;
tree np := np[type=count,agr=3,count=sg] : !tree;
end np := np[type=count,agr=3,count=sg] : !end;
refrigerator np := np[type=count,agr=3,count=sg] : !refrigerator;
taste tv> := s[type=imp]/np : \x.!simp !prt !taste x !you;
clean tv-off> := s[type=imp]/"off"/np : \x\y.!simp !prt (!clean _ y) x !you;
wonderful adj := predp : \x.!wonderful x;
finished adj := predp : \x.!finished x;
cookie-press np := np[type=count,agr=3,count=sg] : !cookie-press;
cookies pln := np[type=count,agr=3,count=pl] : !pl !cookie;
climb iv-in> := (s[type=imp]\np)/"in" : \x\y.!simp !prt (!climb _ x) y !you; 
like tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !like x y;
tomatoes pln := np[type=count,agr=3,count=pl] : !pl !tomato;
so conj := s/s : \x.!so x;
long adj := predp : \x.!long x;
bent iv3-over> := (s[type=?x]\np)/"over" : \x.!prft (!bend _ x) y;
found tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !find x y;
giving dving> := (s[type=?x]\np)/np/np : \x\y\z.!cont !give x y z;
noodles pln := np[type=count,agr=3,count=pl] : !pl !noodle;
minute np := np[type=count,agr=3,count=sg] : !minute;
warm adj := predp : \x.!warm x;
mug np := np[type=count,agr=3,count=sg] : !mug;
clown np := np[type=count,agr=3,count=sg] : !clown;
works ivs := s[type=?x]\np[agr=3,count=sg] : \x.!simp !pst !work x;
nose np := np[type=count,agr=3,count=sg] : !nose;
write tv> := s[type=imp]/np : \x.!simp !prt !write x !you;
now adv := @x\@x : \x.x !now;
finish iv> := s[type=imp] : !simp !prt !finish !you;
quickly adv := @x\@x : \x.x !quickly;
hit tv> := (s[type=?x]\np)/np : \x\y.!hit x y;
which q := s[type=q]/(s[type=q]/np)/np : \x\y.!q !which x y;
best adv := @x\@x : \x.x !best;
fixed tv2> := s[type=?x]/np : \x.!simp !pst !fix x !you;
own adj := np/np : \x.!own x;
garage np := np[type=count,agr=3,count=sg] : !garage;
went iv2-to := s[type=imp]/np/"to" : \x\y.!simp !pst (!go _ x) y !you;
went iv2-to := (s[type=?x]\np)/np/"to" : \x\y\z.!simp !pst (!go _ x) y z;
subway np := np[type=count,agr=3,count=sg] : !subway;
subways pln := np[type=count,agr=3,count=pl] : !pl !subway;
am tv> := s[type=q]/predp/np[agr=1,count=sg] : \x\y.!q !prt y x;
looking iving-around> := (s[type=ing]\np)/"around" : \x\y.!cont (!look _ x) y;
tomato-sandwich np := np[type=count,agr=3,count=sg] : !tomato-sandwich;
peeping iving-out> := (s[type=ing]\np)/"out" : \x\y.!cont (!peep _ x) y;
peeking iving-out> := (s[type=ing]\np)/"out" : \x\y.!cont (!peek _ x) y;
noises pln := np[type=count,agr=3,count=pl] : !pl !noise;
hurt iv> := s[type=?x]\np : \x.!simp !pst !hurt x;
whose q := s[type=q]/(s/np) : \x.!q !whose x;
pulling tving> := (s[type=ing]\np)/np : \x\y.!cont !pull x y;
said x := (s\np)/s : \x\y.!simp !pst !say x y;
short adj := np/np : \x.!short x;
hair un := np[type=uncount,agr=3] : !hair;
part np := np[type=count,agr=3,count=sg] : !part;
write dv> := (s[type=?x]\np)/np/np : \x\y.!write x y;
write dv> := s[type=imp]/np/np : \x\y.!simp !prt !write x z !you;
ears pln := np[type=count,agr=3,count=pl] : !pl !ear;
oh conj := s/s : \x.!oh x;
look tv-through> := (s[type=?x]\np)/np/"through" : \x\y\z.!simp !prt (!look _ x) y z;
'd aux := s[type=q]/(s\np)/np : \x\y.!q !!d y x;
to pre := (s\s)/np : \x\y.y (!to x);
Ruko pn := np[type=proper,agr=3] : !Ruko;
slips ivs-right~off := (s[type=?x]\np[agr=3,count=sg])/"right~off" : \x\y.!simp !prt (!slip _ x) y;
fine adv := @x\@x : \x.x !fine;
after-all conj := s/s : \x.!after-all x;
'd-better aux := (s\np)/(s\np) : \x\y.!'d-better x y;
throw tv> := (s[type=?x]\np)/np : \x\y.!throw x y;
pears pln := np[type=count,agr=3,count=pl] : !pl !pear;
pineapple-dessert np := np[type=count,agr=3,count=sg] : !pineapple-dessert;
cereal un := np[type=uncount,agr=3] : !cereal;
while x := s/s : \x.!time !while x;
Fizzie pn := np[type=proper,agr=3] : !Fizzie;
iced adj := np/np : \x.!iced x;
tea un := np[type=uncount,agr=3] : !tea;
rabbit np := np[type=count,agr=3,count=sg] : !rabbit;
Colorado np := np[agr=3] : !Colorado;
coming iv-back> := (s[type=ing]\np)/"back" : \x\y.!cont (!come _ x) y;
Cambridge np := np[agr=3] : !Cambridge;
NewBrunswick pn := np[type=proper,agr=3] : !NewBrunswick;
England np := np[agr=3] : !England;
Benny pn := np[type=proper,agr=3] : !Benny;
bandaid np := np[type=count,agr=3,count=sg] : !bandaid;
beach np := np[type=count,agr=3,count=sg] : !beach;
eggnog np := np[type=count,agr=3,count=sg] : !eggnog;
medicine un := np[type=uncount,agr=3] : !medicine;
was tv2> := s[type=q]/predp/np[count=sg] :\x\y.!simp !pst y x;
sick adj := predp : \x.!sick x;
moving tving> := (s[type=ing]\np)/np : \x\y.!cont !move x y;
rug np := np[type=count,agr=3,count=sg] : !rug;
heavy adj := predp : \x.!heavy x;
today tp := np : !today;
peanutbutter-sandwich np := np[type=count,agr=3,count=sg] : !peanutbutter-sandwich;
shoot tv> := s[type=imp]/np : \x.!simp !prt !shoot x !you;
shooting tving> := (s[type=ing]\np)/np : \x\y.!cont !shoot x y;
thumb np := np[type=count,agr=3,count=sg] : !thumb;
bang tv> := s[type=imp]/np : \x.!simp !prt !bang x !you;
dessert un := np[type=uncount,agr=3] : !dessert;
lemon np := np[type=count,agr=3,count=sg] : !lemon;
run iv> := s[type=imp] : !simp !prt !run !you;
David pn := np[type=proper,agr=3] : !David;
wise adj := np/np : \x.!wise x;
stay iv-up> := (s[type=?x]\np)/"up" : \x\y.!simp !prt (!stay _ x) y;
accident np := np[type=count,agr=3,count=sg] : !accident;
open tv> := s[type=imp]/np : \x.!simp !prt !open x !you;
candy np := np[type=count,agr=3,count=sg] : !candy;
wastebasket np := np[type=count,agr=3,count=sg] : !wastebasket;
look tv-at := (s[type=?x]\np)/np/"at" : \x\y\z.!simp !prt (!look _ x) y z;
look tv-at := (s[type=?x]\np)/np/"at" : \x\y\z.(!look _ x) y z;
sit iv-up> := s[type=imp]/"up" : \x.!simp !prt (!sit _ x) !you;
straight adv := @x\@x : \x.x !straight;
paint iv> := s[type=?x]\np : \x.!paint x;
paint tv> := (s[type=?x]\np)/np : \x\y.!paint x y;
next adj := np/np : \x.!next x;
do tv> := s[type=imp]/np : \x.!simp !prt do x !you;
belongs tvs-in> := (s[type=?x]\np[agr=3,count=sg])/np/"in" : \x\y\z.!simp !prt (!belong _ x) y z;
blouse np := np[type=count,agr=3,count=sg] : !blouse;
goose np := np[type=count,agr=3,count=sg] : !goose;
snap un := np[type=uncount,agr=3] : !snap;
buttons pln := np[type=count,agr=3,count=pl] : !pl !button;
back np := np[type=count,agr=3,count=sg] : !back;
fire np := np[type=count,agr=3,count=sg] : !fire;
move tv> := (s[type=?x]\np)/np : \x\y.!move x y;
hand np := np[type=count,agr=3,count=sg] : !hand;
left adj := np/np : \x.!left x;
fork np := np[type=count,agr=3,count=sg] : !fork;
penny np := np[type=count,agr=3,count=sg] : !penny;
pockets pln := np[type=count,agr=3,count=pl] : !pl !pocket;
come iv> := s[type=?x]\np : \x.!simp !prt !come x;
toes pln := np[type=count,agr=3,count=pl] : !pl !toe;
better adv := (s\np)/(s\np) : \x\y.x y !better;
take tv-along> := (s[type=?x]\np)/"along"/np : \x\y\z.!simp !prt (!take _ y) x z;
downstairs sp := np[type=acc] : !downstairs;
straight adj := predp : \x.!straight x;
up adv := @x/@x : \x.!up x;
get tv-out> := (s[type=?x]\np)/"out"/np : \x\y\z.(!get _ y) x z;
got tv2-out> := (s[type=?x]\np)/"out"/np : \x\y\z.!simp !pst (!get _ y) x z;
enough adj := predp : \x.!enough x;
cry iv> := s[type=?x]\np : \x.!simp !prt !cry x;
silly adj := np/np : \x.!silly x;
great adj := predp : \x.!great x;
better adv := (s\np)\(s\np) : \x\y.x y !better;
draw iv> := s[type=?x]\np : \x.!simp !prt !draw x;
helps tv> := (s[type=?x]\np[agr=3,count=sg])/(s\np)/"to"/np : \x\y\z.!simp !prt !help (y !- x) x z;
try iv> := s[type=?x]\np : \x.!simp !prt !try x;
holes pln := np[type=count,agr=3,count=pl] : !pl !hole;
fix tv> := (s[type=?x]\np)/np : \x\y.!fix x y;
remember tv> := s[type=imp]/np : \x.!simp !prt !remember x !you;
walk iv> := s[type=?x]\np : \x.!walk x;
talking tving-to> := (s[type=ing]\np)/np/"to" : \x\y\z.!cont (!talk _ x) y z;
supper un := np[type=uncount,agr=3] : !supper;
awake adj := predp : \x.!awake x;
our det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!our x;
Grandpa pn := np[type=proper,agr=3] : !Grandpa;
Peter pn := np[type=proper,agr=3] : !Peter;
wants tvs> := (s[type=?x]\np[agr=3,count=sg])/np : \x\y.!simp !prt !want x y;
egg np := np[type=count,agr=3,count=sg] : !egg;
salt un := np[type=uncount,agr=3] : !salt;
buy tv> := (s[type=?x]\np)/np : \x\y.!buy x y;
Schroeder pn := np[type=proper,agr=3] : !Schroeder;
am tv> := s[type=?x]\np[agr=1,count=sg] : \x.!simp !prt x;
was tv2> := s[type=?x]\np[count=sg] : \x.!simp !pst x;
Dinah pn := np[type=proper,agr=3] : !Dinah;
basement np := np[type=count,agr=3,count=sg] : !basement;
coolpop np := np[type=count,agr=3,count=sg] : !coolpop;
trying iving> := s[type=ing]\np : \x.!cont !try x;
mailman np := np[type=count,agr=3,count=sg] : !mailman;
Julie pn := np[type=proper,agr=3] : !Julie;
sent tv2 := (s[type=?x]\np)/np : \x\y.!simp !pst !send x y;
eat iv> := s[type=?x]\np : \x.!simp !prt !eat x;
would aux := (s\np)/(s\np) : \x\y.!would x y;
cooking tving> := (s[type=ing]\np)/np : \x\y.!cont !cook x y;
icecube n := n[type=count,agr=3,count=sg] : !icecube;
icecubes pln := np[type=count,agr=3,count=pl] : !pl !icecube;
icecube-trays pln := np[type=count,agr=3,count=pl] : !pl !icecube-tray;
terribly sadv := @x/@x : \x.x !terribly;
wait iv> := s[type=?x]\np : \x.!simp !prt !wait x;
guess iv> := s[type=imp] : !simp !prt !guess !you;
bubble np := np[type=count,agr=3,count=sg] : !bubble;
carrots pln := np[type=count,agr=3,count=pl] : !pl !carrot;
sorely sadv := @x/@x : \x.x !sorely;
disappointed adj := predp : \x.!disappointed x;
working tv-at := (s[type=?x]\np)/np/"at" : \x\y\z.!cont (!work _ x) y z;
awhile tp := s\s : \x.!time x !awhile;
should mod := (s\np)/(s\np) : \x\y.!should x y;
snap iv> := s[type=imp] : !simp !prt !snap !you;
ashtray np := np[type=count,agr=3,count=sg] : !ashtray;
so-long sadv := @x\@x : \x.x !so-long;
climb iv-over> := s[type=imp]/"over" : \x.!simp !prt (!climb _ x) !you;
sit iv> := s[type=imp] : !simp !prt !sit !you;
complicated adj := np/np : \x.!complicated x;
Jackie pn := np[type=proper,agr=3] : !Jackie;
barefoot adv := (s\np)\(s\np) : \x\y.x y !barefoot;
play iv> := s[type=?x]\np : \x.!simp !prt !play x;
can np := np[type=count,agr=3,count=sg] : !can;
come iv-off := (s[type=?x]\np)/"off" : \x\y.(!come _ x) y;
think tv-off> := (s[type=?x]\np)/np/"off" : \x\y\z.(!think _ x) y z;
had tv2> := (s[type=?x]\np)/np : \x\y.!prft !have x y;
tell dv-about := (s[type=?x]\np)/np/"about"/np : \x\y\z\w.!simp !prt (!tell _ y) x z w;
okkay adj := predp : \x.!okkay x;
mean tv> := (s[type=?x]\np)/np : \x\y.!mean x y;
shut tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !shut x y;
shut tv> := (s[type=?x]\np)/np : \x\y.!shut x y;
move tv> := s[type=imp]/np : \x.!simp !prt !move x !you;
bring dv> := (s[type=?x]\np)/np/np : \x\y\z.!simp !prt !bring y x z;
bring dv> := (s[type=?x]\np)/np/np : \x\y\z.!bring y x z;
pretty adj := np/np : \x.!pretty x;
cans pln := np[type=count,agr=3,count=pl] : !pl !can;
shut tv> := s[type=imp]/np : \x.!simp !prt !shut x !you;
catch tv> := s[type=imp]/np : \x.!simp !prt !catch x !you;
hold tv> := (s[type=?x]\np)/np : \x\y.!hold x y;
garbage np := np[type=count,agr=3,count=sg] : !garbage;
drink tv> := (s[type=?x]\np)/np : \x\y.!drink x y;
swim iv> := s[type=imp] : !simp !prt !swim !you;
lay iv-down := s[type=imp]/"down" : \x.!simp !prt (!lay _ x) !you;
pottie np := np[type=count,agr=3,count=sg] : !pottie;
excuse tv> := s[type=imp]/np : \x.!simp !prt !excuse x !you;
page np := np[type=count,agr=3,count=sg] : !page;
backwards sp := s\s : \x.!loc x !backwards;
turn iv-around> := s[type=imp]/"around" : \x.!simp !prt (!turn _ x) !you;
pillows pln := np[type=count,agr=3,count=pl] : !pl !pillow;
come iv-over := s[type=imp]/"over" : \x.!simp !prt (!come _ x) !you;
move tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !move x y;
custard np := np[type=count,agr=3,count=sg] : !custard;
drink np := np[type=count,agr=3,count=sg] : !drink;
eating iving> := s[type=ing] : !cont !eat !you;
touch iv> := s[type=imp] : !simp !prt !touch !you;
noodle np := np[type=count,agr=3,count=sg] : !noodle;
tired adj := predp : \x.!tired x;
bumped tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !bump x y;
bumped tv2> := s[type=?x]/np : \x.!simp !pst !bump x !you;
cutting tving> := (s[type=ing]\np)/np : \x\y.!cont !cut x y;
pumpkin np := np[type=count,agr=3,count=sg] : !pumpkin;
cook tv> := (s[type=?x]\np)/np : \x\y.!cook x y;
wrote dv2> := (s[type=?x]\np)/np/np : \x\y\z.!simp !pst !write x y z;
help tv> := (s[type=?x]\np)/np : \x\y.!help x y;
happenning iving> := s[type=ing]\np : \x.!cont !happen x;
machine np := np[type=count,agr=3,count=sg] : !machine;
watch tv> := (s[type=?x]\np)/np : \x\y.!watch x y;
washingmachine np := np[type=count,agr=3,count=sg] : !washingmachine;
watch tv> := s[type=imp]/np : \x.!simp !prt !watch x !you;
tinkertoy-can np := np[type=count,agr=3,count=sg] : !tinkertoy-can;
tinkertoy np := np[type=count,agr=3,count=sg] : !tinkertoy;
tinkertoys pln := np[type=count,agr=3,count=pl] : !pl !tinkertoy;
gun np := np[type=count,agr=3,count=sg] : !gun;
clean adj := predp : \x.!clean x;
see tv> := s[type=?x]/np : \x.!simp !prt !see x !you;
eat iv> := s[type=?x]\np : \x.!eat x;
read iv> := s[type=?x]\np : \x.!read x;
eat tv> := s[type=?x]/np : \x.!simp !prt !eat x !you;
butterfly np := np[type=count,agr=3,count=sg] : !butterfly;
teddybear np := np[type=count,agr=3,count=sg] : !teddybear;
dear np := np[type=count,agr=3,count=sg] : !dear;
stir tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !stir x y;
stir tv> := (s[type=?x]\np)/np : \x\y.!stir x y;
muffin np := np[type=count,agr=3,count=sg] : !muffin;
spoons pln := np[type=count,agr=3,count=pl] : !pl !spoon;
change tv> := s[type=?x]/np : \x.!simp !prt !change x !you;
lay iv> := s[type=?x]\np : \x.!simp !prt !lay x;
get tv-out> := (s[type=?x]\np)/np/"out" : \x\y\z.!simp !prt (!get _ x) y z;
watch tv> := s[type=?x]/np : \x.!simp !prt !watch x !you;
watch tv> := (s[type=?x]\np)/np : \x\y.!simp !prt watch x y;
hold tv-off> := (s[type=?x]\np)/np/"off" : \x\y\z.(!hold _ x) y z;
take tv-apart> := s[type=imp]/"apart"/np : \x\y.(!take _ y) x !you;
dancing iving> := s[type=ing]\np : \x.!cont !dance x;
turn iv-around> := (s[type=?x]\np)/"around" : \x\y.(!turn _ x) y;
around sp := np[type=acc] : !around;
LadyBump pn := np[type=proper,agr=3] : !LadyBump;
still adv := (s\np)\(s\np) : \x\y.x y !still;
so-much det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!so-much x;
wipe tv> := s[type=imp]/np : \x.!simp !prt !wipe x !you;
look tv> := s[type=?x]/np : \x.!simp !prt !look x !you;
wipe dv-off> := (s[type=?x]\np)/np/"off"/np : \x\y\z\w.(!wipe _ y) x z w;
tore iv2 := s[type=?x]\np : \x.!simp !pst !tear x;
umbrella np := np[type=count,agr=3,count=sg] : !umbrella;
gonna aux := s[type=q]/(s\np) : \x.!q !gng x;
sit iv-down := (s[type=?x]\np)/"down" : \x\y.(!sit _ x) y;
step iv-back := (s[type=?x]\np)/"back" : \x\y.(!step _ x) y;
off pre := (s\s)/np : \x\y.!loc y (!off x);
come iv-on := s[type=imp]/"on" : \x.!simp !prt (!come _ x) !you;
had tv> := s[type=?x]/np : \x.!simp !pst !have x !you;
happy adj := predp : \x.!happy x;
emptying tving> := (s[type=ing]\np)/np : \x\y.!cont !empty x y;
grape np := np[type=count,agr=3,count=sg] : !grape;
truck np := np[type=count,agr=3,count=sg] : !truck;
stay iv-down := (s[type=?x]\np)/"down" : \x\y.!simp !prt (!stay _ x) y;
dear x := @x\@x : \x.x !dear;
peek tv-with> := (s[type=?x]\np)/np/"with" : \x\y\z.(!peek _ x) y z;
crayon np := np[type=count,agr=3,count=sg] : !crayon;
fat adj := np/np : \x.!fat x;
magic un := np[type=uncount,agr=3] : !magic;
awful adj := predp : \x.!awful x;
drew tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !draw x y;
write tv> := s[type=?x]/np : \x.!simp !prt !write x !you;
Fizzie pn := np[type=proper,agr=3] : !Fizzie;
matter np := np[type=count,agr=3,count=sg] : !matter;
toy np := np[type=count,agr=3,count=sg] : !toy;
rattle np := np[type=count,agr=3,count=sg] : !rattle;
twist tv> := s[type=imp]/np : \x.!simp !prt !twist x !you;
thank tv> := (s[type=?x]\np)/np : \x\y.!thank x y;
jello un := np[type=uncount,agr=3] : !jello;
eyebrows pln := np[type=count,agr=3,count=pl] : !pl !eyebrow;
face np := np[type=count,agr=3,count=sg] : !face;
beautiful adj := np/np : \x.!beautiful x;
looking tving-out> := (s[type=ing]\np)/np/"out" : \x\y\z.!cont (!look _ x) y z;
dresses pln := np[type=count,agr=3,count=pl] : !pl !dress;
dress np := np[type=count,agr=3,count=sg] : !dress;
popsicle np := np[type=count,agr=3,count=sg] : !popsicle;
Momma pn := np[type=proper,agr=3] : !Momma;
waving tving-to> := (s[type=?x]\np)/np/"to" : \x\y\z.!cont (!wave _ x) y z;
leg np := np[type=count,agr=3,count=sg] : !leg;
give dv> := (s[type=?x]\np)/np/np : \x\y\z.!give x y z;
indigestion un := np[type=uncount,agr=3] : !indigestion;
falling tv-off> := (s[type=ing]\np)/np/"off": \x\y\z.!cont (!fall _ x) y z;
near adj := np/np : \x.!near x;
silly np := np[type=count,agr=3,count=sg] : !silly;
teething iving> := s[type=ing]\np : \x.!cont !teeth x;
jump np := np[type=count,agr=3,count=sg] : !jump;
close tv> := (s[type=?x]\np)/np : \x\y.!close x y;
many det := np[type=?x,agr=?y,count=?z]/np[type=?x,agr=?y,count=?z] : \x.!many x;
kinds pln := np[type=count,agr=3,count=pl] : !pl !kind;
go iv-back> := s[type=imp]/"back" : \x.(!go _ x) !you;
soon tp := s\s : \x.!time x !soon;
exercise np := np[type=count,agr=3,count=sg] : !exercise;
kiss tv> := (s[type=?x]\np)/np : \x\y.!kiss x y;
coming iv-down> := (s[type=ing]\np)/"down" : \x\y.!cont (!come _ x) y;
pitcher np := np[type=count,agr=3,count=sg] : !pitcher;
slip tv-on> := s[type=imp]/"on"/np : \x\y.(!slip _ y) x !you;
orange adj := np/np : \x.!orange x;
finish tv> := (s[type=?x]\np)/np : \x\y.!finish x y;
Sara pn := np[type=proper,agr=3] : !Sara;
top tv> := (s[type=?x]\np)/np : \x\y.!top x y;
baby-noise n := n[type=count,agr=3,count=sg] : !baby-noise;
sock-slippers pln := np[type=count,agr=3,count=pl] : !pl !sock-slipper;
sign tv> := s[type=imp]/np : \x.!simp !prt !sign x !you;
hear tv> := s[type=?x]/np : \x.!simp !prt !hear x !you;
like pre := (s\np)\(s\np)/np : \x\y\z. y z (!like x);
toe np := np[type=count,agr=3,count=sg] : !toe;
toes pln := np[type=count,agr=3,count=pl] : !pl !toe;
stand iv> := s[type=?x]\np : \x.!simp !prt !stand x;
bigger adj := np/np : \x.!bigger x;
arm np := np[type=count,agr=3,count=sg] : !arm;
open tv> := s[type=?x]/np : \x.!simp !prt !open x !you;
used tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !use x y;
holding tving> := (s[type=ing]\np)/np : \x\y.!cont !hold x y;
catch tv> := (s[type=?x]\np)/np : \x\y.!catch x y;
Lassie pn := np[type=proper,agr=3] : !Lassie;
never adv := (s\np)/(s\np) : \x\y.!never x y;
heard tv3 := (s[type=?x]\np)/np : \x\y.!prft hear x y;
read tv-to>:= (s[type=?x]\np)/np/"to" : \x\y\z.!simp !prt (!read _ x) y z;
Rangy pn := np[type=proper,agr=3] : !Rangy;
lap np := np[type=count,agr=3,count=sg] : !lap;
gopher n := n[type=count,agr=3,count=sg] : !gopher;
pages pln := np[type=count,agr=3,count=pl] : !pl !page;
bring tv> := s[type=imp]/np/np : \x\y.!simp !prt !bring x y !you;
necessary adj := predp : \x.!necessary x;
stove np := np[type=count,agr=3,count=sg] : !stove;
furniture np := np[type=count,agr=3,count=sg] : !furniture;
shelf np := np[type=count,agr=3,count=sg] : !shelf;
carrot np := np[type=count,agr=3,count=sg] : !carrot;
bowl np := np[type=count,agr=3,count=sg] : !bowl;
throwing tving> := (s[type=ing]\np)/np : \x\y.!cont !throw x y;
by pre := (s\s)/np : \x\y.y (!by x);
tower np := np[type=count,agr=3,count=sg] : !tower;
build tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !build x y;
running iving> := s[type=ing]\np : \x.!cont !run x;
today tp := s\s : \x.!time x !today;
improves tvs> := (s[type=?x]\np[agr=3,count=sg])/np : \x\y.!simp !prt !improve x y;
greatly adv := (s\np)\(s\np) : \x\y.x y !greatly;
drop tv> := s[type=imp]/np : \x.!simp !prt !drop x !you;
block np := np[type=count,agr=3,count=sg] : !block;
pin tv> := (s[type=?x]\np)/np : \x\y.!pin x y;
coming iving-outof> := s[type=ing]/np/"outof" : \x\y.!cont (!come _ x) y !you;
up sp := np[type=acc] : !up;
climb iv> := s[type=?x]\np : \x.!climb x;
climb iv-up> := s[type=imp]/"up" : \x.!simp !prt (!climb _ x) !you;
answer tv> := (s[type=?x]\np)/np : \x\y.!answer x y;
Natalie pn := np[type=proper,agr=3] : !Natalie;
sock np := np[type=count,agr=3,count=sg] : !sock;
move iv> := s[type=?x]\np : \x.!move x;
into pre := (s\s)/np : \x\y.!loc y (!into x);
room np := np[type=count,agr=3,count=sg] : !room;
go iv-on> := s[type=imp]/"on" : \x.(!go _ x) !you;
move iv> := s[type=imp] : !simp !prt !move !you;
take tv-out> := s[type=imp]/"out"/np : \x\y.(!take _ y) x !you;
take tv-outof> := s[type=imp]/"outof"/np : \x\y.(!take _ y) x !you;
bringing dving> := (s[type=ing]\np)/np/np : \x\y\z.!cont !give x y z;
climb tv-in> := (s[type=?x]\np)/"in" : \x\y.!simp !prt (!climb _ x) y;
find tv> := (s[type=?x]\np)/np/np : \x\y\z.!find x y z;
banana np := np[type=count,agr=3,count=sg] : !banana;
nuts pln := np[type=count,agr=3,count=pl] : !pl !nut;
crack tv> := (s[type=?x]\np)/np : \x\y.!crack x y;
hammer np := np[type=count,agr=3,count=sg] : !hammer;
use tv> := s[type=imp]/np : \x.!simp !prt !use x !you;
cracked tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !crack x y;
crack tv> := s[type=?x]/np : \x.!simp !prt !crack x !you;
lying iving-down> := (s[type=ing]\np)/"down" : \x\y.!cont (!lie _ x) y;
sweater np := np[type=count,agr=3,count=sg] : !sweater;
difference np := n[type=count,agr=3,count=sg] : !difference;
swing iv> := s[type=?x]\np : \x.!swing x;
gimme tv> := s[type=imp]/np : \x.!simp !prt !gimme x !you;
all-the-same adj := predp : \x.!all-the-same x;
game np := np[type=count,agr=3,count=sg] : !game;
coffee-pot np := np[type=count,agr=3,count=sg] : !coffee-pot;
jump iv> := s[type=?x]\np : \x.!simp !prt !jump x;
jump iv> := s[type=?x]\np : \x.!jump x;
looking iving> := s[type=ing]\np : \x.!cont !look x;
dance np := np[type=count,agr=3,count=sg] : !dance;
bowel-movement n := n[type=count,agr=3,count=sg] : !bowel-movement;
change tv> := (s[type=?x]\np)/np : \x\y.!change x y;
haha conj := s/s : \x.x;
pennies pln := np[type=count,agr=3,count=pl] : !pl !penny;
swing iv> := s[type=?x] : !simp !prt !swing !you;
climb iv-down> := s[type=imp]/"down" : \x.!simp !prt (!climb _ x) !you; 
sleep iv> := s[type=?x] : !simp !prt !sleep !you;
sleep iv> := s[type=?x]\np : \x.!simp !prt !sleep x;
take tv-away> := (s[type=?x]\np)/"away"/np : \x\y\z.(!take _ y) x z;
go iv-in> := (s[type=?x]\np)/"in" : \x\y.!simp !prt (!go _ x) y;
count tv> := (s[type=?x]\np)/np : \x\y.!count x y;
off adv := (s\np)\(s\np) : \x\y.x y !off;
music un := np[type=uncount,agr=3] : !music;
livingroom np := np[type=count,agr=3,count=sg] : !livingroom;
vanilla np := np[type=count,agr=3,count=sg] : !vanilla;
rockingchair np := np[type=count,agr=3,count=sg] : !rockingchair;
lost adj := predp : \x.!lost x;
orange-peel un := np[type=uncount,agr=3] : !orange-peel;
peel iv> := s[type=imp] : !simp !prt !peel !you;
bouillon-cubes pln := np[type=count,agr=3,count=pl] : !pl !bouillon-cube;
came iv2-back> := (s[type=?x]\np)/"back" : \x\y.!simp !pst (!come _ x) y;
bottom np := np[type=count,agr=3,count=sg] : !bottom;
puzzle np := np[type=count,agr=3,count=sg] : !puzzle;
Clipclop pn := np[type=proper,agr=3] : !Clipclop;
clip np := np[type=count,agr=3,count=sg] : !clip;
coin np := np[type=count,agr=3,count=sg] : !coin;
baseball-coin np := np[type=count,agr=3,count=sg] : !baseball-coin;
pocket np := np[type=count,agr=3,count=sg] : !pocket;
baseball np := np[type=count,agr=3,count=sg] : !baseball;
what xqwadj := np[type=qw,agr=?x,count=?y]/np[agr=?x,count=?y] : \x.!q x;
sweetie np := np[type=count,agr=3,count=sg] : !sweetie;
come iv-back> := (s[type=?x]\np)/"back" : \x\y.(!come _ x) y;
icing un := np[type=uncount,agr=3] : !icing;
go iv-in> := s[type=imp]/"in" : \x.!simp !prt (!go _ x) !you;
wait iv> := s[type=?x] : !simp !prt !wait !you;
decorating tving> := (s[type=ing]\np)/np : \x\y.!cont !decorate x y;
ham np := np[type=count,agr=3,count=sg] : !ham;
Hummthehamster pn := np[type=proper,agr=3] : !Hummthehamster;
goldfish np := np[type=count,agr=3,count=sg] : !goldfish;
hiding iving> := s[type=ing]\np : \x.!cont !hide x;
blocks pln := np[type=count,agr=3,count=pl] : !pl !block;
hamburger np := np[type=count,agr=3,count=sg] : !hamburger;
go x := (s[type=?x]\np)/s : \x\y.!simp !prt !say x y;
OldMacdonald pn := np[type=proper,agr=3] : !OldMacdonald;
sheep np := np[type=count,agr=3,count=sg] : !sheep;
dropped iv2> := s[type=?x]\np : \x.!simp !pst !drop x;
Frostythesnowman pn := np[type=proper,agr=3] : !Frostythesnowman;
snowballs pln := np[type=count,agr=3,count=pl] : !pl !snowball;
scarf np := np[type=count,agr=3,count=sg] : !scarf;
mittens pln := np[type=count,agr=3,count=pl] : !pl !mitten;
skating iving> := s[type=ing] : !cont !skate !you;
came iv2-off> := (s[type=?x]\np)/"off" : \x\y.!simp !pst (!come _ x) y;
policeman np := np[type=count,agr=3,count=sg] : !policeman;
chicks pln := np[type=count,agr=3,count=pl] : !pl !chick;
donkey n := n[type=count,agr=3,count=sg] : !donkey;
donkeys pln := np[type=count,agr=3,count=pl] : !pl !donkey;
apple np := np[type=count,agr=3,count=sg] : !apple;
apples pln := np[type=count,agr=3,count=pl] : !pl !apple;
apple-trees pln := np[type=count,agr=3,count=pl] : !pl !apple-tree;
elephant np := np[type=count,agr=3,count=sg] : !elephant;
bunny np := np[type=count,agr=3,count=sg] : !bunny;
doggie np := np[type=count,agr=3,count=sg] : !doggy;
rooster n := n[type=count,agr=3,count=sg] : !rooster;
roosters pln := np[type=count,agr=3,count=pl] : !pl !rooster;
cow np := np[type=count,agr=3,count=sg] : !cow;
cows pln := np[type=count,agr=3,count=pl] : !pl !cow;
sways ivs := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt !sway x;
dustpan np := np[type=count,agr=3,count=sg] : !dustpan;
jump tv-off> := s[type=imp]/np/"off" : \x.!simp !prt (!jump _ x) y !you;
icing tving> := (s[type=ing]\np)/np : \x\y.!cont !ice x y;
giraffe np := np[type=count,agr=3,count=sg] : !giraffe;
car np := np[type=count,agr=3,count=sg] : !car;
sailboat np := np[type=count,agr=3,count=sg] : !sailboat;
cats pln := np[type=count,agr=3,count=pl] : !pl !cat;
doing tving> := s[type=ing]/np : \x.!cont !do x;
splashing iving> := s[type=ing]\np : \x.!cont !splash x;
digging tving> := (s[type=ing]\np)/np : \x\y.!cont !dig x y;
bug np := np[type=count,agr=3,count=sg] : !bug;
popcorn un := np[type=uncount,agr=3] : !popcorn;
smell tv> := s[type=imp]/np : \x.!simp !prt !smell x !you;
smelling tving> := s[type=ing]/np : \x.!cont !smell x;
heat un := np[type=uncount,agr=3] : !heat;
stylus np := np[type=count,agr=3,count=sg] : !stylus;
draw tv> := s[type=?x]/np : \x.!simp !prt !draw x !you;
carry tv> := s[type=?x]/np : \x.!simp !prt !carry x !you;
carry tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !carry x y;
bowels pln := np[type=count,agr=3,count=pl] : !pl !bowel;
away sp := s\s : \x.!loc x !away;
feed tv> := (s[type=?x]\np)/np : \x\y.!feed x y;
Froggy pn := np[type=proper,agr=3] : !Froggy;
having tving> := s[type=ing]/np : \x.!cont !have x;
whole adj := np/np : \x.!whole x;
week np := np[type=count,agr=3,count=sg] : !week;
cold adj := predp : \x.!cold x;
wake iv-up> := (s[type=?x]\np)/"up" : \x\y.(!wake _ x) y;
olive np := np[type=count,agr=3,count=sg] : !olive;
missed tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !miss x y;
first adj := np/np : \x.!first x;
string np := np[type=count,agr=3,count=sg] : !string;
waking iv-up> := (s[type=ing]\np)/"up" : \x\y.!cont (!wake _ x) y;
sound iv-like> := (s[type=?x]\np)/np/"like" : \x\y\z.(!sound _ x) y z;
firetruck np := np[type=count,agr=3,count=sg] : !firetruck;
comfortable adj := predp : \x.!comfortable x;
swimming iving> := s[type=ing] : !cont !swim;
bath np := np[type=count,agr=3,count=sg] : !bath;
bathrobe np := np[type=count,agr=3,count=sg] : !bathrobe;
bathtub np := np[type=count,agr=3,count=sg] : !bathtub;
swim iv> := s[type=?x]\np : \x.!simp !prt !swim x;
knee np := np[type=count,agr=3,count=sg] : !knee;
paper-bag np := np[type=count,agr=3,count=sg] : !paper-bag;
paper-clip np := np[type=count,agr=3,count=sg] : !paper-clip;
go iv-to := (s[type=?x]\np)/np/"to" : \x\y\z.!simp !prt (!go _ x) y z;
sneezes pln := np[type=count,agr=3,count=pl] : !pl !sneeze;
sneeze iv> := s[type=imp] : !simp !prt !sneeze !you;
sitting iving-down> := (s[type=ing]\np)/"down" : \x\y.!cont (!sit _ x) y;
ride tv> := (s[type=?x]\np)/np : \x\y.!ride x y;
fun adj := predp : \x.!fun x;
Judy pn := np[type=proper,agr=3] : !Judy;
squashing iving> := s[type=ing]\np : \x.!cont !squash x;
noisy adj := predp : \x.!noisy x;
reel np := np[type=count,agr=3,count=sg] : !reel;
can np := np[type=count,agr=3,count=sg] : !can;
shoving iving> := s[type=ing]\np : \x.!cont !shove x;
pans pln := np[type=count,agr=3,count=pl] : !pl !pan;
around sp := s\s : \x.!loc x !around;
mouthful np := np[type=count,agr=3,count=sg] : !mouthful;
mess np := np[type=count,agr=3,count=sg] : !mess;
messy adj := np/np : \x.!messy x;
pickle np := np[type=count,agr=3,count=sg] : !pickle;
blow iv> := s[type=?x]\np : \x.!blow x;
tomorrow tp := np : !tomorrow;
moving tving> := s[type=ing]\np : \x.!cont !move x;
rockabye-baby np := np[agr=3] : !rockabye-baby;
rockabye np := np[type=count,agr=3,count=sg] : !rockabye;
pick tv-out> := s[type=imp]/"out"/np : \x\y.!simp !prt (!pick _ y) x !you;
tiger np := np[type=count,agr=3,count=sg] : !tiger;
zebra np := np[type=count,agr=3,count=sg] : !zebra;
read dv> := (s[type=?x]\np)/np/np : \x\y\z.!read x y z;
wipe tv> := s[type=?x]/np : \x.!simp !prt !wipe x !you;
tape un := np[type=uncount,agr=3] : !tape;
changing tving> := s[type=ing]/np : \x.!cont !change x !you;
burp iv> := s[type=?x]\np : \x.!burp x;
burped iv2> := s[type=?x]\np : \x.!simp !pst !burp x;
nipple np := np[type=count,agr=3,count=sg] : !nipple;
eat iv> := s[type=imp] : !simp !prt !eat !you;
thirsty adj := predp : \x.!thirsty x;
turn np := np[type=count,agr=3,count=sg] : !turn;
slipped iv2> := s[type=?x]\np : \x.!simp !pst !slip x;
slipped iv2> := s[type=?x] : !simp !pst !slip !you;
button np := np[type=count,agr=3,count=sg] : !button;
see tv> := s[type=?x]/np : \x.!simp !prt !see x !you;
got tv2> := s[type=?x]/np : \x.!simp !pst !get x !you;
drinks tvs> := (s[type=?x]\np[agr=3,count=sg])/np : \x\y.!simp !prt !drink x y;
mixing tving> := s[type=ing]/np : \x.!cont !mix x !you;
fixing tving> := (s[type=ing]\np)/np : \x\y.!cont !fix x y;
Danny pn := np[type=proper,agr=3] : !Danny;
ringing tving> := s[type=ing] : !cont !ring !you;
Marcia pn := np[type=proper,agr=3] : !Marcia;
Goldrush pn := np[type=proper,agr=3] : !Goldrush;
Tequita pn := np[type=proper,agr=3] : !Tequita;
alone adv := (s\np)\(s\np) : \x\y.x y !alone;
take tv-off := s[type=imp]/"off"/np : \x\y.(!take _ y) x !you;
Linda pn := np[type=proper,agr=3] : !Linda;
animals pln := np[type=count,agr=3,count=pl] : !pl !animal;
feed tv> := s[type=imp]/np : \x.!simp !prt !feed x !you;
raccoons pln := np[type=count,agr=3,count=pl] : !pl !raccoon;
hay un := np[type=uncount,agr=3] : !hay;
barking iving> := s[type=ing]\np : \x.!cont !bark x;
hump iv> := s[type=imp] : !simp !prt !hump x !you;
icecream-cone np := np[type=count,agr=3,count=sg] : !icecream-cone;
icecream un := np[type=uncount,agr=3] : !icecream;
besides x := (np\np)/np : \x\y.y (!besides x);
trouble np := np[type=count,agr=3,count=sg] : !trouble;
loose adj := predp : \x.!loose x;
Chicago np := np[type=count,agr=3,count=sg] : !Chicago;
ruining tving> := (s[type=ing]\np)/np : \x\y.!cont !ruin x y;
straighten tv> := s[type=imp]/np : \x.!simp !prt !straighten x !you;
socks pln := np[type=count,agr=3,count=pl] : !pl !sock;
Snoopy pn := np[type=proper,agr=3] : !Snoopy;
broom np := np[type=count,agr=3,count=sg] : !broom;
shovel tv> := s[type=imp]/np : \x.!simp !prt !shovel x !you;
snow un := np[type=uncount,agr=3] : !snow;
boots pln := np[type=count,agr=3,count=pl] : !pl !boot;
panties pln := np[type=count,agr=3,count=pl] : !pl !panty;
lay iv> := s[type=imp] : !simp !prt !lay !you;
bedroom p := n[type=place,agr=3,count=sg] : !bedroom;
turn iv-over>:= (s[type=?x]\np)/"over" : \x\y.(!turn _ y) x;
al-bl-cl np := np[agr=3] : !al-bl-cl;
eh conj := s/s : \x.x;
knob np := np[type=count,agr=3,count=sg] : !knob;
crash iv> := s[type=imp] : !simp !prt !crash !you;
smile tv-at := s[type=imp]/np/"at" : \x\y.!simp !prt (!smile _ x) y !you;
jammies pln := np[type=count,agr=3,count=pl] : !pl !jammie;
radiator n := n[type=count,agr=3,count=sg] : !radiator;
rocking tving> := (s[type=ing]\np)/np : \x\y.!cont !rock x y;
pull tv> := (s[type=?x]\np)/np : \x\y.!pull x y;
Valentine pn := np[type=proper,agr=3] : !Valentine;
used tv3> := (s[type=?x]\np)/np :\x\y.!prft !use x y;
shovel np := np[type=count,agr=3,count=sg] : !shovel;
sugar-top np := np[type=count,agr=3,count=sg] : !sugar-top;
box-top np := np[type=count,agr=3,count=sg] : !box-top;
teapot np := np[type=count,agr=3,count=sg] : !teapot;
goat np := np[type=count,agr=3,count=sg] : !goat;
before tp := s\s : \x.!time x !before;
tonight tp := np : !tonight;
cover np := np[type=count,agr=3,count=sg] : !cover;
kangaroo np := np[type=count,agr=3,count=sg] : !kangaroo;
ribbon np := np[type=count,agr=3,count=sg] : !ribbon;
walking iving> := s[type=ing]\np : \x.!cont !walk x;
bell np := np[type=count,agr=3,count=sg] : !bell;
wagon np := np[type=count,agr=3,count=sg] : !wagon;
blasting iving> := s[type=ing]\np : \x.!cont !blast x;
forgot tv2> := s[type=?x]/np : \x.!simp !pst !forget x !you;
loud adj := np/np : \x.!loud x;
boom np := np[type=count,agr=3,count=sg] : !boom;
Kix pn := np[type=proper,agr=3] : !Kix;
chocolate-icecream un := np[type=uncount,agr=3] : !chocolate-icecream;
need tv> := s[type=?x]/np : \x.!simp !prt !need x !you;
get tv-in> := (s[type=?x]\np)/"in"/np : \x\y\z.(!get _ y) x z;
messy adj := predp : \x.!messy x;
tail np := np[type=count,agr=3,count=sg] : !tail;
curly adj := np/np : \x.!curly x;
bit np := np[type=count,agr=3,count=sg] : !bit;
open adj := predp : \x.!open x;
go iv-ahead> := s[type=imp]/"ahead" : \x.!simp !prt (!go _ x) !you;
looked tv2> := (s[type=?x]\np)/np : \x\y.!simp !pst !look x y;
were tv> := s[type=?x]\np : \x.!simp !pst x;
shaking tving> := s[type=ing]/np : \x.!cont !shake x;
sponge np := np[type=count,agr=3,count=sg] : !sponge;
step iv-outof := s[type=imp]/"outof"/np : \x\y.(!step _ y) x !you;
step iv-out := s[type=imp]/"out" : \x.(!step _ x) !you;
cried iv2> := s[type=?x]\np : \x.!simp !pst !cry x;
check np := np[type=count,agr=3,count=sg] : !check;
say tv> := s[type=imp]/s : \x.!simp !prt !say x !you;
everything np := np[agr=3] : !everything;
take tv-back> := (s[type=?x]\np)/"back"/np : \x\y\z.!simp !prt (!take _ y) x z;
move tv-out> := (s[type=?x]\np)/"out"/np : \x\y\z.(!move _ y) x z;
pinch tv> := (s[type=?x]\np)/np : \x\y.!pinch x y;
moved iv2> := s[type=?x]\np : \x.!simp !pst !move x;
cool tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !cool x y;
dry tv> := s[type=imp]/np : \x.!simp !prt !dry x !you;
blow tv-on> := s[type=imp]/np/"on" : \x\y.!simp !prt (!blow _ x) y !you;
before pre := (s\s)/np[type=time] : \x\y.!time y (!before x);
food np := np[type=count,agr=3,count=sg] : !food;
chocolate-icecream un := np[type=uncount,agr=3] : !chocolate-icecream;
eats tvs> := s[type=?x]\np[agr=3,count=sg] : \x.!simp !prt !eat x;
upstairs sp := np[type=acc] : !upstairs;
have tv> := s[type=imp]/np : \x.!simp !prt !have x !you;
pick tv> := (s[type=?x]\np)/np : \x\y.!pick x y;
other adj := np/np : \x.!other x;
has tvs-on> := (s[type=?x]\np[agr=3,count=sg])/"on" : \x\y.(!have _ x) y;
got tv-on> := (s[type=?x]\np)/"on"/np : \x\y\z.!simp !pst (!get _ y) x z;
does tv> := s[type=?x]/np : \x.!does x;
Margaret pn := np[type=proper,agr=3] : !Margaret;
because x := s/s : \x.!because x;
what qw := s : !-what-;
stick tv-in>:= s[type=imp]/np/"in"/np : \x\y\z.!simp !prt (!stick _ y) x z !you;
gravy un := np[type=uncount,agr=3] : !gravy;
ask tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !ask x y;
run iv-back> := (s[type=?x]\np)/"back" : \x\y.!simp !prt (!run _ x) y;
out adv := (s\np)\(s\np) : \x\y.x y !out;
already tp := s\s : \x.!time x !already;
% hello expr := s : !-hello-;
% perhaps expr := s : !-perhaps-;
% maybe expr := s : !-maybe-;
% quick expr := s : !-quick-;
% hard expr := s : !-hard-;
% almost expr := s : !-almost-;
% quite expr := s : !-quite-;
% yet expr := s : !-yet-;
% again expr := s : !-again-;
% later expr := s : !-later-;
% already expr := s : !-already-;
% sortof expr := s : !-sortof-;
% el-vl-el interj := s : !-el-vl-el-;
% mmo interj := s : !-mmo-;
% mm interj := s : !-mm-;
% mooo interj := s : !-mooo-;
% cockadoodledooo interj := s : !-cockadoodledooo-;
% No expr := s : !-No-;
what q := s[type=q]/(s[type=q]/np) : \x.!q !what x;
were aux := (s/np)/(s/np) : \x.!pst x;
doing tving> := s[type=ing]/np : \x.!cont !do x !you;
see tv> := s[type=?x]/s : \x.!simp !prt !see x !you;
jump iv> := s[type=?x]\np : \x.!simp !prt !jump x;
started tv2> := (s[type=?x]\np)/(s\np) : \x\y\z.!simp !pst !start (x y z) z;
roll tv> := (s[type=?x]\np)/np : \x\y.!roll x y;
go tv> := (s[type=?x]\np)/(s\np) : \x\y.!simp !prt !go (x y) y;
sleep iv> := s[type=?x]\np : \x.!sleep x;
did aux := s[type=q]/np : \x.!q !simp !pst x;
ever tp := s\s : \x.!time x !ever;
to x := (s/s)/(s\np) : \x\y.x y;
do tv> := s[type=?x]\np : \x.!do x;
tell dv> := s[type=imp]/(s\np)/np/np : \x\y\z.!simp !prt !tell (z x) x y !you;
put tv> := (s[type=?x]\np)/np : \x\y.!simp !prt !put x y;
put tv> := (s[type=?x]\np)/np : \x\y.!put x y;
put tv> := s[type=imp]/np : \x.!simp !prt !put x !you;
put iv-in> := s[type=imp]/np/"in" : \x\y.!simp !prt (!put _ x) y !you;
putting tv-in> := (s[type=?x]\np)/"in"/np : \x\y\z.!cont (!put _ y) x z;
putting tv-on> := s[type=ing]/np/"on"/np : \x\y\z.!cont (!put _ y) x z;
putting tv-in> := (s[type=ing]\np)/np/"in"/np : \x\y\z\w.!cont (!put _ y) x z w;
putting tv-on> := (s[type=ing]\np)/np/"on"/np : \x\y\z\w.!cont (!put _ y) x z w;
put tv-over> := (s[type=?x]\np)/"over"/np : \x\y\z.(!put _ y) x z;
put tv-away> := (s[type=?x]\np)/"away"/np : \x\y\z.(!put _ y) x z;
put tv-away> := s[type=imp]/"away"/np : \x\y.!simp !prt (!put _ y) x !you;
put tv-away> := (s[type=?x]\np)/"away"/np : \x\y\z.!simp !prt (!put _ y) x z;
put tv-out> := (s[type=?x]\np)/"out"/np : \x\y\z.(!put _ y) x z;
put tv-back> := (s[type=?x]\np)/"back"/np : \x\y\z.(!put _ y) x z;
put tv-back> := (s[type=?x]\np)/"back"/np : \x\y\z.!simp !prt (!put _ y) x z;
put tv-back> := s[type=imp]/"back"/np : \x\y.!simp !prt (!put _ y) x !you;
put tv-on> := s[type=imp]/np/"on"/np : \x\y\z.!simp !prt (!put _ y) x z !you;
put tv-on> := s[type=imp]/"on"/np : \x\y.!simp !prt (!put _ y) x !you;
put dv-on> := (s[type=?x]\np)/np/"on"/np : \x\y\z\w.(!put _ y) x z w;
put dv-on> := (s[type=?x]\np)/np/"on"/np : \x\y\z\w.!simp !prt (!put _ y) x z w;
put tv-on> := (s[type=?x]\np)/"on"/np : \x\y\z.(!put _ y) x z;
put tv-on> := (s[type=?x]\np)/"on"/np : \x\y\z.!simp !prt (!put _ y) x z;
put tv-in> := (s[type=?x]\np)/"in"/np : \x\y\z.!simp !prt (!put _ y) x z;
put dv-in> := s[type=imp]/np/"in"/np : \x\y\z.!simp !prt (!put _ y) x z !you;
put tv-in> := (s[type=?x]\np)/"in" : \x\y.!simp !prt (!put _ x) y;
put tv-in> := (s[type=?x]\np)/"in"/np : \x\y\z.(!put _ y) x z;
put dv-in> := (s[type=?x]\np)/np/"in"/np : \x\y\z\w.!simp !prt (!put _ y) x z w;
put tv-in> := s[type=imp]/"in"/np : \x\y.!simp !prt (!put _ y) x !you;
back adv := (s\np)\(s\np) : \x\y.x y !back;
up adv := (s\np)\(s\np) : \x\y.x y !up;
