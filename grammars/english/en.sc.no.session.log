
/‾\ /‾\  pass List of commands where we load english grammar, generate case functions


/‾\ /‾\  pass and do some anayses


/‾\ /‾\  pass No case functions generated


/‾\ /‾\  g en.txt

no errors in grammar text, proceeding with set up..
please check the /var/tmp/thebench/en.txt.log file for information.
file en.txt.src exists in /var/tmp/thebench/, regenerating it.
en.txt.src file generated
grammar loaded from /var/tmp/thebench/en.txt.src; ready for analysis

/‾\ /‾\  l show-config


*BEAMP* : NIL
*LAMBDAFLAG* : T
*NF-PARSE* : T
*OOVP* : NIL
*Beamp* = NIL  *Beam-exp* = 0.9

*A-APPLY* T
*B-COMP* T
*B2-COMP* T
*B3-COMP* T
*BX-COMP* T
*BX2-COMP* T
*BX3-COMP* T
*F-COMP* T
*F2-COMP* T
*F3-COMP* T
*FX-COMP* T
*FX2-COMP* T
*FX3-COMP* T
*T-APPLY* T

/‾\ /‾\  a sincerity admires john

Input: sincerity admires john

Number of analyses: 4
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (sincerity) := S/(S\NP)
        : (LAM P (P SINCERITY))
ELM   (admires) := (S\NP)/NP
        : ((ADMIRE X) Y)
ELM   (john) := (S\NP)\((S\NP)/NP)
        : (LAM P (P JOHN))
T     (|admires|)(|john|) := S\NP
        : ((LAM P (P JOHN)) ((ADMIRE X) Y))
A     (|sincerity|)(|admires| |john|) := S
        : ((LAM P (P SINCERITY)) ((LAM P (P JOHN)) ((ADMIRE X) Y)))

Final LF, normal-order evaluated: 

    ((((ADMIRE X) Y) JOHN) SINCERITY) =
    (ADMIRE X Y JOHN SINCERITY)

Derivation 2
--------------
ELM   (sincerity) := S/(S\NP)
        : (LAM P (P SINCERITY))
ELM   (admires) := (S\NP)/NP
        : ((ADMIRE X) Y)
ELM   (john) := NP
        : JOHN
A     (|admires|)(|john|) := S\NP
        : (((ADMIRE X) Y) JOHN)
A     (|sincerity|)(|admires| |john|) := S
        : ((LAM P (P SINCERITY)) (((ADMIRE X) Y) JOHN))

Final LF, normal-order evaluated: 

    ((((ADMIRE X) Y) JOHN) SINCERITY) =
    (ADMIRE X Y JOHN SINCERITY)

Derivation 3
--------------
ELM   (sincerity) := NP
        : SINCERITY
ELM   (admires) := (S\NP)/NP
        : ((ADMIRE X) Y)
ELM   (john) := (S\NP)\((S\NP)/NP)
        : (LAM P (P JOHN))
T     (|admires|)(|john|) := S\NP
        : ((LAM P (P JOHN)) ((ADMIRE X) Y))
T     (|sincerity|)(|admires| |john|) := S
        : (((LAM P (P JOHN)) ((ADMIRE X) Y)) SINCERITY)

Final LF, normal-order evaluated: 

    ((((ADMIRE X) Y) JOHN) SINCERITY) =
    (ADMIRE X Y JOHN SINCERITY)

Derivation 4
--------------
ELM   (sincerity) := NP
        : SINCERITY
ELM   (admires) := (S\NP)/NP
        : ((ADMIRE X) Y)
ELM   (john) := NP
        : JOHN
A     (|admires|)(|john|) := S\NP
        : (((ADMIRE X) Y) JOHN)
T     (|sincerity|)(|admires| |john|) := S
        : ((((ADMIRE X) Y) JOHN) SINCERITY)

Final LF, normal-order evaluated: 

    ((((ADMIRE X) Y) JOHN) SINCERITY) =
    (ADMIRE X Y JOHN SINCERITY)

/‾\ /‾\  a sincerity admires

Input: sincerity admires

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (sincerity) := S/(S\NP)
        : (LAM P (P SINCERITY))
ELM   (admires) := (S\NP)/NP
        : ((ADMIRE X) Y)
>B    (|sincerity|)(|admires|) := S/NP
        : (LAM X ((LAM P (P SINCERITY)) (((ADMIRE X) Y) X)))

Final LF, normal-order evaluated: 

    (LAM X ((((ADMIRE X) Y) X) SINCERITY)) =
    (\ X . ADMIRE X Y X SINCERITY)

/‾\ /‾\  a admires john

Input: admires john

Number of analyses: 2
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (admires) := (S\NP)/NP
        : ((ADMIRE X) Y)
ELM   (john) := (S\NP)\((S\NP)/NP)
        : (LAM P (P JOHN))
T     (|admires|)(|john|) := S\NP
        : ((LAM P (P JOHN)) ((ADMIRE X) Y))

Final LF, normal-order evaluated: 

    (((ADMIRE X) Y) JOHN) =
    (ADMIRE X Y JOHN)

Derivation 2
--------------
ELM   (admires) := (S\NP)/NP
        : ((ADMIRE X) Y)
ELM   (john) := NP
        : JOHN
A     (|admires|)(|john|) := S\NP
        : (((ADMIRE X) Y) JOHN)

Final LF, normal-order evaluated: 

    (((ADMIRE X) Y) JOHN) =
    (ADMIRE X Y JOHN)

/‾\ /‾\  a depart ed

Input: depart ed

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (depart) := IV
        : (LAM Y (DEPART Y))
ELM   (ed) := (S\NP)\\IV
        : (LAM P (LAM Y (((P _) PAST) Y)))
T     (|depart|)(|ed|) := S\NP
        : ((LAM P (LAM Y (((P _) PAST) Y))) (LAM Y (DEPART Y)))

Final LF, normal-order evaluated: 

    (LAM Y (((DEPART _) PAST) Y)) =
    (\ Y . DEPART _ PAST Y)

/‾\ /‾\  a depart+ed

Input: depart ed

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (depart) := IV
        : (LAM Y (DEPART Y))
ELM   (ed) := (S\NP)\\IV
        : (LAM P (LAM Y (((P _) PAST) Y)))
T     (|depart|)(|ed|) := S\NP
        : ((LAM P (LAM Y (((P _) PAST) Y))) (LAM Y (DEPART Y)))

Final LF, normal-order evaluated: 

    (LAM Y (((DEPART _) PAST) Y)) =
    (\ Y . DEPART _ PAST Y)

/‾\ /‾\  a dismiss+ed

Input: dismiss ed

Number of analyses: 2
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (dismiss) := IV/NP
        : (LAM X (LAM Y ((DISMISS X) Y)))
ELM   (ed) := IV\\(IV/NP)
        : (LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
T     (|dismiss|)(|ed|) := IV
        : ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
           (LAM X (LAM Y ((DISMISS X) Y))))

Final LF, normal-order evaluated: 

    (LAM X (LAM Y (PASS ((DISMISS X) Y)))) =
    (\ X . \ Y . PASS (DISMISS X Y))

Derivation 2
--------------
ELM   (dismiss) := IV/NP
        : (LAM X (LAM Y ((DISMISS X) Y)))
ELM   (ed) := (S\NP)\\(IV/NP)
        : (LAM P (LAM Y (((P _) PAST) Y)))
T     (|dismiss|)(|ed|) := S\NP
        : ((LAM P (LAM Y (((P _) PAST) Y))) (LAM X (LAM Y ((DISMISS X) Y))))

Final LF, normal-order evaluated: 

    (LAM Y (((DISMISS _) PAST) Y)) =
    (\ Y . DISMISS _ PAST Y)

/‾\ /‾\  a re introduce and consider

Input: re introduce and consider

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (re) := (IV/NP)//(IV/NP)
        : (LAM X (RE X))
ELM   (introduce) := IV/NP
        : (LAM X (LAM Y ((INTRODUCE X) Y)))
A     (|re|)(|introduce|) := IV/NP
        : ((LAM X (RE X)) (LAM X (LAM Y ((INTRODUCE X) Y))))
ELM   (and) := (@X\*@X)/*@X
        : ((AND (P X)) (Q X))
ELM   (consider) := IV/NP
        : (LAM X (LAM Y ((CONSIDER X) Y)))
>     (|and|)(|consider|) := (IV/NP)\*(IV/NP)
        : (((AND (P X)) (Q X)) (LAM X (LAM Y ((CONSIDER X) Y))))
T     (|re| |introduce|)(|and| |consider|) := IV/NP
        : ((((AND (P X)) (Q X)) (LAM X (LAM Y ((CONSIDER X) Y))))
           ((LAM X (RE X)) (LAM X (LAM Y ((INTRODUCE X) Y)))))

Final LF, normal-order evaluated: 

    ((((AND (P X)) (Q X)) (LAM X (LAM Y ((CONSIDER X) Y))))
     (RE (LAM X (LAM Y ((INTRODUCE X) Y))))) =
    (AND (P X) (Q X) (\ X . \ Y . CONSIDER X Y)
         (RE (\ X . \ Y . INTRODUCE X Y)))

/‾\ /‾\  a re+introduce and consider

Input: re introduce and consider

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (re) := (IV/NP)//(IV/NP)
        : (LAM X (RE X))
ELM   (introduce) := IV/NP
        : (LAM X (LAM Y ((INTRODUCE X) Y)))
A     (|re|)(|introduce|) := IV/NP
        : ((LAM X (RE X)) (LAM X (LAM Y ((INTRODUCE X) Y))))
ELM   (and) := (@X\*@X)/*@X
        : ((AND (P X)) (Q X))
ELM   (consider) := IV/NP
        : (LAM X (LAM Y ((CONSIDER X) Y)))
>     (|and|)(|consider|) := (IV/NP)\*(IV/NP)
        : (((AND (P X)) (Q X)) (LAM X (LAM Y ((CONSIDER X) Y))))
T     (|re| |introduce|)(|and| |consider|) := IV/NP
        : ((((AND (P X)) (Q X)) (LAM X (LAM Y ((CONSIDER X) Y))))
           ((LAM X (RE X)) (LAM X (LAM Y ((INTRODUCE X) Y)))))

Final LF, normal-order evaluated: 

    ((((AND (P X)) (Q X)) (LAM X (LAM Y ((CONSIDER X) Y))))
     (RE (LAM X (LAM Y ((INTRODUCE X) Y))))) =
    (AND (P X) (Q X) (\ X . \ Y . CONSIDER X Y)
         (RE (\ X . \ Y . INTRODUCE X Y)))

/‾\ /‾\  a dismiss and reprimand ed 

Input: dismiss and reprimand ed

Number of analyses: 0
Done. Try , command for results

/‾\ /‾\  ,



/‾\ /‾\  a dismiss and reprimand+ed 

Input: dismiss and reprimand ed

Number of analyses: 0
Done. Try , command for results

/‾\ /‾\  ,



/‾\ /‾\  a mary musn't have been being dismiss ed

Input: mary musn't have been being dismiss ed

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (mary) := NP
        : MARY
ELM   (musn't) := (S\NP)/IV
        : (LAM P (LAM X (MUSTNOT (P X))))
ELM   (have) := IV/IV
        : (LAM P (HAVE P))
ELM   (been) := IV/IV
        : (LAM P (BEEN P))
ELM   (being) := IV/IV
        : (LAM P (BEING P))
ELM   (dismiss) := IV/NP
        : (LAM X (LAM Y ((DISMISS X) Y)))
ELM   (ed) := IV\\(IV/NP)
        : (LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
T     (|dismiss|)(|ed|) := IV
        : ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
           (LAM X (LAM Y ((DISMISS X) Y))))
A     (|being|)(|dismiss| |ed|) := IV
        : ((LAM P (BEING P))
           ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
            (LAM X (LAM Y ((DISMISS X) Y)))))
A     (|been|)(|being| |dismiss| |ed|) := IV
        : ((LAM P (BEEN P))
           ((LAM P (BEING P))
            ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
             (LAM X (LAM Y ((DISMISS X) Y))))))
A     (|have|)(|been| |being| |dismiss| |ed|) := IV
        : ((LAM P (HAVE P))
           ((LAM P (BEEN P))
            ((LAM P (BEING P))
             ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
              (LAM X (LAM Y ((DISMISS X) Y)))))))
A     (|musn't|)(|have| |been| |being| |dismiss| |ed|) := S\NP
        : ((LAM P (LAM X (MUSTNOT (P X))))
           ((LAM P (HAVE P))
            ((LAM P (BEEN P))
             ((LAM P (BEING P))
              ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
               (LAM X (LAM Y ((DISMISS X) Y))))))))
T     (|mary|)(|musn't| |have| |been| |being| |dismiss| |ed|) := S
        : (((LAM P (LAM X (MUSTNOT (P X))))
            ((LAM P (HAVE P))
             ((LAM P (BEEN P))
              ((LAM P (BEING P))
               ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
                (LAM X (LAM Y ((DISMISS X) Y))))))))
           MARY)

Final LF, normal-order evaluated: 

    (MUSTNOT
     ((HAVE (BEEN (BEING (LAM X (LAM Y (PASS ((DISMISS X) Y))))))) MARY)) =
    (MUSTNOT (HAVE (BEEN (BEING (\ X . \ Y . PASS (DISMISS X Y)))) MARY))

/‾\ /‾\  a mary musn't have been being dismiss+ed

Input: mary musn't have been being dismiss ed

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (mary) := NP
        : MARY
ELM   (musn't) := (S\NP)/IV
        : (LAM P (LAM X (MUSTNOT (P X))))
ELM   (have) := IV/IV
        : (LAM P (HAVE P))
ELM   (been) := IV/IV
        : (LAM P (BEEN P))
ELM   (being) := IV/IV
        : (LAM P (BEING P))
ELM   (dismiss) := IV/NP
        : (LAM X (LAM Y ((DISMISS X) Y)))
ELM   (ed) := IV\\(IV/NP)
        : (LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
T     (|dismiss|)(|ed|) := IV
        : ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
           (LAM X (LAM Y ((DISMISS X) Y))))
A     (|being|)(|dismiss| |ed|) := IV
        : ((LAM P (BEING P))
           ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
            (LAM X (LAM Y ((DISMISS X) Y)))))
A     (|been|)(|being| |dismiss| |ed|) := IV
        : ((LAM P (BEEN P))
           ((LAM P (BEING P))
            ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
             (LAM X (LAM Y ((DISMISS X) Y))))))
A     (|have|)(|been| |being| |dismiss| |ed|) := IV
        : ((LAM P (HAVE P))
           ((LAM P (BEEN P))
            ((LAM P (BEING P))
             ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
              (LAM X (LAM Y ((DISMISS X) Y)))))))
A     (|musn't|)(|have| |been| |being| |dismiss| |ed|) := S\NP
        : ((LAM P (LAM X (MUSTNOT (P X))))
           ((LAM P (HAVE P))
            ((LAM P (BEEN P))
             ((LAM P (BEING P))
              ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
               (LAM X (LAM Y ((DISMISS X) Y))))))))
T     (|mary|)(|musn't| |have| |been| |being| |dismiss| |ed|) := S
        : (((LAM P (LAM X (MUSTNOT (P X))))
            ((LAM P (HAVE P))
             ((LAM P (BEEN P))
              ((LAM P (BEING P))
               ((LAM P (LAM X (LAM Y (PASS ((P X) Y)))))
                (LAM X (LAM Y ((DISMISS X) Y))))))))
           MARY)

Final LF, normal-order evaluated: 

    (MUSTNOT
     ((HAVE (BEEN (BEING (LAM X (LAM Y (PASS ((DISMISS X) Y))))))) MARY)) =
    (MUSTNOT (HAVE (BEEN (BEING (\ X . \ Y . PASS (DISMISS X Y)))) MARY))

/‾\ /‾\  a without reading

Input: without reading

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (without) := ((S\NP)\(S\NP))/VP
        : (LAM P (LAM Q (LAM X ((WITHOUT (P X)) (Q X)))))
ELM   (reading) := VP/NP
        : (LAM X (LAM Y ((READ X) Y)))
>B    (|without|)(|reading|) := ((S\NP)\(S\NP))/NP
        : (LAM X
           ((LAM P (LAM Q (LAM X ((WITHOUT (P X)) (Q X)))))
            ((LAM X (LAM Y ((READ X) Y))) X)))

Final LF, normal-order evaluated: 

    (LAM X (LAM Q (LAM G6230 ((WITHOUT ((READ X) G6230)) (Q G6230))))) =
    (\ X . \ Q . \ G6238 . WITHOUT (READ X G6238) (Q G6238))

/‾\ /‾\  a what and where |did Sally sing| 

Input: what and where did Sally sing

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (what) := S/(S/NP)
        : (LAM P (LAM X (QUESTION (P X))))
ELM   (and) := (@X\*@X)/*@X
        : ((AND (P X)) (Q X))
ELM   (where) := S/(S/NP)
        : (LAM P (LAM X ((QUESTION (AT X)) (P X))))
>     (|and|)(|where|) := (S/(S/NP))\*(S/(S/NP))
        : (((AND (P X)) (Q X)) (LAM P (LAM X ((QUESTION (AT X)) (P X)))))
T     (|what|)(|and| |where|) := S/(S/NP)
        : ((((AND (P X)) (Q X)) (LAM P (LAM X ((QUESTION (AT X)) (P X)))))
           (LAM P (LAM X (QUESTION (P X)))))
ELM   (did Sally sing) := S/NP
        : (LAM Y (LAM X ((SING X) Y)))
A     (|what| |and| |where|)(|did Sally sing|) := S
        : (((((AND (P X)) (Q X)) (LAM P (LAM X ((QUESTION (AT X)) (P X)))))
            (LAM P (LAM X (QUESTION (P X)))))
           (LAM Y (LAM X ((SING X) Y))))

Final LF, normal-order evaluated: 

    (((((AND (P X)) (Q X)) (LAM P (LAM X ((QUESTION (AT X)) (P X)))))
      (LAM P (LAM X (QUESTION (P X)))))
     (LAM Y (LAM X ((SING X) Y)))) =
    (AND (P X) (Q X) (\ P . \ X . QUESTION (AT X) (P X))
         (\ P . \ X . QUESTION (P X)) (\ Y . \ X . SING X Y))

/‾\ /‾\  a sincerity wants to study

Input: sincerity wants to study

Number of analyses: 2
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (sincerity) := S/(S\NP)
        : (LAM P (P SINCERITY))
ELM   (wants) := (S\NP)/VP
        : (LAM P (LAM Y ((WANT (P Y)) Y)))
ELM   (to) := VP/IV
        : (LAM P P)
ELM   (study) := IV
        : (LAM X (STUDY X))
A     (|to|)(|study|) := VP
        : ((LAM P P) (LAM X (STUDY X)))
A     (|wants|)(|to| |study|) := S\NP
        : ((LAM P (LAM Y ((WANT (P Y)) Y))) ((LAM P P) (LAM X (STUDY X))))
A     (|sincerity|)(|wants| |to| |study|) := S
        : ((LAM P (P SINCERITY))
           ((LAM P (LAM Y ((WANT (P Y)) Y))) ((LAM P P) (LAM X (STUDY X)))))

Final LF, normal-order evaluated: 

    ((WANT (STUDY SINCERITY)) SINCERITY) =
    (WANT (STUDY SINCERITY) SINCERITY)

Derivation 2
--------------
ELM   (sincerity) := NP
        : SINCERITY
ELM   (wants) := (S\NP)/VP
        : (LAM P (LAM Y ((WANT (P Y)) Y)))
ELM   (to) := VP/IV
        : (LAM P P)
ELM   (study) := IV
        : (LAM X (STUDY X))
A     (|to|)(|study|) := VP
        : ((LAM P P) (LAM X (STUDY X)))
A     (|wants|)(|to| |study|) := S\NP
        : ((LAM P (LAM Y ((WANT (P Y)) Y))) ((LAM P P) (LAM X (STUDY X))))
T     (|sincerity|)(|wants| |to| |study|) := S
        : (((LAM P (LAM Y ((WANT (P Y)) Y))) ((LAM P P) (LAM X (STUDY X))))
           SINCERITY)

Final LF, normal-order evaluated: 

    ((WANT (STUDY SINCERITY)) SINCERITY) =
    (WANT (STUDY SINCERITY) SINCERITY)

/‾\ /‾\  a the novel that Mo persuaded sincerity to write

Input: the novel that Mo persuaded sincerity to write

Number of analyses: 0
Done. Try , command for results

/‾\ /‾\  ,



/‾\ /‾\  a Mo persuaded sincerity to write the novel

Input: Mo persuaded sincerity to write the novel

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (Mo) := NP
        : (LAM P (P MO))
ELM   (persuaded) := ((S\NP)/VP)/NP
        : (LAM X (LAM P (LAM Y (((PERSUADE (P X)) X) Y))))
ELM   (sincerity) := NP
        : SINCERITY
A     (|persuaded|)(|sincerity|) := (S\NP)/VP
        : ((LAM X (LAM P (LAM Y (((PERSUADE (P X)) X) Y)))) SINCERITY)
ELM   (to) := VP/IV
        : (LAM P P)
ELM   (write) := IV/NP
        : (LAM X (LAM Y ((WRITE X) Y)))
ELM   (the) := NP/*N
        : (LAM X (DEF X))
ELM   (novel) := N
        : (LAM X (NOVEL X))
A     (|the|)(|novel|) := NP
        : ((LAM X (DEF X)) (LAM X (NOVEL X)))
A     (|write|)(|the| |novel|) := IV
        : ((LAM X (LAM Y ((WRITE X) Y))) ((LAM X (DEF X)) (LAM X (NOVEL X))))
A     (|to|)(|write| |the| |novel|) := VP
        : ((LAM P P)
           ((LAM X (LAM Y ((WRITE X) Y))) ((LAM X (DEF X)) (LAM X (NOVEL X)))))
A     (|persuaded| |sincerity|)(|to| |write| |the| |novel|) := S\NP
        : (((LAM X (LAM P (LAM Y (((PERSUADE (P X)) X) Y)))) SINCERITY)
           ((LAM P P)
            ((LAM X (LAM Y ((WRITE X) Y)))
             ((LAM X (DEF X)) (LAM X (NOVEL X))))))
T     (|Mo|)(|persuaded| |sincerity| |to| |write| |the| |novel|) := S
        : ((((LAM X (LAM P (LAM Y (((PERSUADE (P X)) X) Y)))) SINCERITY)
            ((LAM P P)
             ((LAM X (LAM Y ((WRITE X) Y)))
              ((LAM X (DEF X)) (LAM X (NOVEL X))))))
           (LAM P (P MO)))

Final LF, normal-order evaluated: 

    (((PERSUADE ((WRITE (DEF (LAM X (NOVEL X)))) SINCERITY)) SINCERITY)
     (LAM P (P MO))) =
    (PERSUADE (WRITE (DEF (\ X . NOVEL X)) SINCERITY) SINCERITY (\ P . P MO))

/‾\ /‾\  a every poem shines

Input: every poem shines

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (every) := (S/(S\NP))/N
        : (LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
ELM   (poem) := N
        : (LAM X (POEM X))
A     (|every|)(|poem|) := S/(S\NP)
        : ((LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
           (LAM X (POEM X)))
ELM   (shines) := S\NP
        : (LAM X (SHINE X))
A     (|every| |poem|)(|shines|) := S
        : (((LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
            (LAM X (POEM X)))
           (LAM X (SHINE X)))

Final LF, normal-order evaluated: 

    (LAM X ((FORALL X) ((IMP (POEM X)) (SHINE X)))) =
    (\ X . FORALL X (IMP (POEM X) (SHINE X)))

/‾\ /‾\  a Mo likes

Input: Mo likes

Number of analyses: 0
Done. Try , command for results

/‾\ /‾\  ,



/‾\ /‾\  a I gave |to Mo|

Input: I gave to Mo

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (I) := S/(S\NP)
        : (LAM P (P I))
ELM   (gave) := ((S\NP)/PP)/NP
        : (LAM X (LAM Y (LAM Z (((GIVE Y) X) Z))))
ELM   (to Mo) := (S\NP)\((S\NP)/PP)
        : (LAM P (P MO))
<Bx   (|gave|)(|to Mo|) := (S\NP)/NP
        : (LAM X ((LAM P (P MO)) ((LAM X (LAM Y (LAM Z (((GIVE Y) X) Z)))) X)))
>B    (I)(|gave| |to Mo|) := S/NP
        : (LAM X
           ((LAM P (P I))
            ((LAM X
              ((LAM P (P MO)) ((LAM X (LAM Y (LAM Z (((GIVE Y) X) Z)))) X)))
             X)))

Final LF, normal-order evaluated: 

    (LAM X (((GIVE MO) X) I)) =
    (\ X . GIVE MO X I)

/‾\ /‾\  a I believe sincerity loves cats

Input: I believe sincerity loves cats

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (I) := S/(S\NP)
        : (LAM P (P I))
ELM   (believe) := (S\NP)/SP
        : (LAM S (LAM X ((BELIEVE S) X)))
ELM   (sincerity) := NP
        : SINCERITY
ELM   (loves) := (SP\NP)/NP
        : (LAM X (LAM Y ((LOVE X) Y)))
ELM   (cats) := NP
        : CATS
A     (|loves|)(|cats|) := SP\NP
        : ((LAM X (LAM Y ((LOVE X) Y))) CATS)
T     (|sincerity|)(|loves| |cats|) := SP
        : (((LAM X (LAM Y ((LOVE X) Y))) CATS) SINCERITY)
A     (|believe|)(|sincerity| |loves| |cats|) := S\NP
        : ((LAM S (LAM X ((BELIEVE S) X)))
           (((LAM X (LAM Y ((LOVE X) Y))) CATS) SINCERITY))
A     (I)(|believe| |sincerity| |loves| |cats|) := S
        : ((LAM P (P I))
           ((LAM S (LAM X ((BELIEVE S) X)))
            (((LAM X (LAM Y ((LOVE X) Y))) CATS) SINCERITY)))

Final LF, normal-order evaluated: 

    ((BELIEVE ((LOVE CATS) SINCERITY)) I) =
    (BELIEVE (LOVE CATS SINCERITY) I)

/‾\ /‾\  a gave Mo a flower

Input: gave Mo a flower

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (gave) := ((S\NP)/NP)/NP
        : (LAM X (LAM Y (LAM Z (((GIVE X) Y) Z))))
ELM   (Mo) := NP
        : (LAM P (P MO))
A     (|gave|)(|Mo|) := (S\NP)/NP
        : ((LAM X (LAM Y (LAM Z (((GIVE X) Y) Z)))) (LAM P (P MO)))
ELM   (a) := ((S\NP)\((S\NP)/NP))/N
        : (LAM P (LAM Q (LAM X ((SOME X) ((AND (P X)) (Q X))))))
ELM   (flower) := N
        : (LAM X (FLOWER X))
A     (|a|)(|flower|) := (S\NP)\((S\NP)/NP)
        : ((LAM P (LAM Q (LAM X ((SOME X) ((AND (P X)) (Q X))))))
           (LAM X (FLOWER X)))
T     (|gave| |Mo|)(|a| |flower|) := S\NP
        : (((LAM P (LAM Q (LAM X ((SOME X) ((AND (P X)) (Q X))))))
            (LAM X (FLOWER X)))
           ((LAM X (LAM Y (LAM Z (((GIVE X) Y) Z)))) (LAM P (P MO))))

Final LF, normal-order evaluated: 

    (LAM X ((SOME X) ((AND (FLOWER X)) (LAM Z (((GIVE (LAM P (P MO))) X) Z))))) =
    (\ X . SOME X (AND (FLOWER X) (\ Z . GIVE (\ P . P MO) X Z)))

/‾\ /‾\  a tries to grab

Input: tries to grab

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,  



Derivation 1
--------------
ELM   (tries) := (S\NP)/VP
        : (LAM P (LAM X (TRY (P X))))
ELM   (to) := VP/IV
        : (LAM P P)
ELM   (grab) := IV/NP
        : (LAM X (LAM Y ((GRAN X) Y)))
>B    (|to|)(|grab|) := VP/NP
        : (LAM X ((LAM P P) ((LAM X (LAM Y ((GRAN X) Y))) X)))
>B    (|tries|)(|to| |grab|) := (S\NP)/NP
        : (LAM X
           ((LAM P (LAM X (TRY (P X))))
            ((LAM X ((LAM P P) ((LAM X (LAM Y ((GRAN X) Y))) X))) X)))

Final LF, normal-order evaluated: 

    (LAM X (LAM G6282 (TRY ((GRAN X) G6282)))) =
    (\ X . \ G6288 . TRY (GRAN X G6288))

/‾\ /‾\  pass scope inversion or no inversion


/‾\ /‾\  a every professor wrote a book

Input: every professor wrote a book

Number of analyses: 2
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (every) := (S/(S\NP))/N
        : (LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
ELM   (professor) := N
        : (LAM X (PROF X))
A     (|every|)(|professor|) := S/(S\NP)
        : ((LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
           (LAM X (PROF X)))
ELM   (wrote) := (S\NP)/INP
        : (LAM X (LAM Y ((WRITE X) Y)))
ELM   (a) := INP/*N
        : (LAM X (INDEF X))
ELM   (book) := N
        : (LAM X (BOOK X))
A     (|a|)(|book|) := INP
        : ((LAM X (INDEF X)) (LAM X (BOOK X)))
A     (|wrote|)(|a| |book|) := S\NP
        : ((LAM X (LAM Y ((WRITE X) Y))) ((LAM X (INDEF X)) (LAM X (BOOK X))))
A     (|every| |professor|)(|wrote| |a| |book|) := S
        : (((LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
            (LAM X (PROF X)))
           ((LAM X (LAM Y ((WRITE X) Y))) ((LAM X (INDEF X)) (LAM X (BOOK X)))))

Final LF, normal-order evaluated: 

    (LAM X ((FORALL X) ((IMP (PROF X)) ((WRITE (INDEF (LAM X (BOOK X)))) X)))) =
    (\ X . FORALL X (IMP (PROF X) (WRITE (INDEF (\ X . BOOK X)) X)))

Derivation 2
--------------
ELM   (every) := (S/(S\NP))/N
        : (LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
ELM   (professor) := N
        : (LAM X (PROF X))
A     (|every|)(|professor|) := S/(S\NP)
        : ((LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
           (LAM X (PROF X)))
ELM   (wrote) := (S\NP)/NP
        : (LAM X (LAM Y ((WRITE X) Y)))
ELM   (a) := ((S\NP)\((S\NP)/NP))/N
        : (LAM P (LAM Q (LAM X ((SOME X) ((AND (P X)) (Q X))))))
ELM   (book) := N
        : (LAM X (BOOK X))
A     (|a|)(|book|) := (S\NP)\((S\NP)/NP)
        : ((LAM P (LAM Q (LAM X ((SOME X) ((AND (P X)) (Q X))))))
           (LAM X (BOOK X)))
T     (|wrote|)(|a| |book|) := S\NP
        : (((LAM P (LAM Q (LAM X ((SOME X) ((AND (P X)) (Q X))))))
            (LAM X (BOOK X)))
           (LAM X (LAM Y ((WRITE X) Y))))
A     (|every| |professor|)(|wrote| |a| |book|) := S
        : (((LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
            (LAM X (PROF X)))
           (((LAM P (LAM Q (LAM X ((SOME X) ((AND (P X)) (Q X))))))
             (LAM X (BOOK X)))
            (LAM X (LAM Y ((WRITE X) Y)))))

Final LF, normal-order evaluated: 

    (LAM X
     ((FORALL X)
      ((IMP (PROF X)) ((SOME X) ((AND (BOOK X)) (LAM Y ((WRITE X) Y))))))) =
    (\ X . FORALL X (IMP (PROF X) (SOME X (AND (BOOK X) (\ Y . WRITE X Y)))))

/‾\ /‾\  a every worker missed a meal

Input: every worker missed a meal

Number of analyses: 1
Done. Try , command for results

/‾\ /‾\  ,



Derivation 1
--------------
ELM   (every) := (S/(S\NP))/N
        : (LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
ELM   (worker) := N
        : (LAM X (WORKER X))
A     (|every|)(|worker|) := S/(S\NP)
        : ((LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
           (LAM X (WORKER X)))
ELM   (missed) := (S\NP)/INP
        : (LAM X (LAM Y ((MISS X) Y)))
ELM   (a) := INP/*N
        : (LAM X (INDEF X))
ELM   (meal) := N
        : (LAM X (MEAL X))
A     (|a|)(|meal|) := INP
        : ((LAM X (INDEF X)) (LAM X (MEAL X)))
A     (|missed|)(|a| |meal|) := S\NP
        : ((LAM X (LAM Y ((MISS X) Y))) ((LAM X (INDEF X)) (LAM X (MEAL X))))
A     (|every| |worker|)(|missed| |a| |meal|) := S
        : (((LAM P (LAM Q (LAM X ((FORALL X) ((IMP (P X)) (Q X))))))
            (LAM X (WORKER X)))
           ((LAM X (LAM Y ((MISS X) Y))) ((LAM X (INDEF X)) (LAM X (MEAL X)))))

Final LF, normal-order evaluated: 

    (LAM X ((FORALL X) ((IMP (WORKER X)) ((MISS (INDEF (LAM X (MEAL X)))) X)))) =
    (\ X . FORALL X (IMP (WORKER X) (MISS (INDEF (\ X . MEAL X)) X)))
